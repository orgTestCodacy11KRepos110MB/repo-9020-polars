Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.load", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Duration", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.query", "reference/api/polars.SQLContext.register", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.arg_where", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.concat", "reference/api/polars.cut", "reference/api/polars.date_range", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturned", "reference/api/polars.exceptions.NotFoundError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.RowsException", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.TooManyRowsReturned", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.get_dummies", "reference/api/polars.get_idx_type", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches", "reference/api/polars.ones", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.read_sql", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_ds", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.series", "reference/api/polars.threadpool_size", "reference/api/polars.toggle_string_cache", "reference/api/polars.zeros", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.cleared", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pearson_corr", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_column", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/groupby", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.argsort", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.concat", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.diff", "reference/expressions/api/polars.Expr.arr.eval", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.head", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.lengths", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.slice", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.tail", "reference/expressions/api/polars.Expr.arr.take", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.cast_time_zone", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.tz_localize", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.with_time_zone", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.all", "reference/expressions/api/polars.any", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.argsort_by", "reference/expressions/api/polars.avg", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.col", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.date", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.list", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.max", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.pearson_corr", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.select", "reference/expressions/api/polars.spearman_rank_corr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/strings", "reference/expressions/struct", "reference/expressions/timeseries", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cleared", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan", "reference/lazyframe/api/polars.LazyFrame.describe_plan", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.from_json", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.read_json", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_ipc", "reference/lazyframe/api/polars.LazyFrame.sink_parquet", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_column", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.write_json", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/groupby", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.argsort", "reference/series/api/polars.Series.arr", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.concat", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.diff", "reference/series/api/polars.Series.arr.eval", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.head", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.lengths", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.mean", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.slice", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.tail", "reference/series/api/polars.Series.arr.take", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.cleared", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.cast_time_zone", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.tz_localize", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.with_time_zone", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_datelike", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.to_frame", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.time_unit", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/strings", "reference/series/struct", "reference/series/timeseries", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.query.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.arg_where.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.concat.rst", "reference/api/polars.cut.rst", "reference/api/polars.date_range.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturned.rst", "reference/api/polars.exceptions.NotFoundError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.RowsException.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.TooManyRowsReturned.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.get_dummies.rst", "reference/api/polars.get_idx_type.rst", "reference/api/polars.internals.batched.BatchedCsvReader.next_batches.rst", "reference/api/polars.ones.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.read_sql.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_ds.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.toggle_string_cache.rst", "reference/api/polars.zeros.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.cleared.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pearson_corr.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_column.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.__iter__.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.agg.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.all.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.apply.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.count.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.first.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.head.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.last.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.max.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.mean.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.median.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.min.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.n_unique.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.quantile.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.sum.rst", "reference/dataframe/api/polars.internals.dataframe.groupby.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/groupby.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.argsort.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.concat.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.diff.rst", "reference/expressions/api/polars.Expr.arr.eval.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.head.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.lengths.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.slice.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.tail.rst", "reference/expressions/api/polars.Expr.arr.take.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.cast_time_zone.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.tz_localize.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.with_time_zone.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.argsort_by.rst", "reference/expressions/api/polars.avg.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.col.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.list.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.pearson_corr.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.spearman_rank_corr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/strings.rst", "reference/expressions/struct.rst", "reference/expressions/timeseries.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cleared.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.describe_optimized_plan.rst", "reference/lazyframe/api/polars.LazyFrame.describe_plan.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.from_json.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.read_json.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_ipc.rst", "reference/lazyframe/api/polars.LazyFrame.sink_parquet.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_column.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.write_json.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.internals.lazyframe.groupby.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/groupby.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.argsort.rst", "reference/series/api/polars.Series.arr.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.concat.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.diff.rst", "reference/series/api/polars.Series.arr.eval.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.head.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.lengths.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.mean.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.slice.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.tail.rst", "reference/series/api/polars.Series.arr.take.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.cleared.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.cast_time_zone.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.tz_localize.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.with_time_zone.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_datelike.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.to_frame.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.time_unit.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/strings.rst", "reference/series/struct.rst", "reference/series/timeseries.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["&lt;no title&gt;", "Extending the API", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.load", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.set_ascii_tables", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_ipc", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Duration", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.query", "polars.SQLContext.register", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.arg_where", "polars.build_info", "polars.collect_all", "polars.concat", "polars.cut", "polars.date_range", "polars.exceptions.ArrowError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturned", "polars.exceptions.NotFoundError", "polars.exceptions.PanicException", "polars.exceptions.RowsException", "polars.exceptions.SchemaError", "polars.exceptions.ShapeError", "polars.exceptions.TooManyRowsReturned", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.get_dummies", "polars.get_idx_type", "polars.internals.batched.BatchedCsvReader.next_batches", "polars.ones", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_json", "polars.read_ndjson", "polars.read_parquet", "polars.read_parquet_schema", "polars.read_sql", "polars.scan_csv", "polars.scan_delta", "polars.scan_ds", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_series_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.dataframes", "polars.testing.parametric.series", "polars.threadpool_size", "polars.toggle_string_cache", "polars.zeros", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.cleared", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.get_column", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.max", "polars.DataFrame.mean", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pearson_corr", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.reverse", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_column", "polars.DataFrame.with_columns", "polars.DataFrame.with_row_count", "polars.internals.dataframe.groupby.GroupBy.__iter__", "polars.internals.dataframe.groupby.GroupBy.agg", "polars.internals.dataframe.groupby.GroupBy.all", "polars.internals.dataframe.groupby.GroupBy.apply", "polars.internals.dataframe.groupby.GroupBy.count", "polars.internals.dataframe.groupby.GroupBy.first", "polars.internals.dataframe.groupby.GroupBy.head", "polars.internals.dataframe.groupby.GroupBy.last", "polars.internals.dataframe.groupby.GroupBy.max", "polars.internals.dataframe.groupby.GroupBy.mean", "polars.internals.dataframe.groupby.GroupBy.median", "polars.internals.dataframe.groupby.GroupBy.min", "polars.internals.dataframe.groupby.GroupBy.n_unique", "polars.internals.dataframe.groupby.GroupBy.quantile", "polars.internals.dataframe.groupby.GroupBy.sum", "polars.internals.dataframe.groupby.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_unique", "polars.Expr.argsort", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.concat", "polars.Expr.arr.contains", "polars.Expr.arr.diff", "polars.Expr.arr.eval", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.head", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.lengths", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.slice", "polars.Expr.arr.sort", "polars.Expr.arr.sum", "polars.Expr.arr.tail", "polars.Expr.arr.take", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.cast", "polars.Expr.cat.set_ordering", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.count", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.cast_time_zone", "polars.Expr.dt.combine", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.timestamp", "polars.Expr.dt.truncate", "polars.Expr.dt.tz_localize", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.with_time_zone", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.forward_fill", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.lower_bound", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.undo_aliases", "polars.Expr.min", "polars.Expr.mode", "polars.Expr.n_unique", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.null_count", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.quantile", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rolling_apply", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.count_match", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.json_path_match", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strptime", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.rename_fields", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.all", "polars.any", "polars.apply", "polars.arange", "polars.argsort_by", "polars.avg", "polars.coalesce", "polars.col", "polars.concat_list", "polars.concat_str", "polars.count", "polars.cov", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.date", "polars.datetime", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.list", "polars.lit", "polars.map", "polars.max", "polars.mean", "polars.median", "polars.min", "polars.n_unique", "polars.pearson_corr", "polars.quantile", "polars.reduce", "polars.repeat", "polars.select", "polars.spearman_rank_corr", "polars.std", "polars.struct", "polars.sum", "polars.tail", "polars.var", "polars.when", "Array", "Binary", "Boolean", "Categories", "Columns / names", "Computation", "Functions", "Expressions", "Meta", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.cache", "polars.LazyFrame.cleared", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.columns", "polars.LazyFrame.describe_optimized_plan", "polars.LazyFrame.describe_plan", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.from_json", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.read_json", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_column", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.write_json", "polars.internals.lazyframe.groupby.LazyGroupBy.agg", "polars.internals.lazyframe.groupby.LazyGroupBy.apply", "polars.internals.lazyframe.groupby.LazyGroupBy.head", "polars.internals.lazyframe.groupby.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.argsort", "polars.Series.arr", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.concat", "polars.Series.arr.contains", "polars.Series.arr.diff", "polars.Series.arr.eval", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.head", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.lengths", "polars.Series.arr.max", "polars.Series.arr.mean", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.slice", "polars.Series.arr.sort", "polars.Series.arr.sum", "polars.Series.arr.tail", "polars.Series.arr.take", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.set_ordering", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.cleared", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.cast_time_unit", "polars.Series.dt.cast_time_zone", "polars.Series.dt.combine", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.timestamp", "polars.Series.dt.truncate", "polars.Series.dt.tz_localize", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.with_time_zone", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_boolean", "polars.Series.is_datelike", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.log", "polars.Series.log10", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rolling_apply", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.sample", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.count_match", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.json_path_match", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strptime", "polars.Series.str.to_lowercase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.rename_fields", "polars.Series.struct.to_frame", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.time_unit", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "Miscellaneous", "Manipulation/selection", "Strings", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 79, 88, 103, 116, 119, 120, 215, 217, 235, 247, 537, 613], "refer": [0, 90, 91, 93, 211, 235, 405, 463, 537, 792, 855, 893], "input": [0, 55, 81, 90, 91, 93, 235, 380, 390, 486, 504, 512, 513, 516, 537, 546, 774, 893], "output": [0, 25, 27, 28, 65, 93, 110, 120, 142, 143, 154, 164, 169, 172, 181, 184, 207, 212, 235, 243, 247, 382, 383, 389, 481, 486, 512, 523, 537, 546, 567, 568, 577, 582, 591, 608, 611, 613, 619, 628, 881, 893], "seri": [0, 1, 20, 46, 56, 57, 58, 59, 60, 63, 64, 65, 78, 80, 83, 88, 109, 110, 112, 116, 120, 126, 134, 136, 138, 139, 144, 147, 148, 150, 152, 160, 161, 165, 177, 178, 184, 192, 196, 201, 202, 211, 212, 216, 235, 246, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 263, 268, 269, 276, 277, 280, 281, 282, 285, 291, 292, 296, 297, 309, 310, 313, 316, 319, 321, 323, 326, 330, 332, 335, 336, 339, 340, 348, 349, 355, 359, 361, 363, 364, 365, 366, 367, 369, 370, 371, 381, 382, 401, 405, 406, 407, 408, 409, 411, 423, 424, 427, 430, 431, 438, 457, 463, 467, 472, 473, 474, 475, 480, 486, 487, 489, 490, 491, 492, 493, 494, 496, 497, 498, 504, 505, 507, 509, 511, 512, 513, 514, 515, 516, 517, 520, 521, 522, 524, 525, 526, 527, 528, 537, 546, 563, 591, 607, 608, 619, 885, 887, 889, 892, 896, 897, 898], "datafram": [0, 1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 44, 46, 55, 56, 57, 58, 59, 60, 62, 63, 64, 78, 79, 80, 81, 82, 83, 84, 85, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 104, 105, 106, 108, 110, 111, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 282, 283, 284, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 495, 498, 501, 502, 503, 504, 506, 507, 509, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 537, 546, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 619, 627, 647, 665, 674, 689, 837, 839, 851, 852, 862, 863, 872, 873, 881, 893], "lazyfram": [0, 1, 43, 45, 55, 56, 57, 58, 59, 62, 63, 101, 102, 103, 104, 105, 106, 108, 112, 158, 171, 235, 282, 352, 537, 546, 618, 899], "express": [0, 60, 62, 65, 110, 112, 113, 120, 132, 134, 141, 167, 172, 180, 184, 190, 212, 215, 217, 235, 243, 244, 246, 247, 264, 282, 293, 294, 295, 298, 304, 306, 311, 327, 346, 349, 352, 359, 361, 365, 368, 373, 376, 381, 382, 383, 387, 388, 389, 390, 401, 402, 403, 408, 422, 423, 424, 426, 428, 433, 439, 447, 463, 469, 472, 478, 480, 483, 487, 490, 491, 495, 496, 497, 498, 502, 503, 504, 505, 506, 507, 511, 512, 513, 516, 518, 520, 521, 522, 523, 525, 526, 529, 536, 546, 552, 560, 563, 585, 591, 593, 594, 595, 596, 598, 607, 608, 609, 612, 613, 619, 647, 678, 679, 680, 688, 697, 717, 740, 810, 817, 831, 839, 893], "extend": [0, 81, 235, 349, 537, 546, 627, 740, 893], "function": [0, 56, 57, 58, 59, 60, 64, 79, 90, 91, 93, 101, 111, 120, 129, 136, 163, 170, 171, 172, 203, 206, 217, 235, 244, 247, 282, 304, 330, 343, 344, 345, 382, 383, 399, 411, 412, 413, 414, 415, 416, 418, 419, 420, 432, 476, 484, 486, 496, 497, 504, 505, 507, 512, 520, 537, 546, 577, 581, 584, 613, 619, 628, 665, 688, 720, 734, 735, 736, 737, 798, 812, 813, 819, 824, 893], "data": [0, 1, 13, 16, 30, 46, 55, 56, 58, 63, 69, 70, 75, 76, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 108, 109, 111, 112, 113, 119, 121, 122, 131, 140, 142, 154, 155, 156, 158, 171, 175, 180, 181, 182, 188, 195, 199, 200, 211, 212, 214, 233, 235, 290, 309, 331, 339, 360, 367, 369, 405, 421, 422, 432, 463, 476, 478, 490, 523, 537, 546, 550, 551, 560, 567, 584, 595, 596, 607, 608, 612, 619, 627, 672, 677, 681, 693, 695, 729, 792, 808, 809, 819, 824, 855, 874, 875, 877, 879, 883, 892, 893], "type": [0, 1, 2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 69, 78, 80, 81, 82, 83, 84, 88, 90, 91, 92, 93, 101, 102, 107, 108, 109, 112, 115, 116, 120, 130, 136, 140, 142, 143, 144, 155, 195, 199, 200, 202, 204, 205, 235, 247, 269, 282, 290, 291, 293, 294, 295, 310, 313, 316, 319, 321, 323, 326, 332, 340, 346, 357, 361, 363, 365, 366, 408, 458, 459, 460, 463, 476, 486, 491, 499, 500, 501, 503, 504, 511, 537, 546, 552, 560, 567, 568, 585, 594, 595, 596, 603, 604, 619, 652, 665, 672, 674, 678, 679, 680, 696, 699, 702, 708, 710, 713, 716, 722, 730, 748, 819, 850, 851, 852, 874, 875, 877, 884, 893], "config": [0, 55, 546], "except": [0, 145, 157, 193, 235, 546, 573, 619, 875, 883, 893], "test": [0, 93, 546, 569, 576, 619], "util": [0, 507, 546, 560, 619], "sql": [0, 43, 100, 156, 235, 546], "These": [1, 117, 335, 536, 725], "allow": [1, 46, 69, 79, 101, 103, 104, 105, 106, 112, 113, 119, 154, 157, 158, 180, 181, 182, 214, 235, 327, 407, 422, 463, 537, 572, 573, 577, 595, 596, 609, 619, 717, 794, 809, 811, 855, 893], "you": [1, 29, 55, 78, 80, 81, 82, 84, 88, 90, 91, 93, 98, 101, 108, 116, 120, 127, 131, 154, 157, 167, 181, 197, 199, 203, 217, 235, 247, 264, 293, 294, 295, 346, 352, 382, 407, 412, 413, 414, 415, 416, 418, 419, 420, 448, 451, 463, 487, 496, 505, 537, 552, 557, 569, 573, 576, 594, 596, 613, 619, 627, 647, 678, 679, 680, 794, 840, 843, 855, 875, 883, 893], "regist": [1, 56, 57, 58, 59], "custom": [1, 56, 57, 58, 59, 120, 217, 235, 247, 282, 382, 411, 486, 512, 537, 577, 613, 619, 628, 665, 798, 893], "dedic": [1, 79, 154, 181, 235], "namespac": [1, 234, 536, 546, 618], "underli": [1, 66, 73, 78, 80, 81, 82, 84, 98, 112, 113, 131, 154, 155, 181, 195, 235, 286, 309, 310, 311, 312, 315, 317, 318, 320, 322, 324, 325, 328, 329, 331, 337, 338, 339, 341, 407, 421, 439, 441, 537, 627, 668, 695, 696, 697, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 729, 731, 794, 808, 819, 831, 833, 871, 875, 893], "polar": [1, 235, 536, 537, 546, 619, 893, 899, 900], "class": [1, 2, 3, 4, 6, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 83, 110, 111, 199, 200, 235, 537, 546, 619, 874, 875, 893, 899], "without": [1, 64, 92, 95, 99, 102, 103, 206, 235, 304, 330, 412, 413, 414, 415, 416, 418, 419, 420, 522, 537, 688, 693, 720, 893], "requir": [1, 29, 83, 108, 109, 169, 170, 200, 235, 343, 344, 345, 427, 463, 478, 537, 596, 619, 735, 736, 737, 818, 855, 875, 879, 893], "subclass": [1, 235], "mixin": 1, "expr": [1, 55, 56, 57, 58, 59, 60, 63, 65, 130, 132, 134, 141, 142, 143, 156, 167, 172, 180, 184, 190, 211, 212, 215, 235, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 537, 538, 541, 542, 543, 559, 561, 563, 566, 567, 568, 572, 586, 591, 593, 598, 607, 608, 612, 619, 647, 688, 697, 741, 817, 831, 835, 853, 866, 893], "ar": [1, 9, 15, 29, 46, 65, 71, 77, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 98, 101, 102, 103, 104, 105, 108, 109, 111, 112, 115, 117, 119, 120, 127, 129, 132, 136, 142, 143, 154, 157, 158, 163, 164, 170, 180, 181, 184, 196, 200, 207, 212, 235, 244, 282, 300, 302, 303, 307, 308, 330, 335, 342, 361, 363, 365, 366, 367, 369, 370, 371, 374, 405, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 429, 432, 434, 435, 448, 451, 452, 470, 487, 488, 493, 523, 530, 531, 533, 536, 537, 538, 541, 542, 543, 546, 557, 561, 567, 568, 569, 573, 576, 577, 581, 582, 585, 588, 591, 595, 596, 608, 609, 619, 625, 627, 665, 686, 687, 720, 725, 733, 734, 747, 756, 759, 760, 761, 762, 763, 764, 770, 792, 796, 798, 804, 821, 824, 840, 843, 844, 864, 875, 883, 885, 887, 889, 893, 896, 897, 898], "all": [1, 6, 12, 15, 20, 23, 30, 62, 63, 65, 78, 81, 83, 84, 85, 90, 91, 92, 93, 94, 98, 101, 102, 104, 105, 110, 111, 113, 127, 133, 145, 150, 152, 154, 155, 158, 163, 166, 167, 175, 180, 181, 189, 193, 198, 204, 207, 235, 245, 246, 264, 269, 279, 282, 284, 298, 304, 346, 356, 357, 360, 363, 366, 370, 371, 373, 376, 378, 382, 383, 394, 398, 402, 405, 410, 427, 433, 440, 446, 447, 450, 453, 454, 456, 462, 469, 481, 491, 503, 525, 537, 546, 552, 555, 557, 560, 562, 577, 581, 585, 594, 597, 603, 609, 619, 647, 652, 662, 665, 688, 754, 767, 792, 825, 832, 838, 839, 842, 845, 846, 848, 854, 893], "support": [1, 29, 63, 78, 79, 80, 81, 82, 83, 84, 92, 93, 100, 102, 110, 113, 117, 119, 154, 155, 181, 189, 197, 235, 277, 433, 457, 463, 537, 597, 619, 660, 825, 849, 855, 893], "target": [1, 61, 445, 463, 837, 855], "thi": [1, 6, 23, 25, 27, 29, 45, 46, 55, 60, 62, 63, 64, 78, 80, 81, 82, 83, 84, 87, 88, 90, 91, 92, 93, 94, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 116, 119, 120, 127, 128, 129, 131, 136, 141, 142, 143, 144, 148, 150, 152, 154, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 173, 174, 175, 180, 181, 182, 184, 187, 189, 191, 192, 195, 197, 199, 200, 203, 204, 206, 207, 208, 209, 211, 212, 213, 215, 217, 234, 235, 244, 246, 247, 256, 258, 264, 269, 282, 291, 298, 304, 309, 310, 317, 327, 330, 336, 339, 346, 348, 359, 360, 361, 365, 376, 381, 382, 387, 388, 389, 390, 396, 397, 399, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 424, 426, 427, 428, 433, 434, 435, 449, 450, 455, 456, 462, 463, 466, 467, 477, 478, 479, 480, 481, 484, 487, 492, 494, 496, 498, 503, 504, 505, 507, 522, 526, 537, 546, 547, 549, 552, 557, 560, 566, 567, 568, 570, 573, 577, 581, 582, 585, 588, 591, 593, 594, 595, 596, 597, 603, 607, 608, 609, 610, 611, 613, 618, 619, 627, 628, 637, 640, 647, 652, 674, 688, 693, 695, 696, 697, 703, 717, 720, 726, 729, 734, 739, 746, 747, 752, 753, 758, 759, 765, 768, 771, 775, 776, 777, 778, 780, 781, 783, 784, 786, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 802, 805, 806, 807, 809, 812, 813, 814, 817, 818, 819, 820, 825, 826, 828, 841, 842, 847, 848, 854, 855, 858, 859, 862, 863, 864, 871, 873, 874, 875, 876, 878, 879, 882, 883, 893], "featur": [1, 29, 46, 61, 235], "i": [1, 12, 25, 27, 28, 46, 55, 61, 62, 63, 64, 65, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 87, 90, 91, 92, 94, 98, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 119, 120, 127, 129, 137, 140, 141, 142, 143, 144, 148, 149, 151, 153, 154, 155, 157, 158, 161, 163, 164, 167, 169, 171, 172, 180, 181, 182, 189, 192, 195, 203, 204, 206, 207, 215, 217, 234, 235, 244, 245, 246, 247, 264, 267, 277, 281, 282, 304, 311, 327, 330, 335, 343, 344, 345, 348, 357, 359, 361, 374, 382, 390, 399, 405, 407, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 428, 429, 432, 433, 434, 435, 439, 440, 445, 446, 447, 449, 450, 452, 455, 456, 457, 460, 462, 463, 466, 481, 487, 488, 492, 494, 496, 497, 498, 505, 511, 522, 526, 537, 552, 557, 560, 566, 567, 568, 571, 573, 575, 577, 581, 582, 585, 594, 595, 596, 597, 603, 611, 613, 619, 626, 627, 628, 647, 650, 660, 664, 688, 697, 717, 720, 725, 734, 735, 736, 737, 739, 747, 748, 751, 752, 753, 755, 765, 766, 768, 769, 770, 792, 794, 796, 809, 810, 811, 812, 813, 814, 820, 821, 824, 825, 828, 831, 832, 837, 838, 839, 841, 842, 844, 847, 848, 849, 852, 854, 855, 858, 871, 875, 881, 882, 883, 893], "primarili": 1, "intend": 1, "us": [1, 8, 10, 12, 15, 20, 21, 25, 29, 46, 55, 65, 78, 79, 81, 82, 84, 86, 88, 90, 91, 92, 93, 94, 98, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 116, 120, 132, 133, 136, 142, 143, 154, 155, 157, 161, 163, 166, 167, 171, 172, 180, 182, 184, 190, 192, 203, 204, 207, 211, 212, 215, 217, 235, 242, 247, 264, 282, 286, 287, 291, 304, 307, 308, 339, 342, 343, 344, 345, 346, 351, 352, 360, 361, 374, 382, 386, 405, 407, 409, 412, 413, 414, 415, 416, 418, 419, 420, 422, 424, 427, 428, 432, 434, 435, 441, 442, 443, 448, 449, 455, 457, 459, 461, 463, 486, 487, 488, 491, 493, 496, 498, 505, 507, 511, 513, 516, 521, 526, 536, 537, 546, 552, 555, 561, 562, 566, 567, 568, 569, 573, 575, 576, 581, 591, 596, 598, 603, 607, 608, 613, 619, 628, 647, 665, 668, 669, 674, 688, 729, 733, 735, 736, 737, 741, 742, 747, 770, 792, 794, 796, 809, 812, 813, 814, 818, 820, 824, 828, 833, 834, 840, 841, 847, 849, 851, 855, 866, 874, 875, 882, 883, 893], "librari": [1, 66, 73, 382, 537, 900], "author": 1, "domain": 1, "specif": [1, 23, 78, 80, 82, 84, 92, 100, 102, 112, 154, 235, 411, 463, 525, 537, 798, 855, 893], "capabl": 1, "which": [1, 15, 24, 25, 26, 27, 28, 29, 55, 56, 57, 58, 59, 81, 90, 91, 92, 93, 100, 101, 102, 108, 127, 131, 142, 143, 190, 204, 235, 244, 282, 349, 361, 363, 366, 367, 369, 370, 371, 390, 412, 413, 414, 415, 416, 418, 419, 420, 452, 537, 557, 567, 568, 595, 596, 603, 611, 619, 627, 740, 756, 760, 761, 762, 763, 764, 812, 844, 893], "mai": [1, 29, 63, 64, 78, 80, 81, 82, 84, 90, 92, 94, 102, 103, 104, 120, 129, 131, 157, 186, 187, 206, 235, 276, 281, 282, 304, 309, 317, 330, 346, 412, 413, 414, 415, 416, 418, 419, 420, 425, 426, 463, 496, 497, 505, 520, 537, 573, 577, 592, 593, 596, 610, 613, 619, 627, 659, 664, 688, 695, 703, 720, 734, 816, 817, 855, 893], "exist": [1, 78, 92, 102, 112, 211, 212, 235, 311, 607, 608, 619, 697], "belong": [1, 142, 235, 567, 619], "core": [1, 83, 200, 235], "cannot": [1, 79, 90, 91, 108, 120, 182, 217, 235, 247, 286, 422, 441, 459, 537, 594, 613, 619, 668, 809, 833, 851, 893], "overrid": [1, 78, 80, 81, 82, 83, 84, 110, 111, 113, 212, 235, 608, 619], "str": [1, 5, 7, 9, 11, 12, 15, 16, 23, 24, 25, 26, 27, 28, 29, 32, 40, 43, 44, 45, 46, 47, 55, 56, 57, 58, 59, 61, 64, 65, 78, 80, 81, 82, 84, 85, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 110, 111, 112, 113, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 138, 140, 141, 142, 143, 145, 147, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 167, 169, 170, 172, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 191, 192, 193, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 242, 243, 247, 261, 262, 267, 268, 269, 277, 280, 282, 306, 310, 327, 330, 333, 335, 336, 340, 346, 348, 349, 350, 352, 354, 359, 365, 368, 383, 389, 391, 399, 402, 408, 410, 412, 413, 414, 415, 416, 418, 419, 420, 426, 427, 434, 435, 467, 468, 469, 472, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 537, 541, 552, 553, 554, 555, 556, 557, 559, 560, 563, 565, 566, 567, 568, 570, 572, 573, 581, 582, 585, 587, 588, 589, 591, 593, 594, 595, 596, 597, 598, 603, 604, 609, 610, 611, 613, 614, 615, 619, 624, 645, 652, 665, 672, 689, 696, 717, 720, 723, 725, 726, 730, 739, 740, 742, 775, 778, 783, 784, 795, 812, 813, 859, 861, 873, 893, 896], "dt": [1, 55, 143, 235, 463, 543, 568, 619, 855, 898], "attempt": [1, 199, 235, 875, 893], "do": [1, 55, 62, 101, 131, 157, 195, 203, 206, 235, 264, 304, 450, 456, 462, 484, 537, 552, 573, 577, 585, 594, 595, 596, 619, 627, 647, 688, 842, 848, 854, 875, 883, 893], "so": [1, 46, 100, 101, 102, 140, 142, 143, 172, 235, 267, 450, 456, 462, 488, 567, 568, 619, 650, 842, 848, 854], "rais": [1, 11, 15, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 108, 109, 180, 235, 281, 286, 389, 401, 439, 441, 463, 511, 537, 664, 668, 831, 833, 855, 875, 883, 893], "an": [1, 56, 58, 59, 62, 65, 66, 69, 70, 73, 78, 90, 91, 92, 93, 98, 100, 101, 102, 104, 111, 112, 113, 120, 121, 122, 129, 132, 134, 136, 142, 143, 154, 155, 157, 167, 169, 172, 178, 180, 195, 199, 206, 212, 217, 235, 243, 244, 247, 264, 267, 281, 282, 286, 290, 293, 294, 295, 299, 300, 301, 302, 303, 304, 311, 339, 349, 352, 373, 382, 383, 390, 403, 411, 412, 413, 414, 415, 416, 418, 419, 420, 439, 441, 446, 463, 472, 487, 491, 502, 507, 511, 520, 522, 537, 546, 550, 551, 552, 555, 560, 563, 567, 568, 573, 577, 585, 594, 598, 608, 609, 613, 619, 647, 650, 664, 668, 672, 677, 678, 679, 680, 681, 684, 685, 686, 687, 688, 697, 729, 734, 740, 798, 799, 800, 801, 802, 803, 805, 806, 807, 812, 813, 831, 833, 838, 855, 875, 883, 893], "attributeerror": 1, "howev": [1, 81, 129, 235, 734, 893], "can": [1, 55, 65, 70, 81, 90, 91, 93, 94, 101, 103, 104, 111, 112, 113, 120, 128, 136, 141, 142, 167, 172, 190, 203, 206, 212, 215, 217, 235, 247, 264, 282, 300, 303, 304, 327, 335, 346, 349, 360, 394, 407, 412, 413, 414, 415, 416, 418, 419, 420, 424, 427, 429, 432, 447, 450, 456, 462, 481, 484, 487, 491, 498, 503, 507, 513, 526, 536, 537, 552, 567, 598, 608, 610, 613, 619, 628, 647, 665, 688, 717, 725, 740, 779, 794, 812, 813, 814, 818, 821, 824, 839, 842, 848, 854, 893], "other": [1, 15, 65, 90, 91, 93, 101, 108, 109, 127, 131, 137, 156, 157, 163, 164, 180, 233, 235, 246, 261, 293, 294, 295, 306, 365, 435, 476, 537, 546, 557, 572, 573, 581, 582, 609, 619, 627, 644, 678, 679, 680, 691, 759, 811, 877, 884, 892, 893], "onli": [1, 15, 23, 46, 55, 61, 63, 90, 91, 92, 93, 94, 98, 101, 102, 104, 105, 106, 112, 113, 117, 120, 127, 141, 154, 157, 161, 181, 190, 192, 197, 235, 242, 292, 293, 294, 295, 327, 355, 407, 479, 521, 525, 537, 552, 557, 569, 573, 576, 598, 619, 675, 678, 679, 680, 717, 745, 794, 871, 893], "gener": [1, 100, 110, 111, 112, 113, 182, 203, 211, 235, 282, 422, 428, 537, 607, 619, 665, 809, 820, 893], "userwarn": 1, "pl": [1, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 80, 81, 82, 83, 84, 85, 87, 88, 90, 91, 92, 93, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 389, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 537, 547, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 794, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 821, 822, 823, 825, 826, 827, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 893], "register_expr_namespac": [1, 56, 58, 59], "greet": 1, "def": [1, 56, 57, 58, 59, 111, 112, 113, 171, 203, 235, 584, 619], "__init__": [1, 2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 110], "self": [1, 56, 57, 58, 59, 62, 399, 537, 552, 560, 585, 594, 619, 627, 812, 813, 884, 893], "_expr": [1, 57], "hello": [1, 450, 456, 462, 484, 652, 842, 848, 854], "return": [1, 23, 25, 27, 28, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 71, 74, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 116, 120, 121, 125, 127, 128, 129, 130, 132, 133, 136, 145, 147, 153, 154, 155, 156, 158, 159, 166, 167, 169, 170, 171, 172, 180, 181, 182, 193, 194, 200, 203, 204, 211, 212, 214, 215, 217, 220, 224, 229, 235, 244, 245, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 262, 265, 267, 268, 269, 280, 281, 285, 287, 296, 297, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 337, 338, 341, 348, 358, 361, 363, 364, 365, 366, 367, 369, 370, 371, 377, 381, 390, 394, 408, 409, 422, 423, 429, 430, 431, 438, 440, 442, 444, 445, 446, 447, 448, 449, 451, 452, 455, 457, 458, 459, 460, 466, 471, 472, 473, 474, 475, 477, 479, 480, 481, 486, 487, 491, 499, 500, 501, 507, 509, 511, 512, 522, 527, 529, 537, 552, 555, 557, 558, 560, 569, 575, 576, 577, 584, 585, 594, 595, 596, 602, 603, 607, 608, 611, 614, 615, 619, 624, 625, 626, 628, 635, 636, 638, 639, 642, 643, 645, 648, 650, 651, 652, 663, 664, 667, 669, 689, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 731, 734, 739, 747, 749, 754, 756, 757, 759, 760, 761, 762, 763, 764, 767, 769, 772, 779, 796, 797, 809, 810, 811, 813, 821, 830, 831, 832, 834, 836, 837, 838, 839, 840, 841, 843, 844, 847, 849, 850, 851, 852, 855, 858, 865, 867, 878, 880, 884, 893], "lit": [1, 88, 116, 285, 373, 496, 498, 505, 526, 529, 537, 667, 742, 893], "alia": [1, 55, 57, 59, 142, 143, 159, 205, 212, 235, 247, 258, 264, 293, 294, 295, 299, 300, 301, 302, 303, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 321, 323, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 352, 354, 359, 364, 365, 373, 376, 377, 392, 399, 400, 407, 423, 439, 440, 443, 446, 448, 451, 457, 459, 460, 461, 476, 477, 483, 489, 490, 492, 493, 498, 501, 502, 506, 521, 525, 526, 537, 567, 568, 570, 576, 604, 608, 612, 619, 640, 647, 695, 696, 700, 717, 724, 729, 730, 772, 851, 852, 893], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 450, 456, 462, 652, 842, 848, 854], "select": [1, 55, 56, 57, 58, 60, 89, 90, 91, 92, 94, 98, 100, 101, 103, 120, 153, 157, 167, 171, 180, 189, 201, 205, 207, 235, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 282, 283, 284, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 353, 355, 356, 357, 359, 360, 362, 363, 365, 366, 368, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 444, 445, 446, 447, 449, 450, 452, 455, 456, 458, 459, 460, 462, 464, 465, 467, 468, 469, 470, 473, 474, 475, 477, 478, 479, 480, 481, 482, 484, 486, 487, 489, 491, 492, 494, 495, 498, 501, 503, 504, 506, 507, 509, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 527, 528, 537, 553, 570, 573, 584, 597, 604, 609, 611, 619, 647, 665, 812, 813, 825, 837, 839, 866, 893], "shape": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 76, 78, 80, 81, 82, 83, 84, 85, 88, 101, 103, 112, 113, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 152, 153, 156, 157, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 182, 184, 186, 187, 189, 190, 191, 192, 193, 194, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495, 498, 501, 502, 503, 504, 506, 507, 509, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 537, 550, 552, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 613, 614, 615, 619, 627, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 672, 674, 675, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 754, 756, 759, 760, 761, 762, 763, 764, 767, 769, 772, 779, 787, 788, 789, 792, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 816, 820, 821, 822, 823, 825, 826, 827, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 863, 865, 866, 867, 868, 869, 872, 873, 877, 879, 880, 881, 884, 893], "3": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 80, 81, 82, 83, 84, 85, 93, 100, 101, 103, 107, 108, 109, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 242, 243, 244, 247, 256, 257, 258, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 284, 290, 291, 292, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 322, 324, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 372, 373, 374, 376, 378, 379, 380, 381, 383, 394, 398, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 434, 435, 436, 439, 442, 443, 445, 448, 451, 452, 457, 458, 459, 460, 461, 467, 468, 469, 471, 472, 473, 477, 479, 480, 481, 483, 484, 489, 490, 491, 492, 493, 494, 495, 498, 502, 503, 504, 506, 509, 511, 513, 514, 515, 516, 518, 522, 523, 524, 525, 526, 527, 528, 529, 537, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 619, 624, 627, 628, 629, 631, 632, 633, 635, 636, 637, 638, 639, 646, 647, 648, 651, 654, 659, 660, 663, 665, 672, 674, 675, 676, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 708, 710, 711, 712, 714, 716, 718, 720, 721, 724, 725, 728, 729, 730, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 822, 823, 824, 825, 826, 828, 834, 835, 837, 840, 843, 844, 849, 853, 863, 864, 865, 866, 867, 868, 869, 871, 872, 874, 875, 876, 879, 880, 881, 882, 884, 893], "1": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 80, 81, 82, 83, 84, 85, 88, 90, 91, 92, 100, 101, 102, 103, 107, 108, 109, 110, 112, 113, 120, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 504, 506, 507, 509, 511, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 525, 526, 527, 528, 529, 537, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 650, 651, 654, 659, 660, 663, 665, 672, 674, 675, 676, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 735, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 769, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 796, 797, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 837, 839, 851, 852, 855, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 893], "2": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 78, 80, 81, 82, 83, 84, 85, 100, 101, 103, 107, 108, 109, 112, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 243, 245, 246, 247, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 306, 310, 311, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 329, 330, 331, 332, 333, 335, 336, 339, 340, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 432, 433, 434, 435, 436, 438, 440, 443, 446, 447, 448, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 462, 464, 465, 467, 468, 469, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 489, 490, 491, 492, 493, 494, 495, 498, 501, 502, 503, 504, 506, 507, 509, 511, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 537, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 615, 619, 624, 627, 628, 630, 634, 635, 636, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 674, 675, 676, 681, 682, 685, 686, 687, 688, 689, 691, 697, 701, 705, 706, 712, 714, 719, 720, 721, 725, 728, 731, 733, 734, 735, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 753, 754, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 797, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 822, 824, 825, 826, 827, 828, 830, 832, 838, 839, 842, 843, 844, 845, 846, 848, 851, 852, 854, 863, 864, 865, 866, 867, 868, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 884, 893], "column_0": [1, 78, 120, 203, 235], "register_dataframe_namespac": [1, 57, 58, 59], "split": [1, 56, 155, 169, 215, 235, 459, 460, 851, 852], "splitfram": [1, 56], "df": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 27, 28, 29, 56, 57, 60, 78, 79, 80, 81, 82, 83, 84, 85, 91, 101, 111, 112, 113, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 282, 283, 284, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 495, 498, 501, 502, 503, 504, 506, 507, 509, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 537, 550, 551, 552, 553, 555, 556, 557, 559, 560, 561, 562, 564, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 597, 598, 599, 600, 601, 603, 604, 605, 610, 611, 613, 614, 615, 619, 647, 665, 674, 837, 839, 846, 851, 852, 873, 893], "_df": [1, 56], "by_alternate_row": 1, "list": [1, 32, 55, 56, 58, 62, 64, 78, 80, 81, 82, 84, 85, 87, 89, 90, 91, 92, 94, 98, 100, 101, 102, 111, 112, 113, 123, 128, 129, 130, 134, 139, 142, 147, 154, 166, 169, 180, 181, 190, 196, 197, 203, 204, 205, 206, 212, 216, 235, 242, 261, 263, 264, 265, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 346, 348, 354, 382, 390, 391, 399, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 426, 434, 435, 446, 458, 467, 468, 472, 491, 492, 498, 502, 513, 516, 525, 526, 537, 553, 556, 557, 558, 559, 563, 567, 581, 603, 604, 608, 609, 619, 641, 644, 646, 647, 648, 650, 651, 652, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 676, 734, 739, 743, 746, 759, 796, 798, 799, 800, 801, 802, 803, 805, 806, 807, 810, 838, 850, 861, 866, 874, 893], "with_row_count": [1, 235, 619, 813, 893], "name": [1, 13, 17, 19, 27, 45, 56, 57, 58, 59, 64, 65, 68, 78, 80, 81, 82, 83, 84, 89, 90, 91, 92, 93, 94, 95, 98, 99, 101, 104, 105, 106, 109, 110, 111, 112, 113, 120, 123, 126, 127, 135, 138, 140, 154, 156, 157, 163, 172, 176, 180, 181, 183, 184, 196, 202, 203, 205, 211, 212, 213, 214, 235, 243, 247, 282, 330, 335, 346, 373, 383, 389, 391, 402, 467, 468, 469, 484, 485, 491, 495, 498, 503, 509, 510, 513, 516, 518, 519, 521, 522, 523, 526, 527, 537, 553, 556, 572, 573, 581, 588, 590, 591, 598, 604, 608, 610, 611, 612, 619, 624, 665, 677, 720, 725, 795, 859, 861, 873, 876, 893], "n": [1, 10, 12, 20, 28, 32, 33, 56, 57, 58, 59, 65, 87, 88, 90, 91, 101, 116, 120, 131, 142, 145, 154, 155, 159, 169, 181, 182, 193, 194, 197, 200, 220, 229, 235, 263, 268, 280, 304, 305, 309, 311, 314, 334, 339, 349, 358, 377, 400, 408, 422, 432, 459, 460, 471, 473, 477, 507, 509, 521, 527, 537, 552, 567, 569, 576, 601, 602, 614, 615, 619, 627, 646, 651, 663, 688, 690, 695, 697, 700, 724, 729, 740, 749, 772, 787, 809, 824, 828, 851, 852, 865, 867, 878, 882, 893], "filter": [1, 56, 92, 101, 102, 103, 127, 151, 217, 235, 443, 461, 483, 487, 537, 557, 560, 570, 613, 619, 812, 893], "col": [1, 25, 55, 56, 57, 58, 60, 82, 84, 101, 111, 112, 120, 134, 141, 142, 143, 151, 153, 167, 171, 180, 184, 190, 205, 212, 215, 235, 241, 242, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 278, 279, 282, 283, 290, 291, 292, 293, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 349, 352, 353, 354, 355, 359, 360, 361, 362, 364, 365, 367, 368, 369, 372, 373, 374, 375, 379, 380, 381, 384, 385, 386, 393, 395, 396, 397, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 487, 492, 493, 498, 501, 504, 506, 507, 508, 513, 516, 519, 525, 526, 529, 537, 563, 566, 567, 568, 570, 584, 591, 598, 604, 608, 609, 612, 619, 647, 665, 674, 717, 796, 812, 813, 837, 839, 855, 893], "0": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 29, 55, 56, 57, 59, 60, 64, 85, 90, 91, 93, 94, 98, 100, 101, 103, 104, 105, 106, 107, 110, 111, 112, 113, 116, 120, 121, 122, 124, 125, 128, 132, 133, 136, 137, 139, 140, 142, 144, 148, 153, 154, 155, 156, 158, 160, 161, 162, 165, 166, 167, 168, 170, 173, 174, 178, 182, 183, 184, 187, 189, 190, 191, 192, 198, 201, 203, 206, 207, 208, 211, 212, 213, 217, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 241, 242, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 264, 267, 273, 282, 290, 292, 294, 295, 296, 297, 299, 304, 307, 308, 315, 318, 319, 321, 322, 326, 331, 332, 343, 344, 345, 347, 348, 350, 351, 355, 357, 360, 363, 366, 367, 369, 370, 371, 373, 374, 379, 380, 382, 384, 385, 386, 393, 396, 397, 398, 400, 401, 404, 405, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 427, 429, 430, 431, 432, 436, 437, 445, 466, 470, 474, 475, 476, 482, 487, 489, 490, 492, 495, 496, 498, 502, 505, 514, 515, 518, 519, 523, 526, 528, 529, 537, 550, 551, 556, 558, 561, 562, 567, 572, 575, 580, 585, 586, 590, 591, 593, 594, 596, 598, 599, 605, 607, 608, 609, 610, 613, 619, 629, 630, 631, 632, 633, 634, 635, 637, 639, 647, 650, 672, 675, 677, 682, 683, 688, 689, 691, 701, 704, 705, 706, 707, 708, 709, 710, 711, 712, 715, 716, 721, 722, 733, 735, 736, 737, 739, 741, 745, 748, 756, 758, 760, 761, 762, 763, 764, 769, 770, 776, 777, 787, 791, 792, 798, 800, 801, 803, 804, 805, 807, 809, 821, 822, 823, 827, 828, 830, 837, 839, 858, 868, 869, 872, 876, 877, 882, 883, 893], "drop": [1, 81, 120, 126, 127, 204, 212, 235, 263, 305, 307, 308, 537, 557, 603, 608, 619, 646, 690, 692, 893], "aaa": 1, "bbb": 1, "ccc": 1, "ddd": 1, "eee": 1, "fff": 1, "column": [1, 12, 13, 16, 17, 19, 27, 46, 55, 56, 63, 64, 65, 68, 72, 78, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 108, 112, 119, 120, 125, 126, 127, 128, 130, 135, 138, 140, 141, 142, 143, 147, 148, 154, 156, 157, 160, 161, 162, 163, 165, 166, 167, 168, 171, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 190, 191, 192, 196, 198, 201, 203, 204, 205, 206, 207, 208, 211, 212, 213, 215, 235, 244, 245, 247, 256, 258, 261, 265, 281, 282, 311, 312, 315, 317, 318, 320, 322, 324, 325, 328, 329, 331, 337, 338, 341, 346, 348, 352, 354, 373, 388, 389, 391, 399, 402, 406, 408, 412, 413, 414, 415, 416, 418, 419, 420, 427, 434, 435, 444, 452, 459, 460, 463, 469, 483, 484, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 504, 505, 507, 508, 509, 512, 513, 514, 515, 516, 517, 518, 519, 520, 523, 524, 525, 526, 527, 528, 529, 537, 556, 557, 558, 559, 566, 567, 568, 572, 573, 577, 578, 579, 580, 581, 583, 584, 586, 588, 590, 591, 598, 599, 600, 603, 604, 605, 607, 608, 609, 610, 611, 619, 625, 626, 644, 648, 664, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 731, 739, 818, 836, 844, 851, 852, 863, 873, 893], "txt": 1, "utf8": [1, 8, 15, 46, 81, 90, 91, 101, 110, 128, 129, 136, 183, 199, 235, 269, 348, 438, 442, 445, 446, 447, 448, 457, 458, 459, 460, 463, 491, 493, 537, 558, 590, 619, 652, 723, 739, 768, 830, 834, 837, 838, 839, 840, 849, 850, 851, 852, 855, 875, 893], "register_lazyframe_namespac": [1, 56, 57, 59], "dtypeoper": [1, 58], "ldf": [1, 58, 549, 551, 556, 557, 559, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 586, 588, 589, 591, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 608, 609, 610, 612, 613, 614, 615, 619], "_ldf": [1, 58], "upcast_integer_typ": [1, 58], "with_column": [1, 58, 143, 171, 235, 247, 264, 290, 291, 293, 294, 295, 300, 303, 357, 360, 361, 364, 367, 369, 370, 371, 373, 399, 400, 443, 448, 451, 453, 454, 457, 459, 460, 461, 463, 466, 468, 476, 487, 490, 492, 493, 498, 502, 525, 526, 529, 537, 568, 584, 619, 647, 674, 855], "tp": [1, 58], "cast": [1, 57, 58, 78, 115, 136, 142, 143, 171, 200, 235, 246, 291, 302, 303, 309, 310, 407, 447, 466, 470, 476, 493, 537, 567, 568, 584, 619, 674, 686, 687, 695, 696, 794, 839, 864, 873, 877, 893], "int64": [1, 27, 57, 58, 88, 116, 128, 136, 142, 143, 171, 183, 195, 235, 302, 303, 313, 316, 319, 321, 323, 326, 332, 346, 407, 470, 476, 487, 491, 503, 537, 558, 567, 568, 584, 590, 611, 619, 686, 687, 699, 702, 708, 710, 713, 716, 722, 794, 811, 864, 875, 876, 877, 893], "int8": [1, 58, 136, 235, 302, 303, 470, 537, 686, 687, 797, 864, 893], "int16": [1, 58, 302, 303, 470, 537, 686, 687, 864, 893], "int32": [1, 58, 81, 112, 113, 142, 143, 155, 235, 290, 317, 341, 476, 537, 567, 568, 619, 703, 731, 877, 893], "b": [1, 24, 25, 26, 29, 46, 58, 63, 78, 80, 81, 82, 83, 84, 85, 93, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 147, 148, 150, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 243, 246, 247, 257, 261, 264, 269, 271, 284, 290, 291, 298, 306, 307, 308, 346, 350, 351, 352, 354, 356, 357, 360, 363, 366, 367, 368, 369, 370, 371, 373, 376, 378, 383, 394, 398, 402, 410, 427, 433, 444, 453, 467, 468, 469, 479, 481, 483, 484, 489, 490, 491, 493, 494, 495, 498, 502, 503, 504, 506, 509, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 527, 528, 537, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 572, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 610, 614, 615, 619, 627, 647, 674, 689, 691, 733, 734, 742, 759, 768, 795, 811, 836, 845, 863, 880, 893], "4": [1, 12, 20, 24, 25, 26, 29, 46, 55, 56, 57, 58, 59, 60, 63, 65, 78, 80, 81, 82, 83, 84, 85, 101, 107, 108, 109, 113, 120, 121, 122, 124, 127, 130, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 163, 166, 167, 169, 171, 172, 173, 177, 181, 184, 185, 193, 194, 195, 196, 197, 198, 202, 203, 205, 206, 207, 209, 210, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 246, 247, 257, 263, 264, 265, 268, 276, 277, 280, 284, 290, 292, 293, 294, 295, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 311, 312, 316, 322, 323, 324, 328, 329, 330, 331, 332, 335, 337, 338, 341, 347, 350, 351, 354, 355, 356, 358, 359, 360, 361, 370, 371, 373, 376, 378, 380, 383, 399, 401, 402, 404, 405, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 423, 425, 426, 429, 433, 434, 435, 436, 439, 448, 449, 451, 455, 457, 459, 460, 463, 469, 471, 472, 473, 476, 477, 489, 490, 491, 493, 494, 495, 498, 502, 504, 509, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 527, 528, 529, 537, 550, 551, 552, 555, 557, 559, 560, 561, 562, 564, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 604, 605, 606, 608, 610, 613, 614, 615, 619, 627, 630, 637, 646, 647, 648, 651, 659, 660, 663, 675, 676, 678, 688, 689, 691, 701, 702, 707, 709, 712, 713, 714, 715, 719, 720, 721, 722, 723, 725, 727, 728, 741, 742, 751, 754, 759, 761, 762, 763, 764, 767, 780, 787, 788, 789, 792, 801, 803, 804, 805, 806, 807, 809, 811, 821, 825, 826, 831, 840, 841, 843, 847, 849, 851, 852, 855, 863, 866, 867, 877, 884, 893], "c": [1, 24, 25, 26, 29, 46, 56, 58, 81, 83, 93, 101, 111, 121, 122, 123, 124, 125, 126, 127, 128, 130, 134, 135, 136, 137, 139, 140, 141, 142, 145, 147, 148, 155, 156, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 172, 173, 174, 176, 178, 179, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 195, 199, 200, 201, 203, 206, 208, 209, 212, 218, 219, 220, 221, 222, 223, 225, 228, 229, 235, 247, 261, 269, 271, 373, 427, 459, 463, 479, 481, 484, 489, 490, 491, 493, 494, 495, 498, 504, 506, 509, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 527, 528, 537, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 563, 566, 567, 572, 575, 581, 585, 588, 589, 590, 591, 594, 597, 598, 608, 609, 614, 615, 619, 689, 768, 851, 855, 880, 893], "5": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 24, 25, 26, 29, 55, 56, 58, 59, 60, 63, 64, 78, 81, 82, 83, 84, 87, 88, 91, 107, 112, 113, 116, 120, 121, 122, 124, 130, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 151, 153, 154, 157, 158, 159, 161, 163, 166, 167, 172, 173, 174, 177, 181, 185, 193, 194, 195, 196, 197, 202, 206, 207, 210, 212, 213, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 242, 264, 265, 268, 273, 279, 280, 290, 291, 292, 293, 294, 295, 304, 306, 310, 311, 313, 331, 332, 333, 336, 337, 340, 345, 346, 349, 355, 358, 361, 364, 367, 369, 370, 371, 373, 378, 399, 400, 402, 404, 405, 409, 410, 411, 412, 413, 415, 419, 421, 423, 429, 440, 447, 448, 451, 452, 466, 469, 471, 473, 477, 489, 492, 494, 495, 498, 501, 502, 503, 504, 509, 513, 514, 515, 516, 517, 518, 523, 524, 526, 527, 528, 537, 550, 551, 552, 555, 559, 560, 561, 562, 564, 566, 567, 568, 569, 571, 573, 574, 575, 576, 579, 580, 581, 585, 592, 593, 594, 597, 599, 600, 601, 602, 606, 608, 610, 613, 614, 615, 619, 627, 630, 634, 637, 647, 648, 651, 654, 663, 674, 676, 678, 684, 688, 689, 691, 696, 697, 698, 699, 721, 722, 727, 728, 730, 737, 740, 751, 780, 787, 788, 789, 791, 792, 798, 799, 800, 802, 803, 806, 809, 811, 821, 827, 832, 839, 840, 844, 878, 884, 893], "6": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 78, 81, 82, 83, 84, 85, 120, 123, 125, 126, 127, 128, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 151, 153, 154, 156, 159, 160, 161, 162, 163, 165, 168, 172, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 205, 206, 207, 208, 209, 212, 213, 215, 220, 228, 229, 235, 247, 265, 284, 290, 302, 303, 306, 311, 327, 329, 331, 342, 350, 351, 356, 358, 360, 378, 399, 403, 405, 406, 409, 412, 413, 414, 415, 416, 418, 419, 420, 423, 434, 435, 440, 444, 448, 451, 452, 471, 473, 484, 498, 502, 525, 526, 537, 552, 553, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 571, 572, 574, 576, 577, 581, 585, 588, 590, 591, 592, 593, 594, 597, 598, 601, 602, 604, 606, 608, 610, 611, 614, 615, 619, 627, 648, 676, 682, 686, 687, 689, 691, 717, 728, 780, 792, 801, 803, 804, 805, 807, 811, 832, 836, 840, 844, 864, 893], "7": [1, 24, 25, 26, 27, 28, 29, 56, 58, 63, 65, 123, 124, 125, 126, 128, 130, 134, 135, 137, 142, 143, 145, 147, 149, 156, 160, 161, 162, 165, 168, 170, 174, 176, 178, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 199, 200, 201, 206, 207, 208, 209, 235, 303, 310, 311, 312, 328, 330, 335, 338, 341, 347, 358, 360, 399, 409, 413, 419, 471, 473, 525, 526, 537, 553, 556, 558, 559, 563, 567, 568, 569, 571, 572, 576, 586, 588, 590, 591, 598, 601, 602, 611, 619, 634, 697, 698, 703, 720, 725, 728, 806, 893], "float32": [1, 25, 58, 136, 235, 755, 893], "lazi": [1, 58, 63, 65, 88, 101, 112, 116, 157, 171, 215, 235, 247, 282, 399, 487, 507, 537, 546, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 613, 619], "i16": [1, 58, 427, 537], "i32": [1, 58, 81, 112, 184, 235, 290, 317, 341, 427, 452, 529, 537, 591, 619, 703, 731, 844], "f32": [1, 58, 235, 264, 405, 427, 502, 537, 647, 792, 893], "i64": [1, 12, 16, 56, 57, 58, 59, 63, 78, 80, 81, 82, 83, 84, 88, 101, 113, 116, 120, 121, 122, 123, 125, 127, 128, 130, 131, 133, 134, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 153, 156, 157, 159, 160, 163, 165, 169, 171, 172, 173, 176, 177, 178, 179, 182, 184, 186, 187, 189, 190, 192, 193, 194, 196, 201, 203, 204, 205, 206, 207, 209, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 225, 228, 229, 235, 243, 246, 247, 263, 264, 265, 266, 267, 268, 270, 272, 274, 275, 276, 277, 278, 279, 280, 283, 284, 291, 293, 294, 295, 300, 301, 302, 303, 305, 306, 313, 314, 316, 319, 321, 323, 326, 332, 334, 346, 349, 351, 352, 353, 354, 356, 358, 359, 360, 361, 364, 367, 369, 370, 371, 373, 375, 378, 381, 382, 383, 394, 399, 400, 402, 403, 406, 407, 409, 410, 422, 424, 425, 427, 428, 429, 433, 434, 453, 454, 468, 469, 470, 471, 472, 473, 477, 478, 480, 483, 484, 491, 493, 498, 502, 503, 504, 509, 513, 516, 522, 525, 526, 527, 529, 537, 550, 552, 556, 557, 559, 560, 562, 563, 564, 566, 567, 568, 569, 571, 572, 573, 574, 576, 577, 578, 581, 583, 584, 585, 588, 589, 591, 592, 593, 597, 598, 600, 601, 602, 603, 604, 608, 610, 613, 614, 615, 619, 627, 628, 646, 647, 648, 651, 659, 660, 663, 674, 678, 681, 684, 685, 686, 687, 689, 696, 699, 700, 702, 708, 710, 713, 716, 722, 724, 740, 742, 743, 749, 751, 759, 772, 779, 795, 799, 802, 806, 809, 812, 813, 816, 820, 821, 825, 826, 863, 865, 866, 867, 873, 879, 881, 884, 893], "register_series_namespac": [1, 56, 57, 58], "math": [1, 59, 682, 822, 868, 893], "mathshortcut": [1, 59], "": [1, 25, 59, 64, 90, 91, 113, 125, 127, 129, 141, 142, 148, 156, 157, 177, 178, 194, 215, 235, 263, 268, 269, 276, 277, 280, 314, 333, 346, 374, 390, 394, 396, 397, 399, 400, 407, 411, 435, 448, 449, 451, 455, 457, 458, 460, 463, 466, 468, 498, 501, 503, 506, 507, 513, 516, 518, 526, 537, 557, 566, 567, 573, 591, 602, 612, 613, 619, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 648, 651, 652, 654, 659, 660, 663, 672, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 691, 696, 697, 700, 720, 725, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 770, 771, 772, 775, 776, 777, 778, 779, 780, 781, 783, 784, 787, 788, 789, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 821, 822, 823, 825, 826, 828, 831, 832, 834, 835, 836, 838, 840, 841, 842, 843, 844, 845, 847, 848, 849, 852, 853, 854, 855, 858, 861, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 893], "_": [1, 55, 59, 459, 851], "squar": [1, 59, 217, 374, 436, 537, 613, 770, 827, 893], "cube": [1, 59], "s2": [1, 109, 136, 235, 627, 676, 691, 759, 780, 811, 884, 893], "renam": [1, 81, 90, 91, 235, 243, 383, 392, 468, 537, 619, 861, 873, 893], "n2": 1, "in_plac": [1, 147, 188, 209, 235, 793, 795, 819, 826, 893], "true": [1, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 60, 62, 63, 65, 78, 79, 83, 87, 90, 91, 92, 93, 94, 98, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 117, 119, 121, 122, 124, 133, 136, 137, 139, 140, 142, 148, 150, 151, 152, 154, 157, 158, 161, 166, 167, 169, 172, 173, 180, 181, 190, 196, 203, 204, 205, 206, 207, 212, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 242, 244, 245, 246, 247, 262, 281, 286, 290, 299, 300, 301, 302, 303, 330, 331, 335, 342, 343, 344, 345, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 407, 417, 422, 427, 432, 434, 435, 439, 441, 443, 447, 458, 459, 461, 463, 467, 468, 472, 477, 478, 481, 486, 487, 494, 521, 523, 525, 529, 537, 550, 551, 552, 554, 555, 560, 562, 566, 567, 572, 573, 575, 577, 585, 594, 595, 596, 598, 603, 604, 608, 619, 625, 626, 627, 628, 638, 664, 668, 672, 676, 677, 720, 721, 725, 733, 735, 736, 737, 743, 747, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 770, 780, 788, 789, 794, 804, 811, 824, 826, 831, 833, 835, 839, 850, 851, 853, 855, 875, 878, 883, 884, 893], "s3": [1, 92, 102, 103, 893], "n3": 1, "8": [1, 24, 25, 26, 27, 28, 29, 39, 52, 54, 55, 56, 58, 59, 63, 107, 111, 112, 120, 123, 124, 125, 126, 127, 128, 130, 134, 135, 137, 140, 145, 147, 156, 160, 161, 162, 165, 170, 174, 176, 178, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 194, 199, 200, 201, 206, 208, 209, 212, 235, 246, 257, 263, 264, 298, 300, 303, 304, 307, 308, 311, 360, 376, 399, 401, 402, 409, 410, 413, 414, 416, 418, 420, 427, 433, 449, 455, 463, 469, 473, 489, 494, 495, 498, 502, 504, 509, 513, 514, 515, 516, 517, 518, 523, 524, 525, 526, 527, 528, 537, 553, 556, 557, 558, 559, 563, 569, 572, 576, 577, 585, 588, 590, 591, 598, 601, 602, 608, 611, 619, 646, 647, 688, 703, 787, 798, 801, 803, 804, 805, 807, 841, 847, 855, 893], "9": [1, 24, 25, 26, 29, 55, 63, 120, 136, 143, 145, 149, 170, 184, 193, 206, 209, 212, 215, 228, 235, 246, 257, 275, 278, 298, 300, 303, 307, 308, 311, 312, 328, 337, 338, 360, 365, 373, 376, 399, 409, 411, 413, 419, 429, 433, 473, 490, 492, 525, 537, 568, 569, 571, 576, 591, 598, 601, 608, 619, 698, 707, 709, 715, 720, 721, 725, 727, 759, 798, 806, 808, 821, 893], "27": [1, 59, 228, 303, 317, 329, 341, 401, 537], "16": [1, 36, 49, 57, 107, 142, 143, 212, 235, 300, 303, 348, 360, 413, 452, 501, 502, 537, 567, 568, 594, 608, 619, 720, 725, 739, 787, 822, 844, 868, 893], "64": [1, 29, 35, 38, 51, 57, 59, 235, 401, 537, 596, 619, 787, 893], "25": [1, 59, 65, 142, 143, 157, 207, 212, 235, 317, 330, 335, 341, 507, 567, 568, 573, 579, 605, 608, 619, 720, 725, 733, 787, 893], "125": [1, 59, 787, 893], "arg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 171, 200, 235, 506, 584, 619, 628, 875, 893], "ani": [2, 3, 4, 6, 25, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 50, 51, 52, 53, 54, 61, 78, 79, 80, 81, 82, 84, 90, 91, 92, 93, 94, 98, 101, 102, 104, 106, 110, 112, 113, 117, 120, 127, 131, 133, 134, 136, 153, 154, 155, 169, 170, 171, 180, 181, 184, 196, 197, 199, 200, 206, 212, 235, 247, 261, 264, 290, 331, 351, 365, 382, 392, 409, 411, 423, 426, 434, 463, 472, 486, 504, 511, 522, 523, 537, 557, 562, 584, 591, 608, 619, 627, 628, 644, 647, 691, 721, 742, 759, 769, 796, 798, 810, 813, 855, 866, 874, 875, 893], "kwarg": [2, 3, 4, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 170, 171, 184, 200, 212, 235, 522, 584, 591, 608, 619, 875, 893], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 537, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 893, 899], "method": [2, 3, 4, 6, 24, 26, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 79, 90, 91, 93, 110, 127, 149, 154, 167, 174, 181, 204, 211, 212, 227, 235, 244, 336, 360, 404, 405, 412, 413, 414, 415, 416, 418, 419, 420, 479, 519, 530, 531, 533, 537, 538, 541, 542, 543, 546, 557, 571, 586, 603, 607, 608, 619, 628, 726, 751, 791, 792, 803, 877, 885, 887, 889, 893, 896, 897, 898], "A": [4, 25, 43, 62, 65, 85, 90, 91, 98, 100, 101, 102, 136, 142, 157, 169, 172, 181, 196, 198, 206, 207, 235, 241, 282, 311, 313, 316, 319, 321, 323, 326, 332, 349, 363, 366, 367, 369, 382, 383, 390, 402, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 439, 440, 445, 446, 447, 466, 469, 491, 492, 502, 506, 537, 567, 573, 588, 598, 619, 665, 697, 699, 702, 708, 710, 713, 716, 722, 740, 798, 799, 800, 802, 805, 806, 807, 831, 832, 837, 838, 839, 845, 846, 855, 858, 893], "encod": [4, 54, 90, 91, 101, 198, 235, 286, 441, 668, 833], "set": [4, 5, 6, 7, 8, 10, 11, 12, 15, 20, 21, 23, 25, 27, 28, 56, 65, 79, 81, 84, 90, 91, 93, 94, 98, 101, 104, 105, 106, 108, 109, 111, 112, 113, 117, 119, 123, 144, 154, 157, 163, 182, 189, 203, 235, 247, 277, 281, 282, 339, 340, 346, 357, 365, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 428, 432, 433, 450, 456, 457, 462, 491, 503, 537, 553, 572, 573, 577, 581, 595, 596, 597, 611, 613, 619, 627, 628, 660, 664, 665, 729, 730, 748, 759, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 813, 820, 824, 825, 842, 848, 849, 854, 875, 893], "string": [4, 5, 7, 10, 11, 15, 25, 27, 28, 32, 46, 54, 65, 90, 91, 101, 110, 111, 113, 115, 136, 142, 143, 157, 190, 206, 207, 235, 269, 288, 291, 327, 330, 335, 348, 354, 412, 413, 414, 415, 416, 418, 419, 420, 438, 439, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 491, 493, 506, 513, 516, 537, 554, 555, 565, 567, 568, 573, 611, 619, 652, 670, 674, 717, 720, 725, 739, 829, 830, 831, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 893], "classmethod": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 565, 587, 619], "cfg": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 117], "previous": 5, "save": [5, 546], "share": [5, 46, 129, 235, 734, 893], "option": [5, 6, 7, 15, 55, 65, 90, 92, 93, 94, 98, 102, 104, 106, 107, 110, 111, 112, 113, 127, 157, 163, 167, 184, 196, 198, 203, 207, 212, 235, 374, 411, 412, 413, 414, 415, 416, 418, 419, 420, 432, 457, 484, 486, 487, 511, 512, 525, 537, 546, 572, 573, 581, 591, 608, 619, 770, 798, 799, 800, 801, 802, 803, 805, 806, 807, 813, 824, 849, 873, 893], "paramet": [5, 9, 10, 11, 12, 15, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 33, 40, 43, 45, 47, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 116, 119, 120, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 147, 148, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 169, 170, 171, 172, 174, 176, 177, 178, 180, 181, 182, 184, 186, 187, 189, 190, 191, 192, 193, 196, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 215, 217, 220, 227, 229, 235, 243, 246, 247, 256, 258, 261, 262, 263, 264, 267, 268, 269, 276, 277, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 314, 327, 330, 334, 335, 336, 339, 340, 342, 343, 344, 345, 346, 349, 351, 352, 356, 357, 358, 360, 361, 365, 374, 377, 379, 382, 383, 399, 400, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 471, 472, 477, 478, 481, 482, 483, 484, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 503, 505, 506, 507, 509, 511, 512, 513, 518, 519, 520, 521, 522, 523, 525, 526, 527, 537, 552, 555, 556, 557, 560, 561, 562, 563, 565, 566, 567, 568, 569, 572, 573, 576, 577, 581, 582, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 601, 603, 604, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619, 624, 627, 628, 637, 640, 644, 645, 646, 647, 650, 651, 652, 659, 660, 663, 664, 665, 667, 668, 669, 670, 671, 672, 674, 678, 679, 680, 684, 685, 686, 687, 688, 690, 691, 695, 696, 697, 700, 717, 720, 724, 725, 726, 729, 730, 733, 734, 735, 736, 737, 740, 741, 742, 743, 748, 749, 751, 766, 770, 772, 787, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 820, 824, 825, 826, 828, 830, 831, 832, 833, 834, 835, 837, 838, 839, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 858, 859, 861, 865, 866, 873, 874, 875, 878, 879, 881, 882, 883, 884, 893], "json": [5, 7, 27, 28, 96, 97, 105, 235, 447, 546, 565, 587, 611, 619, 839], "produc": [5, 112, 113, 389, 512], "reset": [6, 117], "default": [6, 23, 24, 25, 26, 27, 28, 29, 78, 80, 81, 82, 83, 84, 88, 90, 91, 98, 101, 110, 111, 112, 113, 116, 129, 141, 143, 144, 154, 157, 163, 172, 180, 181, 182, 204, 213, 235, 277, 281, 282, 291, 342, 357, 379, 396, 397, 400, 405, 422, 428, 445, 450, 452, 456, 457, 462, 463, 487, 488, 507, 511, 523, 537, 555, 566, 568, 573, 581, 596, 603, 611, 619, 660, 664, 665, 674, 733, 734, 748, 783, 784, 787, 792, 809, 820, 828, 837, 842, 844, 848, 849, 854, 882, 893], "state": [6, 62, 73, 496, 546, 552, 560, 585, 594, 619], "note": [6, 15, 55, 65, 78, 79, 80, 82, 84, 88, 90, 92, 98, 100, 102, 111, 112, 113, 116, 117, 119, 120, 132, 141, 142, 143, 154, 156, 157, 167, 170, 171, 180, 181, 184, 197, 199, 203, 207, 211, 212, 235, 264, 281, 302, 303, 307, 308, 327, 330, 335, 367, 369, 412, 413, 414, 415, 416, 418, 419, 420, 432, 448, 450, 451, 456, 462, 463, 470, 496, 505, 520, 537, 552, 560, 561, 567, 568, 569, 573, 576, 588, 591, 594, 607, 608, 619, 647, 664, 686, 687, 717, 725, 812, 813, 819, 824, 840, 842, 843, 848, 854, 855, 864, 875, 893], "oper": [6, 46, 63, 69, 70, 78, 80, 81, 82, 83, 84, 90, 98, 120, 131, 136, 141, 148, 158, 164, 167, 169, 171, 175, 195, 199, 200, 203, 206, 214, 215, 235, 242, 282, 299, 300, 301, 302, 303, 304, 373, 392, 405, 407, 484, 485, 502, 537, 560, 566, 569, 572, 576, 582, 619, 627, 684, 685, 686, 687, 688, 792, 794, 871, 874, 875, 883, 893], "remov": [6, 125, 211, 235, 346, 348, 450, 456, 462, 503, 537, 556, 607, 619, 739, 842, 848, 854, 893], "from": [6, 25, 55, 65, 78, 79, 80, 81, 82, 83, 84, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 113, 124, 125, 129, 131, 140, 142, 143, 154, 155, 157, 158, 163, 176, 180, 182, 184, 203, 204, 206, 207, 235, 299, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 346, 360, 374, 396, 397, 400, 422, 434, 435, 445, 452, 463, 479, 481, 490, 491, 499, 500, 501, 503, 511, 523, 536, 537, 556, 560, 565, 567, 568, 573, 581, 587, 588, 591, 603, 609, 619, 627, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 734, 753, 770, 783, 784, 785, 787, 809, 837, 844, 881, 884, 893], "environ": [6, 23], "local": [6, 92, 102, 336, 726, 788, 789, 893], "flag": [6, 110, 424, 537, 555, 577, 619, 814, 893], "back": [6, 55, 131, 235, 627, 893], "valu": [6, 9, 10, 23, 25, 27, 40, 41, 53, 55, 63, 64, 81, 83, 90, 91, 100, 101, 103, 108, 109, 110, 111, 112, 113, 115, 117, 119, 120, 127, 131, 132, 133, 137, 140, 142, 143, 144, 145, 149, 154, 160, 161, 162, 163, 165, 167, 169, 172, 173, 174, 176, 180, 181, 182, 186, 187, 190, 191, 192, 193, 196, 197, 206, 207, 208, 218, 219, 221, 222, 223, 225, 226, 235, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 263, 266, 267, 268, 270, 272, 273, 274, 276, 279, 280, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 300, 303, 304, 305, 307, 308, 311, 312, 324, 328, 337, 343, 344, 345, 347, 349, 350, 351, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 366, 367, 369, 370, 371, 372, 375, 376, 380, 381, 382, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 404, 405, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 423, 424, 425, 426, 429, 430, 431, 432, 434, 435, 436, 438, 439, 440, 441, 442, 443, 445, 446, 447, 453, 454, 457, 459, 460, 461, 466, 470, 472, 473, 474, 475, 477, 478, 479, 480, 481, 490, 493, 494, 496, 497, 498, 504, 505, 511, 513, 514, 515, 516, 517, 520, 521, 526, 529, 537, 557, 561, 562, 567, 568, 570, 571, 578, 579, 580, 581, 583, 586, 588, 592, 593, 598, 599, 600, 605, 611, 612, 619, 623, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 640, 642, 643, 646, 649, 650, 651, 653, 655, 656, 657, 659, 663, 666, 668, 669, 670, 671, 674, 675, 678, 679, 680, 682, 683, 688, 689, 690, 692, 693, 697, 698, 714, 718, 727, 734, 735, 736, 737, 740, 741, 742, 745, 747, 748, 751, 754, 756, 757, 759, 760, 761, 762, 763, 764, 767, 775, 776, 778, 779, 781, 783, 784, 785, 786, 787, 790, 791, 792, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 810, 811, 812, 813, 816, 817, 821, 822, 823, 824, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 843, 845, 846, 849, 851, 852, 853, 858, 864, 866, 867, 868, 869, 877, 880, 881, 883, 884, 893], "exampl": [6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 46, 55, 56, 57, 58, 59, 60, 63, 64, 65, 78, 80, 81, 82, 83, 84, 85, 87, 88, 91, 92, 93, 100, 101, 102, 103, 107, 108, 109, 110, 111, 112, 113, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 492, 493, 494, 495, 498, 501, 502, 503, 504, 506, 507, 509, 511, 513, 514, 515, 516, 517, 518, 522, 523, 524, 525, 526, 527, 528, 529, 537, 546, 550, 551, 552, 553, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 608, 609, 610, 611, 612, 613, 614, 615, 619, 624, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 646, 647, 648, 651, 652, 654, 659, 660, 663, 665, 672, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 736, 737, 740, 741, 742, 743, 745, 748, 749, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 767, 768, 769, 771, 772, 775, 776, 777, 778, 779, 780, 781, 787, 788, 789, 791, 792, 795, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 814, 816, 820, 821, 822, 823, 825, 826, 828, 830, 831, 832, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 884, 893], "current": [7, 23, 79, 119, 121, 122, 235, 282, 330, 400, 537, 546, 550, 551, 619, 677, 681, 720, 787, 893], "activ": [8, 13, 14, 16, 17, 18, 19, 22, 264, 647], "bool": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 29, 40, 55, 60, 62, 63, 78, 79, 83, 90, 91, 94, 98, 101, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 115, 119, 121, 122, 133, 134, 136, 137, 139, 140, 141, 142, 147, 148, 150, 151, 152, 157, 169, 172, 182, 188, 190, 196, 200, 203, 204, 205, 207, 209, 212, 219, 221, 222, 225, 235, 244, 245, 246, 247, 256, 258, 262, 264, 278, 281, 286, 290, 299, 300, 301, 302, 303, 304, 331, 342, 343, 344, 345, 349, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 382, 387, 388, 405, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 426, 427, 432, 434, 435, 439, 441, 443, 453, 454, 458, 459, 461, 463, 467, 468, 477, 478, 481, 486, 487, 488, 490, 496, 511, 521, 523, 525, 529, 537, 550, 552, 554, 555, 560, 562, 563, 566, 567, 572, 573, 577, 585, 594, 595, 596, 598, 603, 604, 608, 619, 625, 626, 627, 628, 637, 640, 645, 647, 661, 664, 668, 672, 677, 684, 685, 686, 687, 688, 721, 733, 735, 736, 737, 740, 743, 747, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 770, 788, 789, 792, 793, 794, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 813, 814, 819, 824, 826, 831, 833, 835, 845, 846, 850, 851, 853, 855, 874, 875, 878, 879, 881, 883, 893], "ascii": [8, 15, 449, 451, 455, 466, 841, 843, 847, 858], "charact": [8, 10, 15, 21, 25, 90, 91, 101, 235, 327, 444, 448, 449, 450, 455, 456, 458, 459, 462, 466, 585, 619, 717, 836, 840, 841, 842, 847, 848, 850, 851, 854, 858], "print": [8, 10, 12, 14, 20, 91, 107, 128, 140, 141, 155, 158, 214, 235, 359, 537, 570, 619, 759, 798, 893], "tabl": [8, 11, 12, 14, 15, 16, 17, 18, 20, 21, 45, 78, 90, 91, 92, 101, 102, 172, 195, 200, 206, 235], "outlin": 8, "fals": [8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 23, 27, 29, 55, 60, 62, 65, 79, 90, 91, 93, 94, 98, 101, 105, 106, 108, 109, 110, 111, 112, 113, 119, 121, 122, 124, 136, 137, 139, 140, 141, 142, 147, 148, 150, 151, 152, 154, 157, 158, 161, 166, 167, 169, 172, 173, 180, 181, 182, 188, 190, 196, 200, 203, 207, 209, 212, 218, 219, 221, 222, 223, 225, 228, 235, 244, 245, 247, 256, 258, 262, 264, 278, 281, 299, 300, 301, 302, 303, 304, 331, 342, 343, 344, 345, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 382, 405, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 424, 427, 432, 434, 435, 439, 443, 453, 454, 458, 459, 461, 463, 477, 478, 481, 487, 488, 496, 511, 521, 523, 525, 529, 537, 550, 551, 552, 554, 555, 560, 566, 567, 572, 573, 575, 577, 585, 594, 595, 596, 598, 608, 619, 627, 637, 640, 647, 661, 664, 672, 676, 677, 684, 685, 686, 687, 688, 721, 733, 735, 736, 737, 743, 752, 754, 756, 759, 760, 761, 762, 763, 764, 766, 767, 770, 780, 788, 789, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 814, 819, 824, 826, 831, 835, 845, 846, 850, 851, 853, 855, 874, 875, 878, 879, 881, 883, 884, 893], "revert": 8, "abc": [8, 13, 14, 16, 17, 18, 19, 20, 453, 845], "xyz": [8, 13, 14, 16, 17, 18, 19, 20, 440, 446, 832, 838, 873, 893], "f64": [8, 11, 13, 14, 16, 17, 18, 19, 20, 55, 57, 59, 64, 81, 103, 112, 121, 122, 124, 125, 127, 128, 132, 133, 136, 139, 140, 148, 156, 157, 161, 162, 170, 173, 174, 189, 190, 191, 208, 212, 219, 221, 222, 223, 224, 225, 227, 228, 235, 241, 248, 249, 250, 251, 252, 253, 273, 290, 292, 296, 297, 304, 307, 308, 331, 342, 343, 344, 345, 346, 347, 355, 360, 367, 369, 370, 371, 373, 374, 379, 380, 384, 385, 386, 393, 396, 397, 400, 401, 404, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 430, 431, 432, 436, 437, 474, 475, 482, 489, 490, 492, 495, 503, 514, 515, 518, 523, 524, 528, 537, 550, 556, 557, 561, 562, 572, 573, 579, 580, 586, 598, 599, 605, 608, 609, 619, 629, 630, 631, 632, 633, 634, 675, 682, 683, 688, 689, 721, 736, 737, 741, 745, 787, 798, 800, 801, 803, 804, 805, 807, 808, 822, 823, 827, 868, 869, 893], "fmt": [9, 333, 359, 463, 506, 537, 570, 619, 723, 855], "mix": [9, 463, 689, 855, 893], "control": [9, 111, 555, 619], "how": [9, 46, 63, 81, 84, 100, 127, 156, 206, 235, 263, 291, 305, 360, 408, 537, 557, 572, 619, 646, 674, 690, 893], "float": [9, 34, 35, 40, 64, 103, 108, 109, 110, 112, 113, 129, 132, 157, 174, 182, 187, 227, 235, 262, 292, 293, 294, 295, 307, 308, 331, 342, 343, 344, 345, 349, 350, 355, 360, 361, 363, 366, 367, 369, 370, 371, 379, 384, 393, 396, 397, 401, 404, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 426, 489, 490, 498, 513, 514, 515, 516, 519, 521, 524, 526, 528, 537, 561, 573, 586, 593, 594, 619, 645, 672, 675, 678, 679, 680, 691, 721, 733, 734, 735, 736, 737, 740, 741, 745, 758, 770, 773, 775, 776, 777, 778, 783, 784, 790, 791, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 810, 812, 813, 824, 828, 864, 882, 893], "point": [9, 34, 35, 102, 112, 113, 132, 142, 158, 182, 235, 292, 307, 308, 331, 350, 355, 367, 369, 421, 422, 537, 561, 567, 577, 588, 619, 675, 721, 741, 745, 758, 808, 809, 893], "displai": [9, 14, 18], "full": [9, 32, 61, 90, 91, 92, 101, 102], "format": [9, 11, 15, 25, 89, 90, 91, 101, 103, 130, 154, 163, 181, 197, 233, 235, 330, 333, 452, 463, 559, 565, 581, 611, 619, 723, 844, 855, 892], "number": [9, 10, 12, 20, 21, 25, 29, 55, 74, 78, 80, 82, 84, 87, 88, 90, 91, 93, 101, 105, 111, 112, 116, 129, 130, 132, 133, 145, 154, 155, 158, 159, 166, 167, 182, 186, 187, 193, 206, 218, 220, 229, 235, 263, 268, 276, 280, 282, 284, 298, 304, 305, 315, 317, 322, 324, 331, 337, 338, 341, 343, 344, 345, 349, 351, 356, 358, 367, 369, 376, 377, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 425, 426, 428, 448, 451, 459, 460, 471, 477, 494, 509, 523, 527, 537, 559, 560, 561, 562, 569, 576, 585, 592, 593, 596, 601, 614, 615, 619, 646, 651, 659, 663, 665, 688, 690, 701, 703, 712, 714, 721, 727, 728, 731, 734, 735, 736, 737, 740, 742, 749, 758, 772, 780, 781, 798, 799, 800, 801, 802, 803, 805, 806, 807, 808, 809, 816, 817, 820, 828, 840, 843, 851, 852, 865, 878, 882, 893], "int": [10, 12, 20, 21, 25, 29, 40, 57, 81, 84, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 102, 104, 105, 106, 110, 111, 112, 113, 114, 116, 120, 129, 132, 133, 135, 144, 145, 146, 148, 154, 155, 157, 159, 160, 161, 165, 166, 167, 178, 180, 182, 185, 186, 187, 189, 191, 192, 193, 194, 201, 206, 208, 210, 213, 220, 229, 235, 262, 263, 267, 268, 276, 277, 280, 281, 282, 284, 293, 294, 295, 304, 305, 343, 344, 345, 349, 350, 351, 356, 357, 358, 361, 377, 400, 401, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 425, 426, 428, 433, 437, 445, 449, 452, 455, 457, 459, 460, 466, 467, 468, 471, 472, 473, 477, 482, 487, 490, 494, 498, 499, 500, 501, 507, 509, 513, 515, 516, 517, 518, 521, 523, 524, 525, 526, 527, 528, 537, 560, 561, 562, 569, 573, 576, 585, 592, 593, 596, 597, 599, 601, 602, 605, 606, 610, 614, 615, 619, 635, 636, 645, 646, 650, 651, 659, 660, 663, 664, 665, 672, 676, 678, 679, 680, 688, 690, 734, 735, 736, 737, 740, 741, 742, 748, 749, 771, 772, 775, 776, 778, 780, 781, 783, 784, 785, 786, 787, 790, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 812, 813, 816, 817, 820, 825, 828, 837, 841, 844, 847, 849, 851, 852, 858, 864, 865, 866, 867, 878, 882, 893], "liter": [11, 15, 60, 65, 93, 113, 154, 160, 161, 165, 166, 169, 180, 181, 184, 192, 196, 235, 244, 245, 311, 349, 373, 406, 439, 453, 454, 487, 499, 500, 507, 511, 521, 525, 529, 537, 562, 591, 619, 625, 626, 697, 740, 812, 813, 831, 845, 846, 893], "left": [11, 65, 108, 109, 142, 143, 156, 157, 235, 343, 344, 345, 360, 361, 412, 413, 414, 415, 416, 418, 419, 420, 423, 449, 466, 476, 490, 496, 497, 505, 520, 537, 567, 568, 572, 573, 619, 735, 736, 737, 810, 841, 858, 877, 893], "center": [11, 343, 344, 345, 411, 412, 413, 414, 415, 416, 418, 419, 420, 537, 735, 736, 737, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "right": [11, 13, 65, 90, 91, 108, 109, 142, 143, 156, 157, 235, 343, 344, 345, 361, 412, 413, 414, 415, 416, 418, 419, 420, 423, 432, 455, 490, 537, 567, 568, 572, 573, 619, 735, 736, 737, 810, 824, 847, 893], "cell": 11, "align": [11, 55, 466, 858], "keyerror": [11, 15], "recognis": [11, 15, 110], "column_abc": 11, "column_xyz": 11, "If": [12, 25, 27, 28, 29, 46, 61, 64, 65, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 98, 101, 102, 104, 105, 106, 119, 120, 131, 142, 143, 154, 157, 163, 167, 169, 181, 182, 189, 197, 199, 200, 203, 235, 247, 277, 282, 293, 294, 295, 311, 352, 374, 382, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 428, 432, 433, 434, 435, 448, 450, 451, 456, 457, 458, 459, 460, 462, 463, 477, 484, 486, 487, 488, 494, 496, 505, 511, 523, 537, 567, 568, 572, 573, 577, 581, 588, 596, 597, 611, 613, 619, 627, 628, 660, 678, 679, 680, 697, 730, 747, 770, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 810, 814, 820, 824, 825, 840, 842, 843, 848, 849, 850, 851, 852, 854, 855, 871, 875, 878, 883, 893], "rang": [12, 64, 65, 100, 129, 142, 155, 235, 312, 324, 328, 329, 330, 335, 337, 360, 487, 492, 499, 500, 537, 567, 619, 698, 714, 718, 719, 720, 725, 727, 734, 787, 893], "100": [12, 81, 84, 90, 91, 101, 105, 235, 466, 487, 799, 800, 802, 893], "98": [12, 148, 235, 434, 435, 472, 477, 537], "99": [12, 132, 133, 148, 151, 235, 242, 349, 351, 434, 435, 472, 477, 490, 537, 561, 562, 619, 733, 740, 893], "10": [12, 24, 25, 26, 29, 55, 63, 64, 65, 100, 101, 107, 112, 113, 122, 131, 139, 142, 143, 145, 147, 148, 149, 166, 171, 173, 177, 178, 184, 193, 212, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 246, 254, 255, 256, 257, 258, 263, 268, 276, 277, 280, 293, 298, 300, 303, 305, 307, 308, 311, 330, 335, 339, 357, 358, 360, 365, 373, 376, 377, 380, 400, 413, 433, 466, 471, 502, 507, 509, 527, 537, 552, 567, 568, 569, 571, 576, 584, 585, 591, 596, 600, 601, 608, 619, 628, 646, 651, 659, 660, 663, 678, 697, 725, 729, 733, 749, 759, 772, 774, 787, 812, 813, 865, 893], "95": [12, 242, 537], "96": [12, 242, 537], "97": [12, 148, 235, 242, 537], "move": [13, 336, 343, 344, 345, 412, 413, 415, 419, 537, 726, 735, 736, 737, 799, 800, 802, 806, 893], "inlin": 13, "parenthes": 13, "below": [14, 92, 102, 127, 141, 235, 360, 529, 537, 557, 619], "when": [14, 18, 29, 46, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90, 91, 92, 94, 98, 101, 102, 104, 105, 112, 113, 115, 120, 128, 129, 131, 133, 136, 142, 171, 180, 184, 212, 235, 293, 294, 295, 343, 344, 345, 351, 382, 390, 450, 456, 462, 463, 496, 505, 537, 562, 567, 591, 596, 608, 619, 627, 678, 679, 680, 734, 735, 736, 737, 742, 812, 813, 842, 848, 854, 893], "ascii_ful": 15, "ascii_full_condens": 15, "ascii_no_bord": 15, "ascii_borders_onli": 15, "ascii_borders_only_condens": 15, "ascii_horizontal_onli": 15, "ascii_markdown": 15, "utf8_ful": [15, 55], "utf8_full_condens": 15, "utf8_no_bord": 15, "utf8_borders_onli": 15, "utf8_horizontal_onli": 15, "noth": [15, 440, 445, 446, 447, 832, 837, 838, 839], "none": [15, 23, 24, 25, 26, 27, 28, 29, 32, 41, 45, 55, 64, 65, 78, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 98, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 120, 121, 124, 127, 132, 133, 140, 142, 143, 144, 149, 156, 157, 158, 161, 163, 167, 168, 180, 182, 184, 187, 189, 196, 198, 203, 204, 205, 206, 207, 212, 235, 243, 246, 247, 257, 267, 277, 282, 284, 293, 294, 295, 298, 300, 303, 307, 308, 310, 330, 335, 340, 343, 344, 345, 346, 349, 350, 351, 356, 357, 360, 361, 367, 368, 369, 370, 371, 376, 382, 398, 400, 406, 411, 412, 413, 414, 415, 416, 418, 419, 420, 422, 426, 427, 428, 429, 433, 438, 439, 442, 443, 447, 448, 449, 450, 451, 455, 456, 457, 459, 460, 461, 462, 463, 466, 467, 468, 476, 484, 486, 487, 490, 493, 494, 500, 501, 503, 504, 511, 512, 521, 524, 525, 528, 537, 550, 551, 557, 561, 562, 567, 568, 571, 572, 573, 575, 577, 581, 591, 593, 594, 595, 596, 597, 598, 603, 604, 608, 609, 611, 613, 619, 628, 635, 636, 650, 660, 665, 677, 678, 689, 691, 696, 720, 725, 730, 732, 733, 735, 736, 737, 740, 741, 742, 744, 747, 748, 750, 751, 763, 764, 770, 782, 798, 799, 800, 801, 802, 803, 805, 806, 807, 809, 815, 817, 820, 821, 824, 825, 828, 830, 831, 834, 835, 839, 840, 841, 842, 843, 847, 848, 849, 851, 852, 853, 854, 855, 870, 873, 877, 882, 883, 893], "rounded_corn": 15, "style": [15, 172, 235], "border": 15, "line": [15, 90, 91, 93, 101, 140, 235], "includ": [15, 23, 25, 61, 92, 102, 112, 129, 142, 203, 206, 235, 331, 361, 458, 459, 496, 537, 567, 619, 721, 734, 850, 851, 883, 893], "row": [15, 20, 25, 27, 29, 55, 56, 58, 71, 74, 77, 81, 82, 84, 90, 91, 93, 94, 98, 101, 104, 105, 106, 108, 111, 112, 120, 127, 131, 134, 136, 140, 142, 144, 145, 150, 152, 154, 155, 157, 158, 159, 163, 167, 189, 193, 194, 197, 204, 206, 213, 217, 220, 229, 235, 247, 265, 348, 358, 377, 400, 409, 433, 444, 471, 496, 497, 505, 509, 513, 516, 520, 527, 537, 552, 557, 560, 563, 564, 567, 569, 573, 574, 576, 577, 581, 596, 597, 601, 602, 603, 610, 613, 614, 615, 619, 627, 648, 739, 749, 772, 787, 796, 825, 836, 865, 893], "divid": [15, 330, 335, 343, 344, 345, 374, 537, 720, 725, 735, 736, 737, 770, 893], "same": [15, 46, 55, 62, 111, 120, 204, 217, 235, 241, 246, 247, 348, 411, 412, 413, 414, 415, 416, 418, 419, 420, 491, 537, 603, 613, 619, 623, 627, 628, 697, 739, 798, 799, 800, 801, 802, 803, 805, 806, 807, 884, 893], "dens": [15, 140, 235, 405, 537, 792, 893], "space": 15, "horizont": [15, 63, 136, 147, 206, 235, 493, 496, 497, 498, 502, 505, 513, 516, 520, 526], "markdown": 15, "compat": [15, 29, 100, 102, 235, 596, 619], "No": 15, "appli": [15, 25, 60, 63, 101, 110, 112, 113, 136, 171, 215, 235, 312, 315, 317, 318, 320, 322, 324, 325, 328, 329, 331, 337, 338, 341, 344, 345, 382, 399, 411, 412, 413, 415, 419, 463, 484, 487, 496, 497, 505, 512, 520, 537, 569, 576, 577, 584, 619, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 731, 736, 737, 798, 799, 800, 802, 806, 855, 893], "round": [15, 57, 292, 355, 474, 537, 675, 745, 893], "corner": 15, "op": [15, 113, 408, 537], "The": [15, 29, 40, 47, 55, 61, 78, 80, 81, 82, 84, 87, 90, 98, 100, 101, 102, 120, 128, 142, 143, 144, 149, 154, 157, 164, 180, 181, 205, 207, 217, 235, 247, 281, 282, 284, 285, 286, 287, 312, 324, 327, 328, 330, 335, 337, 349, 356, 357, 382, 405, 408, 411, 412, 413, 414, 415, 416, 418, 419, 420, 429, 432, 435, 438, 441, 442, 448, 449, 450, 455, 456, 462, 466, 488, 507, 530, 531, 533, 537, 538, 541, 542, 543, 550, 566, 567, 568, 569, 571, 573, 576, 577, 582, 585, 596, 604, 613, 619, 664, 667, 668, 669, 677, 698, 714, 717, 718, 720, 725, 727, 740, 748, 751, 792, 798, 799, 800, 801, 802, 803, 805, 806, 807, 821, 824, 830, 833, 834, 840, 841, 842, 847, 848, 854, 858, 885, 887, 889, 893, 896, 897, 898], "one": [15, 55, 71, 78, 80, 81, 82, 83, 84, 113, 133, 134, 140, 142, 143, 154, 163, 172, 180, 181, 198, 202, 215, 216, 235, 242, 351, 373, 411, 434, 435, 467, 472, 484, 513, 516, 525, 526, 537, 556, 562, 563, 567, 568, 581, 609, 619, 627, 742, 798, 859, 893], "more": [15, 27, 29, 55, 77, 78, 79, 80, 81, 82, 83, 84, 92, 98, 102, 112, 113, 120, 141, 154, 158, 163, 167, 170, 180, 181, 182, 204, 211, 217, 235, 247, 293, 294, 295, 373, 374, 382, 422, 432, 478, 513, 516, 526, 537, 566, 581, 596, 603, 607, 613, 619, 628, 678, 679, 680, 770, 809, 824, 879, 893, 900], "semigraph": 15, "box": [15, 120, 235], "draw": [15, 20, 21], "found": [15, 25, 72, 81, 128, 235, 423, 447, 463, 468, 537, 810, 839, 893], "unicod": 15, "block": [15, 588, 610, 619, 812, 813, 893], "http": [15, 79, 100, 119, 445, 837, 900], "en": 15, "wikipedia": 15, "org": [15, 79, 119], "wiki": 15, "drawing_charact": 15, "box_draw": 15, "hide": [16, 17, 18, 19], "etc": [16, 78, 90, 92, 94, 98, 102, 104, 106, 487, 812, 813, 893], "inform": [18, 61, 92, 102, 170, 235, 293, 294, 295, 374, 432, 537, 585, 619, 678, 679, 680, 770, 824, 893], "separ": [19, 25, 203, 235, 265, 269, 444, 493, 496, 497, 648, 652, 836, 863], "between": [19, 63, 110, 111, 112, 113, 174, 227, 235, 269, 290, 306, 361, 400, 404, 416, 438, 495, 518, 519, 523, 537, 586, 619, 652, 672, 691, 787, 791, 803, 830, 893], "set_tbl_column_data_type_inlin": 19, "max": [20, 29, 112, 113, 124, 133, 142, 143, 172, 235, 293, 294, 300, 351, 399, 405, 412, 424, 460, 537, 562, 567, 568, 596, 612, 619, 665, 678, 679, 684, 689, 742, 792, 799, 814, 852, 893], "both": [20, 25, 46, 65, 142, 143, 156, 157, 164, 180, 212, 235, 246, 361, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 572, 573, 582, 608, 619], "element": [20, 88, 113, 116, 248, 249, 250, 251, 252, 253, 264, 265, 296, 297, 299, 300, 301, 302, 303, 304, 347, 357, 365, 380, 400, 405, 408, 423, 429, 430, 431, 436, 459, 460, 474, 475, 477, 537, 628, 629, 630, 631, 632, 633, 634, 647, 648, 682, 683, 684, 685, 686, 687, 688, 738, 743, 759, 774, 787, 792, 810, 821, 822, 823, 827, 828, 851, 852, 868, 869, 878, 879, 882, 893], "width": [21, 90, 91, 235, 449, 455, 466, 619, 841, 847, 858], "char": [21, 46, 451, 843], "enabl": [22, 424, 537, 814, 893], "addit": [22, 81, 92, 102, 110, 111, 349, 537, 740, 893], "verbos": 22, "debug": [22, 552, 560, 577, 619], "log": [22, 57, 342, 477, 537, 733, 878, 893], "if_set": 23, "dict": [23, 29, 56, 58, 61, 78, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 98, 99, 101, 102, 104, 106, 112, 154, 169, 170, 176, 180, 181, 183, 196, 197, 235, 525, 588, 590, 619], "show": [23, 127, 140, 158, 168, 235, 557, 585, 594, 619], "variabl": [23, 85, 163, 198, 235, 581, 619, 872, 893], "chang": [23, 55, 64, 90, 91, 103, 206, 207, 235, 304, 330, 400, 412, 413, 414, 415, 416, 418, 419, 420, 537, 688, 696, 720, 787, 819, 893], "restrict": [23, 460, 852], "dictionari": [23, 78, 80, 81, 82, 84, 90, 91, 95, 99, 101, 154, 169, 180, 181, 196, 197, 235, 689, 893], "those": [23, 405, 537, 792, 893], "_have_": 23, "been": [23, 405, 537, 792, 893], "set_stat": 23, "all_stat": 23, "file": [24, 25, 26, 27, 28, 29, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 131, 235, 560, 587, 595, 596, 611, 619, 627, 893], "binaryio": [24, 26, 89, 90, 93, 94, 95, 98, 99, 235], "bytesio": [24, 25, 26, 29, 89, 90, 91, 93, 94, 98, 235], "path": [24, 25, 26, 27, 28, 29, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 235, 424, 447, 537, 587, 595, 596, 611, 619, 814, 839, 893], "compress": [24, 26, 29, 235, 595, 596, 619], "avrocompress": [24, 235], "uncompress": [24, 26, 29, 94, 104, 235, 596, 619], "write": [24, 25, 26, 27, 29, 91, 235, 293, 294, 295, 537, 575, 594, 596, 611, 619, 678, 679, 680, 893], "apach": [24, 29, 89, 235], "avro": [24, 89, 235, 546], "should": [24, 25, 26, 27, 28, 29, 78, 80, 82, 84, 88, 92, 102, 110, 111, 113, 116, 119, 120, 142, 154, 157, 181, 197, 217, 235, 242, 247, 264, 291, 304, 339, 367, 369, 411, 412, 413, 414, 415, 416, 418, 419, 420, 423, 432, 463, 511, 537, 556, 567, 572, 573, 577, 594, 595, 596, 611, 613, 619, 628, 647, 674, 688, 729, 798, 799, 800, 801, 802, 803, 805, 806, 807, 810, 824, 855, 893], "written": [24, 25, 26, 27, 28, 29, 235, 595, 596, 611, 619], "snappi": [24, 29, 235, 596, 619], "deflat": [24, 235], "import": [24, 25, 26, 29, 32, 65, 78, 82, 83, 101, 102, 103, 108, 109, 110, 111, 112, 113, 124, 140, 142, 155, 157, 184, 200, 206, 207, 235, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 501, 511, 567, 573, 577, 591, 619, 682, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 753, 756, 760, 761, 762, 798, 822, 868, 893], "pathlib": [24, 25, 26, 27, 28, 29, 89, 93, 94, 96, 97, 101, 104, 105, 235, 587, 595, 596, 611, 619], "foo": [24, 25, 26, 27, 28, 29, 85, 120, 123, 125, 126, 127, 128, 131, 134, 135, 136, 137, 138, 139, 144, 145, 146, 147, 148, 149, 151, 156, 159, 160, 161, 162, 165, 168, 169, 170, 172, 174, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 210, 214, 215, 235, 243, 262, 266, 267, 270, 271, 293, 294, 295, 327, 358, 359, 401, 409, 425, 426, 438, 440, 442, 444, 446, 450, 456, 458, 460, 462, 464, 465, 471, 473, 484, 487, 489, 491, 494, 495, 504, 508, 509, 511, 513, 514, 515, 516, 517, 518, 519, 522, 523, 524, 527, 528, 529, 537, 553, 556, 557, 558, 563, 570, 571, 572, 588, 590, 591, 598, 603, 604, 606, 609, 611, 619, 652, 678, 717, 832, 834, 836, 838, 852, 893], "bar": [24, 25, 26, 27, 28, 29, 85, 120, 123, 125, 126, 127, 128, 131, 134, 135, 136, 137, 138, 139, 145, 147, 148, 149, 151, 156, 159, 160, 161, 162, 165, 168, 169, 170, 172, 174, 176, 177, 178, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 204, 205, 208, 209, 214, 215, 235, 243, 271, 359, 432, 442, 444, 458, 460, 484, 489, 491, 494, 495, 504, 509, 513, 514, 515, 516, 517, 518, 522, 523, 524, 527, 528, 529, 537, 553, 556, 557, 558, 563, 570, 571, 572, 588, 590, 591, 598, 603, 604, 606, 611, 619, 652, 824, 834, 836, 852, 893], "ham": [24, 25, 26, 29, 85, 123, 125, 126, 127, 128, 134, 135, 137, 144, 145, 147, 156, 160, 161, 162, 165, 168, 170, 174, 176, 178, 180, 182, 183, 184, 186, 187, 189, 190, 191, 192, 193, 198, 199, 200, 201, 204, 208, 209, 235, 491, 553, 556, 557, 558, 563, 572, 588, 590, 591, 598, 603, 609, 619], "d": [24, 25, 26, 29, 46, 63, 81, 103, 124, 140, 144, 145, 148, 156, 159, 193, 195, 206, 209, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 314, 333, 427, 440, 446, 459, 463, 490, 507, 537, 572, 598, 619, 700, 723, 832, 838, 851, 855], "e": [24, 25, 26, 29, 46, 79, 90, 91, 93, 94, 98, 104, 106, 124, 140, 145, 159, 193, 195, 206, 235, 342, 346, 379, 424, 427, 432, 503, 537, 575, 588, 619, 733, 811, 814, 824, 875, 893], "dirpath": [24, 25, 26, 29, 101, 235], "new_fil": [24, 25, 26, 29, 235], "has_head": [25, 90, 91, 93, 101, 235], "sep": [25, 87, 90, 91, 101, 235, 493], "quot": [25, 90, 91, 101, 235], "batch_siz": [25, 90, 91, 105, 235], "1024": [25, 29, 90, 91, 105, 235, 596, 619], "datetime_format": [25, 235], "date_format": [25, 235, 333], "time_format": [25, 235], "float_precis": [25, 235], "null_valu": [25, 90, 91, 101, 235], "_io": [25, 89, 93, 94, 235], "comma": [25, 235], "csv": [25, 90, 91, 93, 101, 235, 546, 595, 596, 612, 619], "result": [25, 27, 28, 55, 78, 82, 84, 92, 100, 101, 102, 103, 104, 106, 113, 131, 142, 153, 167, 187, 215, 235, 343, 344, 345, 374, 409, 411, 412, 413, 414, 415, 416, 418, 419, 420, 424, 426, 458, 459, 487, 496, 497, 498, 512, 526, 537, 549, 567, 577, 585, 593, 595, 596, 611, 619, 627, 730, 735, 736, 737, 770, 796, 798, 799, 800, 801, 802, 803, 805, 806, 807, 814, 817, 850, 851, 875, 893], "instead": [25, 27, 28, 88, 98, 112, 116, 120, 142, 154, 167, 169, 180, 181, 235, 256, 258, 448, 450, 456, 462, 487, 537, 561, 566, 567, 611, 619, 637, 640, 812, 813, 840, 842, 848, 854, 893], "whether": [25, 60, 65, 82, 84, 113, 235, 387, 388], "header": [25, 29, 90, 91, 93, 101, 128, 172, 203, 235, 596, 619], "field": [25, 47, 81, 205, 235, 282, 459, 460, 468, 496, 497, 525, 604, 619, 665, 851, 852, 861, 863], "symbol": [25, 235], "byte": [25, 40, 90, 91, 93, 94, 95, 98, 99, 101, 129, 235, 285, 288, 289, 448, 451, 596, 619, 667, 670, 671, 734, 840, 843, 893], "process": [25, 235, 595, 596, 619], "per": [25, 111, 112, 140, 167, 168, 224, 226, 227, 235, 264, 267, 281, 647, 650, 664], "thread": [25, 87, 90, 91, 100, 114, 235, 264, 647], "specifi": [25, 55, 65, 72, 78, 112, 129, 133, 180, 235, 343, 344, 345, 351, 408, 449, 455, 537, 562, 619, 734, 735, 736, 737, 742, 841, 847, 893], "defin": [25, 32, 65, 110, 111, 112, 120, 142, 143, 167, 171, 217, 235, 247, 281, 361, 412, 413, 414, 415, 416, 418, 419, 420, 486, 511, 525, 537, 567, 568, 584, 613, 619, 628, 664, 893], "chrono": [25, 235, 333, 463, 723, 855], "rust": [25, 29, 73, 94, 98, 120, 217, 235, 247, 537, 613], "crate": [25, 235], "fraction": [25, 108, 109, 182, 235, 331, 400, 422, 463, 537, 721, 787, 809, 893], "second": [25, 65, 142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 463, 488, 500, 501, 537, 567, 568, 573, 619, 717, 720, 725], "precis": [25, 154, 181, 197, 235, 309, 463, 695], "infer": [25, 78, 80, 81, 82, 83, 84, 90, 91, 93, 101, 105, 110, 120, 235, 409, 463, 537, 796, 893], "maximum": [25, 90, 91, 101, 111, 112, 113, 160, 235, 259, 293, 294, 384, 396, 405, 513, 537, 578, 619, 642, 678, 679, 704, 775, 783, 788, 792, 893], "timeunit": [25, 32, 33, 65, 235, 309, 311, 334, 339, 695, 697, 724, 729], "frame": [25, 55, 81, 93, 108, 112, 120, 154, 155, 164, 167, 171, 180, 181, 200, 206, 235, 582, 584, 619], "datetim": [25, 40, 65, 83, 124, 140, 142, 143, 155, 157, 207, 235, 262, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 361, 412, 413, 414, 415, 416, 418, 419, 420, 463, 476, 490, 501, 507, 511, 516, 537, 567, 568, 573, 619, 645, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 753, 775, 778, 783, 784, 813, 855, 877, 893], "decim": [25, 40, 235, 421, 537, 808, 893], "place": [25, 126, 147, 148, 177, 186, 187, 190, 209, 235, 256, 258, 269, 276, 425, 426, 537, 592, 593, 598, 619, 637, 640, 652, 659, 793, 795, 816, 817, 826, 893], "float64": [25, 81, 88, 112, 116, 128, 129, 136, 183, 235, 248, 249, 250, 251, 252, 253, 290, 296, 297, 331, 346, 367, 369, 430, 431, 474, 475, 490, 491, 503, 537, 558, 590, 619, 721], "datatyp": [25, 27, 40, 47, 53, 78, 80, 81, 82, 84, 86, 88, 93, 95, 99, 113, 116, 128, 136, 183, 184, 235, 265, 290, 427, 444, 463, 476, 486, 487, 491, 503, 511, 512, 525, 537, 546, 590, 591, 611, 619, 628, 648, 672, 689, 753, 765, 768, 818, 836, 855, 877, 893], "repres": [25, 41, 53, 65, 78, 80, 82, 83, 84, 235, 367, 369, 491, 511, 537, 813, 828, 882, 893], "null": [25, 55, 63, 81, 90, 91, 101, 103, 119, 124, 127, 133, 136, 137, 149, 156, 161, 162, 168, 174, 186, 187, 190, 191, 192, 196, 205, 208, 212, 235, 243, 246, 247, 256, 258, 263, 266, 267, 270, 276, 281, 282, 284, 286, 293, 294, 295, 298, 300, 303, 305, 307, 308, 313, 316, 319, 321, 323, 326, 332, 343, 344, 345, 346, 349, 350, 351, 352, 356, 360, 367, 368, 369, 370, 371, 376, 398, 400, 406, 411, 412, 413, 414, 415, 416, 418, 419, 420, 425, 426, 427, 429, 434, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 451, 455, 457, 459, 460, 461, 466, 476, 483, 484, 490, 492, 493, 503, 511, 525, 537, 557, 562, 571, 572, 592, 593, 598, 604, 608, 609, 611, 619, 628, 637, 640, 646, 659, 664, 665, 668, 678, 690, 693, 699, 702, 708, 710, 713, 716, 722, 735, 736, 737, 740, 742, 747, 763, 764, 786, 787, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 811, 816, 817, 821, 830, 831, 832, 833, 834, 835, 837, 838, 839, 840, 841, 843, 847, 849, 851, 852, 853, 875, 877, 883, 893], "empti": [25, 70, 81, 90, 91, 93, 101, 121, 122, 151, 163, 235, 522, 550, 551, 581, 619, 677, 681, 755, 893], "ipccompress": [26, 235], "arrow": [26, 66, 78, 94, 104, 195, 235, 595, 619, 871, 875, 893], "ipc": [26, 94, 95, 103, 104, 235, 546], "binari": [26, 235, 285, 287, 288, 289, 667, 669, 670, 671], "stream": [26, 62, 235, 552, 554, 560, 585, 594, 595, 596, 619], "feather": [26, 94, 104, 235, 546], "lz4": [26, 29, 235, 595, 596, 619], "zstd": [26, 29, 235, 595, 596, 619], "pretti": [27, 235], "row_ori": [27, 235], "io": [27, 28, 96, 97, 235, 587, 611, 619, 900], "iobas": [27, 28, 96, 97, 235, 587, 611, 619], "serial": [27, 28, 235], "represent": [27, 28, 235, 291, 312, 315, 317, 318, 320, 322, 324, 325, 328, 329, 331, 337, 338, 341, 476, 537, 554, 555, 575, 619, 674, 698, 701, 703, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 731, 877, 893], "orient": [27, 56, 58, 82, 84, 235], "slower": [27, 82, 84, 120, 169, 207, 217, 235, 247, 537, 613], "common": [27, 235], "write_ndjson": [27, 235], "newlin": [28, 97, 105, 235], "delimit": [28, 90, 91, 97, 101, 105, 235, 438, 830], "parquetcompress": [29, 235], "compression_level": [29, 235, 596, 619], "statist": [29, 90, 91, 124, 235, 344, 345, 374, 412, 413, 414, 415, 416, 417, 418, 419, 420, 432, 537, 596, 619, 689, 736, 737, 770, 804, 824, 893], "row_group_s": [29, 235, 596, 619], "use_pyarrow": [29, 90, 94, 98, 235, 596, 619, 874, 893], "pyarrow_opt": [29, 92, 98, 102, 235], "object": [29, 65, 79, 80, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 102, 111, 112, 113, 119, 158, 200, 235, 511, 546, 551, 566, 570, 575, 587, 619, 641, 673, 694, 829, 871, 893], "parquet": [29, 98, 99, 106, 235, 546, 596, 619], "gzip": [29, 235, 596, 619], "lzo": [29, 235, 596, 619], "brotli": [29, 235, 596, 619], "choos": [29, 235, 595, 596, 619], "good": [29, 154, 235, 595, 596, 619], "perform": [29, 70, 79, 90, 91, 94, 98, 101, 104, 105, 106, 119, 120, 142, 143, 157, 175, 217, 235, 247, 537, 567, 568, 573, 595, 596, 610, 613, 619], "fast": [29, 235, 424, 537, 595, 596, 619, 814, 893], "decompress": [29, 235, 595, 596, 619], "backward": [29, 133, 157, 235, 284, 351, 537, 562, 573, 596, 619, 742, 893], "guarante": [29, 79, 90, 91, 235, 560, 596, 619], "deal": [29, 235, 405, 463, 537, 596, 619, 792, 855, 893], "older": [29, 235, 596, 619], "reader": [29, 87, 90, 91, 94, 98, 235, 547, 596, 619], "level": [29, 101, 104, 105, 106, 112, 120, 136, 167, 235, 352, 537, 569, 576, 596, 619], "higher": [29, 174, 227, 235, 404, 416, 519, 537, 586, 596, 619, 791, 803, 893], "mean": [29, 85, 90, 91, 98, 101, 124, 133, 172, 198, 235, 348, 351, 413, 432, 445, 489, 537, 562, 596, 619, 689, 739, 742, 747, 800, 824, 837, 893], "smaller": [29, 129, 235, 560, 596, 619, 734, 893], "disk": [29, 235, 594, 595, 596, 619], "min": [29, 112, 113, 124, 133, 142, 143, 172, 235, 293, 295, 301, 351, 405, 415, 522, 537, 562, 567, 568, 596, 619, 678, 680, 685, 689, 742, 792, 802, 893], "11": [29, 141, 143, 235, 307, 308, 317, 327, 330, 335, 360, 400, 419, 433, 466, 491, 526, 537, 552, 566, 568, 569, 576, 585, 596, 601, 619, 628, 717, 720, 725, 798, 893], "22": [29, 235, 330, 335, 339, 463, 491, 596, 619, 720, 725, 729, 855], "extra": [29, 90, 92, 93, 94, 98, 102, 104, 106, 131, 169, 235, 596, 619, 627, 893], "comput": [29, 62, 63, 67, 129, 157, 204, 227, 235, 241, 248, 249, 250, 251, 252, 253, 272, 273, 274, 296, 297, 299, 300, 301, 302, 303, 306, 342, 347, 374, 379, 380, 394, 400, 403, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 429, 430, 431, 432, 436, 474, 475, 495, 502, 518, 523, 537, 570, 572, 573, 596, 603, 609, 619, 623, 629, 630, 631, 632, 633, 634, 655, 656, 657, 682, 683, 684, 685, 686, 687, 691, 733, 734, 738, 770, 773, 774, 779, 787, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 821, 822, 823, 824, 827, 868, 869, 893], "size": [29, 90, 91, 111, 112, 113, 114, 129, 142, 206, 235, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 487, 537, 567, 596, 619, 734, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "group": [29, 91, 141, 142, 143, 155, 167, 169, 172, 206, 207, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235, 242, 247, 264, 354, 399, 434, 435, 445, 472, 486, 537, 566, 567, 568, 596, 612, 613, 614, 615, 619, 647, 837], "chunk": [29, 87, 90, 91, 101, 104, 105, 106, 112, 113, 131, 155, 166, 235, 246, 406, 537, 596, 619, 627, 676, 746, 780, 793, 871, 893], "reduc": [29, 90, 91, 98, 101, 104, 105, 106, 222, 223, 225, 228, 235, 427, 505, 537, 596, 619, 776, 790, 818, 864, 893], "memori": [29, 63, 78, 79, 82, 83, 84, 90, 91, 94, 98, 101, 104, 105, 106, 119, 120, 131, 188, 217, 235, 247, 406, 427, 537, 596, 613, 619, 627, 793, 818, 819, 893], "pressur": [29, 98, 105, 106, 235, 427, 537, 596, 619, 818, 893], "improv": [29, 94, 104, 235, 596, 619], "speed": [29, 235, 596, 619], "minimum": [29, 111, 112, 113, 136, 165, 235, 293, 295, 343, 344, 345, 393, 397, 405, 516, 537, 583, 596, 619, 678, 680, 711, 735, 736, 737, 784, 789, 792, 893], "implement": [29, 79, 102, 119, 120, 217, 235, 247, 537, 613, 812, 813, 893], "v": [29, 64, 129, 235, 423, 537, 810, 893], "At": [29, 235], "moment": [29, 170, 235, 374, 432, 537, 770, 824, 893], "argument": [29, 90, 92, 98, 102, 142, 143, 161, 170, 171, 172, 192, 200, 207, 235, 330, 335, 361, 412, 413, 414, 415, 416, 418, 419, 420, 450, 456, 462, 537, 567, 568, 584, 619, 720, 725, 842, 848, 854, 893], "pass": [29, 55, 65, 80, 93, 102, 111, 112, 113, 170, 171, 212, 235, 247, 310, 314, 349, 359, 450, 456, 462, 507, 537, 570, 577, 584, 594, 608, 619, 628, 696, 700, 730, 740, 842, 848, 854, 893], "pyarrow": [29, 78, 83, 90, 92, 94, 98, 102, 103, 107, 155, 195, 199, 200, 235, 547, 871, 874, 875, 893], "write_t": [29, 235], "base": [30, 127, 134, 142, 143, 235, 342, 379, 380, 452, 513, 516, 537, 546, 557, 563, 567, 568, 619, 733, 773, 774, 844, 884, 893], "calendar": [31, 32, 142, 143, 157, 207, 235, 317, 327, 330, 335, 341, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 703, 717, 720, 725, 731], "date": [32, 40, 55, 65, 90, 91, 100, 101, 103, 124, 140, 142, 143, 155, 157, 200, 235, 262, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 349, 361, 412, 413, 414, 415, 416, 418, 419, 420, 463, 476, 490, 507, 516, 537, 546, 567, 568, 573, 619, 645, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 740, 753, 775, 778, 783, 784, 813, 855, 877, 893], "time": [32, 33, 40, 61, 62, 65, 101, 131, 142, 143, 157, 207, 235, 261, 262, 282, 309, 310, 311, 314, 327, 334, 336, 339, 340, 361, 463, 476, 477, 492, 493, 499, 500, 501, 507, 521, 537, 546, 552, 567, 568, 573, 585, 619, 627, 644, 695, 696, 697, 700, 717, 724, 726, 729, 730, 855, 877, 878, 893], "time_unit": [32, 33, 65, 339, 729], "u": [32, 33, 65, 154, 181, 197, 235, 309, 311, 314, 334, 339, 463, 507, 521, 695, 697, 700, 724, 729], "time_zon": [32, 65], "m": [32, 33, 65, 169, 235, 309, 311, 314, 333, 334, 339, 463, 501, 507, 695, 697, 700, 723, 724, 729, 855], "unit": [32, 33, 65, 112, 113, 129, 235, 309, 311, 314, 334, 339, 381, 390, 480, 507, 537, 585, 619, 695, 697, 700, 724, 729, 734, 893], "timezon": [32, 65, 463, 730, 855], "zoneinfo": 32, "run": [32, 62, 120, 158, 217, 235, 247, 264, 304, 521, 522, 537, 552, 560, 585, 594, 595, 596, 613, 619, 647, 688, 893, 899], "available_timezon": 32, "attribut": [32, 33, 40, 110, 235, 530, 531, 533, 538, 541, 542, 543, 619, 885, 887, 889, 896, 897, 898], "delta": [33, 92, 102, 518, 523, 546, 828, 882, 893], "32": [34, 37, 50, 57, 107, 143, 153, 235, 427, 537, 568, 619, 691, 718, 787, 803, 893], "bit": [34, 35, 36, 37, 38, 39, 49, 50, 51, 52, 407, 439, 537, 794, 831, 893], "sign": [36, 37, 38, 39, 327, 407, 466, 537, 717, 794, 858, 893], "integ": [36, 37, 38, 39, 49, 50, 51, 52, 111, 112, 142, 143, 235, 292, 331, 355, 407, 412, 413, 414, 415, 416, 417, 418, 419, 420, 452, 487, 507, 511, 537, 567, 568, 619, 635, 636, 675, 721, 745, 794, 804, 813, 844, 893], "inner": [40, 46, 156, 235, 269, 306, 537, 572, 611, 619, 652, 691, 893], "union": [40, 47, 55, 62, 63, 86, 125, 127, 130, 141, 160, 161, 163, 165, 167, 169, 176, 184, 190, 192, 203, 205, 207, 212, 215, 235, 365, 484, 485, 486, 487, 488, 490, 491, 492, 493, 497, 498, 503, 507, 511, 512, 513, 516, 520, 522, 525, 526, 537, 552, 559, 560, 566, 585, 591, 594, 598, 608, 612, 619, 691, 759, 813, 893], "datatypeclass": [40, 47, 86, 486, 487, 491, 503, 511, 512, 525], "timedelta": [40, 65, 142, 143, 207, 235, 312, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 333, 334, 335, 337, 338, 341, 412, 413, 414, 415, 416, 418, 419, 420, 490, 537, 567, 568, 619, 704, 706, 711, 717, 720, 725, 775, 778, 783, 784, 893], "tupl": [40, 100, 120, 154, 180, 181, 185, 214, 235, 409, 537, 585, 594, 619, 796, 893], "nest": [40, 46, 129, 235, 546, 734, 893], "arrai": [40, 78, 82, 90, 91, 129, 195, 199, 235, 261, 271, 272, 273, 274, 275, 278, 279, 287, 293, 294, 295, 299, 300, 301, 302, 303, 380, 412, 413, 415, 418, 419, 420, 424, 440, 442, 445, 446, 447, 492, 502, 537, 644, 654, 655, 656, 657, 658, 661, 662, 669, 678, 679, 680, 684, 685, 686, 687, 691, 734, 774, 799, 800, 802, 805, 806, 807, 814, 819, 832, 834, 837, 838, 839, 871, 875, 883, 893], "within": [40, 108, 109, 157, 235, 573, 619], "wrap": [42, 102], "arbitrari": [42, 112], "python": [42, 65, 90, 91, 107, 120, 154, 181, 197, 217, 235, 247, 311, 382, 486, 537, 613, 628, 697, 704, 705, 706, 711, 874, 893], "queri": [43, 62, 94, 100, 101, 104, 105, 106, 131, 158, 171, 235, 282, 447, 552, 554, 555, 560, 569, 576, 585, 594, 610, 613, 619, 627, 839, 893, 899], "pars": [43, 90, 91, 93, 101, 104, 105, 452, 463, 507, 844, 855], "given": [43, 45, 55, 64, 65, 78, 80, 81, 82, 84, 88, 90, 91, 101, 110, 111, 112, 113, 116, 120, 129, 171, 180, 186, 187, 235, 262, 276, 334, 342, 349, 379, 405, 408, 409, 412, 413, 415, 418, 419, 420, 423, 425, 426, 446, 463, 477, 484, 537, 584, 592, 593, 613, 619, 628, 645, 659, 724, 733, 734, 740, 773, 785, 792, 796, 799, 800, 802, 805, 806, 807, 810, 816, 817, 838, 855, 878, 884, 893], "transform": [43, 120, 235, 382, 464, 465, 537], "lf": [45, 558, 563, 590, 606, 619], "under": [45, 56, 57, 58, 59, 530, 531, 533, 538, 541, 542, 543, 885, 887, 889, 896, 897, 898], "add": [45, 91, 120, 131, 142, 213, 235, 402, 469, 501, 529, 537, 567, 572, 609, 610, 619, 627, 893], "context": [46, 167, 235, 242, 247, 264, 352, 389, 434, 435, 481, 486, 494, 504, 507, 522, 536, 537, 546, 609, 619, 647], "manag": [46, 546], "categor": [46, 85, 115, 156, 235, 291, 476, 537, 673, 674, 877, 893], "temporarili": [46, 142, 143, 235, 567, 568, 619], "cach": [46, 62, 94, 101, 104, 106, 115, 412, 413, 414, 415, 416, 418, 419, 420, 463, 537, 552, 560, 585, 594, 619, 855], "categori": [46, 64, 115, 291, 674], "until": [46, 158, 235], "finish": [46, 67, 131, 235, 627, 893], "global": [46, 112, 115], "invalid": [46, 90, 91, 101, 447, 839], "outermost": 46, "exit": [46, 117], "df1": [46, 55, 63, 108, 131, 137, 209, 235], "color": [46, 217, 613], "red": [46, 217, 613], "green": [46, 217, 613], "blue": 46, "orang": [46, 123, 218, 219, 221, 222, 223, 225, 227, 228, 235], "uint8": [46, 110, 302, 303, 470, 537, 686, 687, 864, 893], "df2": [46, 55, 63, 108, 131, 137, 209, 235], "yellow": 46, "black": [46, 120, 235], "join": [46, 55, 62, 157, 235, 360, 399, 537, 552, 560, 573, 585, 594, 609, 619], "succe": [46, 90, 91, 101], "df_join": 46, "cat": [46, 64, 439, 464, 465, 476, 493, 533, 537, 831, 889], "u8": [46, 85, 198, 235, 872, 893], "sequenc": [47, 55, 62, 63, 78, 80, 81, 82, 84, 87, 111, 112, 113, 125, 127, 130, 131, 141, 142, 143, 156, 157, 163, 167, 169, 171, 172, 190, 198, 203, 204, 205, 206, 207, 212, 215, 235, 346, 365, 382, 484, 485, 486, 488, 490, 491, 492, 493, 496, 497, 498, 503, 505, 507, 512, 513, 516, 520, 522, 525, 526, 537, 559, 566, 567, 568, 572, 573, 584, 598, 603, 608, 612, 619, 627, 691, 759, 813, 893], "map": [47, 80, 81, 90, 91, 94, 95, 98, 99, 101, 104, 120, 128, 154, 176, 180, 181, 196, 235, 330, 335, 383, 481, 486, 525, 537, 558, 588, 619, 720, 725], "composit": 47, "make": [47, 63, 78, 83, 90, 91, 94, 98, 100, 104, 106, 141, 142, 143, 164, 167, 175, 207, 235, 336, 344, 345, 408, 459, 466, 537, 566, 567, 568, 582, 619, 726, 730, 736, 737, 851, 858, 893], "up": [47, 100, 154, 157, 181, 197, 235, 292, 466, 537, 572, 573, 577, 619, 675, 858, 893], "dai": [48, 65, 142, 143, 155, 157, 207, 235, 314, 317, 324, 327, 328, 329, 330, 334, 335, 337, 338, 341, 412, 413, 414, 415, 416, 418, 419, 420, 499, 500, 501, 537, 567, 568, 573, 619, 717, 718, 720, 725, 728], "unsign": [49, 50, 51, 52, 407, 537, 794, 893], "could": [53, 67, 127, 142, 235, 290, 496, 505, 537, 557, 567, 619, 672, 893], "determin": [53, 55, 63, 81, 84, 90, 91, 93, 98, 106, 120, 136, 142, 143, 154, 155, 203, 207, 235, 282, 291, 389, 408, 412, 413, 414, 415, 416, 418, 419, 420, 432, 488, 537, 567, 568, 619, 665, 674, 824, 893], "static": [53, 613], "utf": 54, "intern": [55, 60, 65, 93, 154, 180, 196, 235, 354, 487, 498, 507, 513, 516, 521, 525, 526, 537, 641, 673, 694, 810, 829, 893], "revers": [55, 129, 190, 235, 256, 258, 278, 299, 300, 301, 302, 303, 383, 402, 405, 424, 434, 435, 469, 477, 488, 537, 598, 619, 637, 640, 661, 684, 685, 686, 687, 766, 792, 814, 826, 878, 893], "uniqu": [55, 110, 111, 113, 152, 167, 226, 235, 257, 364, 372, 395, 463, 479, 481, 517, 537, 619, 639, 689, 757, 767, 781, 855, 880, 881, 893], "kei": [55, 61, 142, 157, 164, 169, 172, 176, 179, 235, 567, 573, 582, 588, 589, 619], "contain": [55, 61, 80, 83, 92, 102, 108, 155, 167, 172, 235, 247, 365, 440, 443, 445, 446, 447, 460, 461, 537, 585, 619, 780, 832, 835, 837, 838, 839, 852, 853, 871, 893], "have": [55, 79, 90, 91, 93, 112, 113, 115, 131, 154, 175, 181, 197, 235, 304, 343, 344, 345, 390, 405, 463, 537, 594, 610, 619, 627, 688, 696, 735, 736, 737, 747, 792, 855, 893], "inject": 55, "fill": [55, 63, 88, 116, 132, 133, 187, 206, 235, 284, 300, 303, 349, 350, 351, 356, 360, 412, 413, 415, 418, 419, 420, 426, 449, 455, 466, 506, 537, 561, 562, 593, 609, 619, 740, 741, 742, 785, 799, 800, 802, 805, 806, 807, 817, 841, 847, 858, 893], "non": [55, 155, 163, 235, 400, 411, 412, 413, 414, 415, 416, 418, 419, 420, 440, 446, 490, 493, 537, 581, 619, 665, 787, 798, 799, 800, 801, 802, 803, 805, 806, 807, 832, 838, 875, 893], "each": [55, 91, 105, 108, 109, 111, 120, 140, 155, 157, 214, 217, 218, 220, 229, 235, 247, 268, 280, 330, 335, 405, 446, 459, 460, 486, 537, 573, 585, 613, 614, 615, 619, 651, 663, 676, 720, 725, 792, 838, 851, 852, 863, 893], "sort": [55, 56, 108, 141, 142, 143, 157, 164, 169, 171, 172, 207, 215, 220, 229, 235, 256, 258, 291, 352, 424, 435, 481, 483, 488, 537, 555, 567, 568, 573, 582, 584, 585, 594, 614, 615, 619, 637, 640, 674, 766, 814, 879, 881, 893], "origin": [55, 90, 91, 204, 235, 373, 407, 440, 445, 446, 447, 449, 455, 466, 537, 603, 619, 832, 837, 838, 839, 841, 847, 858], "order": [55, 81, 108, 141, 142, 143, 169, 171, 172, 182, 204, 207, 235, 256, 258, 291, 405, 422, 423, 424, 434, 435, 468, 478, 479, 488, 537, 566, 567, 568, 595, 596, 598, 603, 619, 637, 640, 674, 766, 792, 797, 809, 810, 814, 861, 879, 880, 893], "unless": [55, 80, 235, 883, 893], "case": [55, 78, 80, 81, 82, 84, 106, 120, 131, 142, 143, 154, 235, 382, 389, 390, 529, 537, 567, 568, 619, 627, 893], "final": [55, 106, 560, 619], "doe": [55, 74, 78, 80, 81, 82, 84, 90, 91, 92, 93, 101, 102, 103, 108, 109, 131, 155, 180, 181, 211, 212, 235, 336, 339, 468, 479, 504, 537, 560, 566, 577, 607, 608, 619, 627, 726, 729, 747, 819, 883, 893], "receiv": [55, 120, 171, 235, 584, 619], "now": [55, 143, 235, 568, 619], "ha": [55, 102, 119, 207, 235, 247, 304, 373, 390, 477, 486, 537, 550, 613, 619, 677, 688, 747, 758, 878, 893], "whose": [55, 157, 172, 235, 346, 503, 537, 573, 619], "post": 55, "constrain": 55, "newli": 55, "descend": [55, 190, 235, 256, 258, 424, 537, 598, 619, 637, 640, 766, 814, 893], "singl": [55, 63, 90, 91, 100, 101, 111, 127, 131, 138, 180, 190, 212, 215, 235, 281, 327, 352, 382, 406, 409, 438, 483, 486, 491, 512, 521, 537, 557, 598, 608, 612, 619, 627, 664, 717, 793, 796, 830, 871, 893], "boolean": [55, 60, 134, 136, 235, 244, 245, 262, 285, 352, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 483, 537, 563, 619, 625, 626, 638, 645, 667, 743, 752, 754, 756, 757, 759, 760, 761, 762, 763, 764, 767, 788, 789, 812, 831, 884, 893], "associ": 55, "2022": [55, 65, 107, 124, 140, 235, 311, 463, 501, 507, 697, 703, 855], "x": [55, 90, 91, 100, 101, 111, 112, 129, 147, 150, 152, 156, 163, 235, 247, 261, 269, 357, 382, 408, 429, 432, 459, 476, 498, 526, 537, 572, 577, 581, 597, 619, 624, 628, 742, 768, 821, 824, 851, 877, 893], "y": [55, 111, 112, 129, 150, 152, 156, 163, 235, 261, 269, 333, 408, 463, 498, 526, 537, 572, 581, 597, 619, 624, 723, 855, 893], "12": [55, 64, 65, 142, 143, 157, 207, 235, 302, 311, 315, 317, 324, 329, 330, 335, 341, 400, 427, 499, 500, 537, 567, 568, 569, 573, 576, 594, 601, 619, 628, 697, 714, 720, 725, 808, 893], "df3": [55, 235], "set_tbl_format": 55, "09": [55, 143, 235, 311, 317, 568, 619, 698], "01": [55, 65, 124, 140, 142, 143, 207, 235, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 463, 501, 567, 568, 619, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 855], "02": [55, 65, 140, 142, 143, 207, 235, 309, 311, 314, 315, 316, 322, 323, 324, 331, 332, 334, 337, 339, 421, 501, 537, 567, 568, 619, 695, 697, 700, 701, 702, 704, 705, 706, 707, 709, 711, 712, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730], "03": [55, 65, 142, 143, 207, 235, 309, 310, 311, 313, 314, 316, 323, 324, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 567, 568, 619, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 709, 711, 713, 714, 715, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730], "af1": 55, "af2": 55, "af3": 55, "keep": [55, 90, 91, 101, 169, 204, 207, 235, 373, 490, 537, 603, 619], "easili": 55, "calcul": [55, 142, 235, 263, 305, 343, 344, 345, 374, 381, 417, 432, 480, 537, 567, 619, 646, 690, 735, 736, 737, 770, 804, 824, 828, 882, 893], "wise": [55, 136, 235, 248, 249, 250, 251, 252, 253, 296, 297, 347, 380, 429, 430, 431, 474, 475, 496, 497, 505, 520, 537, 629, 630, 631, 632, 633, 634, 682, 683, 738, 774, 821, 822, 823, 868, 869, 893], "dot": [55, 537, 594, 619, 893], "product": [55, 170, 235, 302, 306, 537, 686, 691, 893], "fill_nul": [55, 132, 235, 463, 537, 561, 609, 619, 855, 893], "sum": [55, 129, 136, 141, 143, 153, 172, 215, 235, 247, 282, 302, 303, 342, 352, 399, 412, 413, 415, 418, 419, 420, 483, 484, 496, 498, 505, 513, 516, 537, 552, 555, 560, 566, 568, 585, 594, 619, 686, 687, 733, 734, 799, 800, 802, 805, 806, 807, 893], "167": 55, "47": 55, "callabl": [56, 57, 58, 59, 101, 120, 136, 171, 217, 235, 247, 282, 382, 383, 411, 486, 496, 497, 505, 512, 520, 537, 577, 584, 613, 619, 628, 665, 798, 893], "decor": [56, 57, 58, 59, 112, 113], "access": [56, 57, 58, 59, 154, 180, 181, 235, 609, 619], "by_first_letter_of_column_nam": 56, "f": [56, 91, 102, 120, 124, 140, 155, 159, 195, 203, 206, 217, 235, 247, 282, 382, 383, 427, 444, 463, 486, 492, 496, 497, 505, 512, 520, 537, 577, 613, 619, 665, 836, 855], "fromkei": [56, 58], "by_first_letter_of_column_valu": 56, "starts_with": [56, 439, 443, 835], "slice": [56, 62, 129, 145, 155, 193, 235, 268, 280, 411, 412, 413, 414, 415, 416, 418, 419, 420, 537, 552, 560, 577, 585, 594, 595, 596, 619, 651, 663, 734, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "to_seri": [56, 60, 235, 282, 665], "xx": [56, 58], "xy": [56, 58], "yy": [56, 58], "yz": [56, 58], "schema": [56, 57, 58, 63, 75, 78, 80, 81, 82, 84, 90, 91, 95, 99, 101, 105, 111, 112, 120, 121, 122, 128, 129, 164, 167, 235, 282, 389, 490, 525, 550, 551, 558, 577, 582, 611, 613, 619, 681, 893], "a1": [56, 58], "a2": [56, 58], "b1": [56, 58], "b2": [56, 58], "pow_n": 57, "powersofn": 57, "next": [57, 284, 405, 537, 792, 893], "p": [57, 171, 235, 584, 619], "ceil": [57, 537, 893], "previou": [57, 117, 400, 537, 787, 893], "floor": [57, 537, 893], "nearest": [57, 157, 174, 227, 235, 292, 355, 404, 416, 519, 537, 573, 586, 619, 675, 745, 751, 791, 803, 893], "24": [57, 120, 129, 143, 235, 302, 304, 316, 537, 568, 619, 688, 702, 893], "55": 57, "001": [57, 318, 319, 321, 326, 501, 708, 710, 716], "next_pow2": 57, "prev_pow2": 57, "nearest_pow2": 57, "128": [57, 787, 893], "split_by_column_dtyp": 58, "dtype": [58, 78, 80, 82, 84, 88, 90, 91, 101, 110, 111, 112, 113, 116, 119, 142, 143, 157, 200, 235, 247, 248, 249, 250, 251, 252, 253, 256, 258, 259, 260, 261, 269, 281, 290, 293, 294, 295, 296, 297, 302, 303, 313, 316, 319, 321, 323, 326, 332, 339, 346, 348, 381, 382, 407, 408, 412, 413, 414, 415, 416, 418, 419, 420, 427, 430, 431, 438, 457, 470, 472, 474, 475, 476, 480, 481, 486, 487, 491, 492, 494, 503, 507, 511, 512, 525, 537, 567, 568, 573, 619, 642, 643, 644, 652, 664, 672, 677, 678, 679, 680, 686, 687, 699, 702, 708, 710, 713, 716, 722, 729, 734, 739, 755, 797, 811, 818, 830, 849, 855, 864, 875, 876, 877, 893], "collect": [58, 62, 102, 103, 158, 195, 235, 247, 399, 487, 492, 507, 521, 525, 537, 556, 557, 559, 560, 561, 562, 563, 564, 566, 567, 569, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 583, 584, 586, 588, 589, 591, 592, 593, 597, 598, 599, 600, 601, 602, 603, 605, 608, 609, 610, 613, 619], "31": [59, 107, 311, 312, 313, 324, 337, 463, 499, 500, 507, 697, 698, 699, 855], "42": [59, 143, 144, 235, 568, 619, 748, 893], "961": 59, "1764": 59, "4160": 59, "condit": [60, 127, 134, 180, 235, 443, 461, 557, 563, 619], "eager": [60, 142, 206, 235, 487, 507, 511, 521, 525, 536, 546, 567, 619], "indic": [60, 85, 89, 90, 91, 94, 98, 101, 110, 111, 113, 142, 143, 235, 281, 363, 366, 367, 369, 370, 371, 412, 413, 414, 415, 416, 418, 419, 420, 423, 429, 472, 537, 567, 568, 619, 664, 756, 760, 761, 762, 763, 764, 810, 821, 866, 893], "where": [60, 100, 127, 131, 154, 163, 181, 211, 235, 338, 342, 423, 432, 523, 529, 537, 557, 581, 619, 627, 638, 728, 733, 810, 824, 828, 882, 884, 893], "evalu": [60, 132, 134, 157, 212, 235, 304, 359, 361, 365, 485, 487, 502, 525, 537, 563, 570, 572, 573, 607, 608, 619, 638, 688, 884, 893], "eagerli": [60, 521], "oppos": 60, "lazili": [60, 90, 91, 101, 102, 104, 105, 106], "u32": [60, 142, 168, 213, 218, 226, 228, 235, 242, 254, 255, 256, 257, 258, 259, 260, 271, 298, 299, 312, 315, 318, 322, 324, 328, 329, 331, 337, 338, 376, 395, 398, 405, 423, 440, 448, 451, 476, 479, 494, 517, 537, 567, 610, 619, 637, 638, 639, 654, 672, 698, 701, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 792, 832, 840, 843, 877, 880, 881, 893], "build": [61, 79], "wa": 61, "compil": [61, 259, 260, 642, 643], "gate": 61, "info": [61, 92, 102, 107], "otherwis": [61, 164, 184, 235, 286, 293, 294, 295, 343, 344, 345, 407, 439, 441, 529, 537, 582, 591, 619, 628, 668, 678, 679, 680, 735, 736, 737, 794, 812, 813, 831, 833, 893], "version": [61, 92, 102, 107, 211, 235, 348, 520, 537, 607, 619, 739, 893], "follow": [61, 90, 91, 92, 101, 102, 120, 142, 143, 157, 171, 207, 235, 247, 327, 330, 335, 405, 412, 413, 414, 415, 416, 418, 419, 420, 486, 530, 531, 533, 537, 538, 541, 542, 543, 566, 567, 568, 573, 584, 619, 717, 720, 725, 792, 812, 813, 885, 887, 889, 893, 896, 897, 898, 900], "depend": [61, 107, 247, 259, 260, 389, 405, 486, 504, 507, 537, 642, 643, 792, 893], "host": [61, 90, 94, 98, 104, 106], "git": 61, "lazy_fram": 62, "type_coercion": [62, 552, 554, 560, 585, 594, 595, 596, 619], "predicate_pushdown": [62, 552, 554, 560, 577, 585, 594, 595, 596, 619], "projection_pushdown": [62, 552, 554, 560, 577, 585, 594, 595, 596, 619], "simplify_express": [62, 552, 554, 560, 585, 594, 595, 596, 619], "no_optim": [62, 552, 560, 577, 585, 595, 596, 619], "slice_pushdown": [62, 552, 554, 560, 577, 585, 594, 595, 596, 619], "common_subplan_elimin": [62, 552, 554, 560, 585, 594, 619], "multipl": [62, 63, 90, 91, 101, 104, 106, 111, 113, 129, 131, 134, 142, 147, 155, 169, 172, 184, 190, 212, 215, 235, 281, 346, 387, 390, 394, 409, 412, 413, 414, 415, 416, 418, 419, 420, 435, 488, 496, 497, 503, 505, 512, 520, 529, 537, 556, 563, 567, 591, 598, 608, 612, 619, 627, 664, 734, 779, 796, 893], "graph": [62, 158, 235, 570, 609, 619], "parallel": [62, 63, 87, 98, 100, 106, 142, 157, 158, 171, 235, 264, 304, 537, 546, 567, 572, 573, 619, 647, 688, 893], "threadpool": 62, "coercion": [62, 408, 537, 552, 560, 585, 594, 595, 596, 619], "optim": [62, 98, 101, 104, 105, 106, 154, 158, 171, 175, 181, 235, 552, 554, 555, 560, 577, 585, 594, 595, 596, 610, 619], "predic": [62, 101, 103, 104, 105, 106, 134, 180, 235, 352, 483, 529, 537, 552, 560, 563, 577, 585, 588, 594, 595, 596, 610, 619, 743, 812, 813, 893], "pushdown": [62, 552, 560, 577, 585, 588, 594, 595, 596, 610, 619, 812, 813, 893], "project": [62, 101, 102, 104, 105, 106, 247, 434, 435, 537, 552, 560, 577, 585, 588, 594, 595, 596, 611, 619], "simplifi": [62, 552, 560, 585, 594, 595, 596, 619], "turn": [62, 90, 91, 101, 115, 481, 537, 552, 560, 577, 585, 595, 596, 619], "off": [62, 90, 91, 101, 115, 481, 537, 552, 560, 577, 585, 595, 596, 619], "Will": [62, 203, 235, 513, 516, 552, 560, 585, 594, 619, 893], "try": [62, 75, 76, 90, 91, 93, 94, 98, 101, 104, 106, 463, 552, 560, 585, 594, 619, 855], "branch": [62, 552, 560, 585, 594, 619], "subplan": [62, 552, 560, 585, 594, 619], "occur": [62, 394, 405, 537, 552, 560, 585, 594, 619, 779, 792, 893], "part": [62, 78, 459, 460, 552, 560, 585, 594, 609, 619, 698, 701, 707, 709, 712, 714, 715, 721, 731, 851, 852], "fashion": [62, 156, 235, 552, 560, 585, 594, 619], "alpha": [62, 343, 344, 345, 537, 552, 560, 585, 594, 619, 735, 736, 737, 893], "item": [63, 91, 182, 235, 262, 267, 269, 348, 422, 460, 537, 645, 650, 652, 739, 809, 852, 893], "rechunk": [63, 78, 83, 90, 91, 94, 98, 101, 104, 105, 106, 131, 235, 537, 627, 676, 780, 893], "concatmethod": 63, "vertic": [63, 131, 206, 209, 235, 438, 513, 830], "aggreg": [63, 90, 91, 136, 141, 142, 160, 161, 162, 165, 167, 172, 173, 174, 191, 192, 206, 208, 215, 216, 219, 221, 235, 242, 352, 378, 382, 399, 411, 412, 413, 414, 415, 416, 418, 419, 420, 481, 496, 497, 498, 505, 510, 513, 516, 520, 526, 537, 567, 577, 578, 579, 580, 583, 586, 599, 600, 605, 612, 619, 798, 799, 800, 802, 805, 806, 807, 893], "concaten": [63, 136, 171, 235, 584, 619, 676, 780, 893], "sure": [63, 78, 83, 90, 91, 94, 100, 141, 175, 235, 487, 566, 619], "contigu": [63, 78, 83, 90, 91, 94, 101, 104, 105, 106, 175, 235], "diagon": [63, 203, 235], "strategi": [63, 90, 110, 111, 112, 113, 133, 142, 156, 157, 166, 235, 282, 351, 537, 562, 567, 572, 573, 619, 665, 742, 893], "vstack": [63, 131, 235], "find": [63, 135, 235, 423, 488, 537, 810, 893], "miss": [63, 78, 90, 91, 101, 132, 235, 284, 356, 360, 367, 369, 523, 537, 561, 619, 883, 893], "stack": [63, 147, 209, 235], "length": [63, 64, 88, 111, 116, 142, 143, 189, 235, 277, 304, 330, 335, 390, 411, 412, 413, 414, 415, 416, 418, 419, 420, 433, 449, 451, 455, 457, 466, 487, 537, 567, 568, 585, 597, 619, 660, 665, 676, 688, 697, 720, 725, 771, 785, 798, 799, 800, 801, 802, 803, 805, 806, 807, 825, 841, 843, 847, 849, 858, 893], "don": [63, 206, 235, 247, 264, 304, 486, 537, 647, 688, 811, 883, 893], "t": [63, 93, 101, 120, 171, 206, 235, 247, 264, 304, 342, 343, 344, 345, 450, 456, 462, 463, 486, 529, 537, 584, 619, 647, 688, 733, 735, 736, 737, 811, 842, 848, 854, 855, 883, 893], "match": [63, 74, 78, 80, 81, 82, 84, 108, 109, 133, 157, 180, 235, 388, 439, 440, 443, 446, 447, 450, 453, 454, 456, 461, 462, 463, 562, 573, 619, 831, 832, 835, 838, 839, 842, 845, 846, 848, 853, 854, 855], "relev": 63, "execut": [63, 158, 235, 264, 549, 585, 619, 647], "df_h1": 63, "l1": 63, "l2": 63, "df_h2": 63, "r1": 63, "r2": 63, "r3": 63, "df_d1": 63, "df_d2": 63, "bin": [64, 452, 531, 844, 887], "label": [64, 78, 411, 412, 413, 414, 415, 416, 418, 419, 420, 537, 585, 619, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "break_point_label": 64, "break_point": 64, "category_label": 64, "discret": [64, 263, 305, 342, 537, 646, 690, 733, 893], "creat": [64, 65, 78, 82, 84, 102, 111, 112, 113, 121, 122, 142, 143, 168, 172, 207, 211, 212, 235, 311, 330, 335, 406, 457, 481, 487, 492, 499, 500, 501, 537, 550, 551, 554, 555, 567, 568, 607, 608, 619, 677, 681, 693, 697, 720, 725, 785, 793, 849, 875, 893], "assign": [64, 111, 142, 235, 405, 459, 460, 537, 567, 619, 792, 851, 852, 893], "must": [64, 78, 79, 80, 92, 102, 142, 143, 157, 164, 180, 235, 282, 346, 382, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 577, 582, 619, 893], "len": [64, 111, 112, 155, 235, 299, 409, 449, 455, 466, 537, 796, 841, 847, 858, 893], "breakpoint": 64, "experiment": [64, 103, 206, 235, 304, 330, 412, 413, 414, 415, 416, 418, 419, 420, 537, 688, 720, 893], "being": [64, 90, 91, 101, 103, 206, 235, 304, 330, 412, 413, 414, 415, 416, 418, 419, 420, 502, 529, 537, 688, 720, 893], "consid": [64, 90, 91, 101, 103, 127, 137, 163, 204, 206, 215, 235, 293, 294, 295, 304, 330, 412, 413, 414, 415, 416, 418, 419, 420, 434, 496, 505, 537, 557, 569, 576, 581, 603, 619, 678, 679, 680, 688, 720, 811, 812, 813, 893], "break": [64, 103, 206, 235, 304, 330, 412, 413, 414, 415, 416, 418, 419, 420, 537, 688, 720, 893], "30": [64, 131, 142, 147, 171, 177, 178, 196, 212, 235, 254, 255, 256, 258, 305, 311, 313, 317, 329, 330, 335, 341, 357, 427, 537, 567, 584, 608, 619, 697, 699, 720, 725], "inf": [64, 112, 113, 253, 363, 366, 537, 634, 756, 760, 787, 893], "low": [65, 142, 235, 331, 487, 567, 619], "high": [65, 142, 235, 331, 487, 567, 619], "interv": [65, 142, 143, 207, 235, 330, 331, 335, 361, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 619, 698, 700, 701, 707, 709, 712, 714, 715, 718, 719, 720, 721, 723, 724, 725, 727, 728, 731], "close": [65, 142, 143, 235, 361, 412, 413, 414, 415, 416, 418, 419, 420, 432, 537, 567, 568, 619, 824, 893], "closedinterv": [65, 142, 143, 235, 361, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 619], "lower": [65, 101, 142, 174, 227, 235, 361, 381, 404, 407, 416, 487, 519, 537, 560, 567, 586, 619, 791, 794, 803, 893], "bound": [65, 90, 91, 129, 142, 235, 267, 281, 361, 381, 480, 487, 537, 567, 619, 650, 664, 734, 893], "upper": [65, 90, 91, 129, 142, 235, 361, 480, 487, 537, 567, 619, 734, 893], "period": [65, 142, 143, 186, 187, 235, 276, 330, 335, 343, 344, 345, 400, 425, 426, 537, 567, 568, 592, 593, 619, 659, 720, 725, 735, 736, 737, 787, 816, 817, 893], "It": [65, 120, 164, 171, 217, 235, 247, 282, 336, 389, 537, 577, 582, 613, 619, 726, 812, 813, 893], "like": [65, 79, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 156, 235, 264, 392, 405, 513, 516, 526, 537, 560, 587, 619, 647, 792, 893], "durat": [65, 157, 207, 235, 313, 316, 319, 321, 323, 326, 332, 339, 476, 537, 573, 619, 699, 702, 708, 710, 713, 716, 722, 729, 877, 893], "3d12h4m25": [65, 142, 143, 157, 207, 235, 330, 335, 567, 568, 573, 619, 720, 725], "hour": [65, 142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 500, 501, 537, 567, 568, 573, 619, 717, 720, 725], "minut": [65, 142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 500, 501, 537, 567, 568, 573, 619, 717, 720, 725], "tempor": [65, 142, 143, 154, 181, 197, 235, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 619], "window": [65, 142, 143, 235, 304, 330, 335, 343, 344, 345, 399, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 492, 537, 567, 568, 619, 688, 720, 725, 735, 736, 737, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "granular": 65, "finer": 65, "than": [65, 77, 82, 84, 90, 91, 103, 112, 113, 120, 141, 154, 157, 180, 181, 182, 206, 217, 235, 247, 373, 422, 432, 434, 449, 455, 460, 466, 513, 516, 523, 526, 537, 566, 573, 595, 596, 613, 619, 809, 824, 841, 847, 852, 858, 893], "1d": [65, 142, 143, 157, 207, 235, 309, 316, 323, 327, 330, 335, 339, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 695, 700, 702, 704, 705, 706, 711, 713, 717, 720, 723, 724, 725, 728, 729], "also": [65, 81, 112, 113, 128, 141, 142, 143, 164, 167, 190, 212, 235, 300, 303, 310, 346, 360, 405, 412, 413, 414, 415, 416, 418, 419, 420, 496, 497, 505, 507, 520, 536, 537, 567, 568, 582, 598, 608, 609, 619, 696, 792, 893], "permut": 65, "1mo": [65, 142, 143, 157, 207, 235, 310, 313, 327, 330, 333, 335, 336, 340, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 696, 699, 714, 717, 718, 719, 720, 725, 727, 730], "dtrang": 65, "1985": 65, "00": [65, 142, 157, 207, 235, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 463, 501, 567, 573, 619, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 855], "04": [65, 103, 142, 207, 235, 310, 311, 312, 313, 316, 322, 323, 324, 328, 330, 331, 332, 333, 336, 337, 338, 339, 340, 463, 501, 567, 619, 696, 699, 702, 707, 709, 712, 713, 714, 715, 719, 721, 722, 723, 727, 728, 729, 730, 855], "05": [65, 103, 108, 109, 157, 207, 235, 310, 311, 313, 331, 333, 336, 340, 573, 619, 696, 697, 698, 699, 720, 725, 728, 730], "07": [65, 310, 311, 312, 328, 330, 335, 338, 463, 507, 697, 698, 728, 855], "08": [65, 108, 109, 143, 235, 311, 330, 463, 501, 568, 619, 720, 725, 855], "zone": [65, 310, 336, 340, 696, 726, 730], "america": [65, 696], "new_york": [65, 696], "\u03bc": [65, 142, 143, 157, 207, 235, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 507, 567, 568, 573, 619, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731], "est": [65, 696], "encount": [66, 142, 235, 396, 397, 447, 496, 505, 523, 537, 567, 619, 783, 784, 839, 893], "error": [66, 90, 91, 101, 180, 235, 269, 281, 286, 290, 373, 439, 441, 447, 463, 537, 613, 652, 664, 668, 672, 831, 833, 839, 855, 893], "duplic": [68, 150, 156, 157, 204, 235, 362, 488, 537, 572, 573, 603, 619, 754, 893], "certain": [69, 92, 102, 148, 207, 235, 346, 503, 537, 552, 585, 595, 596, 619, 893], "structur": [70, 75, 76, 131, 171, 235, 584, 619, 627, 893], "least": [71, 112, 400, 481, 537, 787, 881, 893], "expect": [71, 74, 77, 247, 486, 537, 575, 577, 619], "unexpect": [73, 235], "caus": [73, 79, 90, 91, 101, 119, 131, 235, 627, 893], "panic": 73, "combin": [75, 76, 142, 143, 144, 157, 207, 215, 235, 335, 450, 456, 462, 567, 568, 573, 594, 619, 725, 842, 848, 854], "mismatch": 75, "incompat": 76, "pa": [78, 102, 103, 235], "chunkedarrai": [78, 166, 235, 691, 893], "schema_overrid": [78, 80, 81, 82, 83, 84, 155, 235], "schemadict": [78, 80, 81, 82, 83, 84, 101, 183, 235, 577, 590, 613, 619], "zero": [78, 79, 89, 90, 91, 94, 98, 119, 133, 154, 180, 195, 235, 350, 351, 423, 432, 466, 537, 562, 619, 665, 742, 824, 858, 871, 875, 893], "copi": [78, 79, 119, 121, 122, 155, 195, 211, 212, 235, 466, 550, 551, 607, 608, 619, 624, 677, 681, 693, 858, 871, 875, 893], "most": [78, 390, 394, 400, 460, 481, 537, 779, 787, 852, 881, 893], "closest": 78, "dimens": [78, 80, 82, 84, 235, 409, 537, 796, 893], "column_1": [78, 120, 203, 235], "pair": [78, 80, 81, 82, 84, 176, 235, 588, 619], "declar": [78, 80, 81, 82, 84, 235], "sever": [78, 80, 81, 82, 84, 235, 525], "wai": [78, 80, 81, 82, 84, 155, 171, 235, 584, 619], "As": [78, 80, 81, 82, 84, 93, 235, 521], "auto": [78, 80, 81, 82, 84, 98, 106, 203, 235], "automat": [78, 80, 81, 82, 84, 90, 91, 100, 101, 112, 113, 184, 212, 235, 450, 456, 462, 463, 591, 608, 619, 842, 848, 854, 855, 893], "equival": [78, 80, 81, 82, 84, 92, 102, 153, 167, 235, 451, 769, 843, 856, 857, 893], "form": [78, 80, 81, 82, 84, 154, 181, 206, 235, 400, 537, 787, 893], "suppli": [78, 80, 81, 82, 84, 180, 235], "here": [78, 80, 81, 82, 84, 92, 100, 102, 111, 112, 113, 235, 447, 839], "overwrit": [78, 80, 81, 82, 84, 90, 91, 101, 119, 235, 560, 619], "them": [78, 80, 81, 82, 84, 131, 142, 143, 157, 164, 207, 235, 269, 396, 397, 492, 537, 567, 568, 573, 582, 619, 627, 652, 783, 784, 893], "param": [78, 80, 81, 82, 84, 90, 91, 101, 112, 113, 180, 235], "overridden": [78, 80, 82, 84, 235], "construct": [78, 80, 81, 82, 83, 84, 235, 565, 587, 619, 893], "allow_copi": [79, 119], "interchang": [79, 119], "protocol": [79, 100, 119], "__dataframe__": 79, "convers": [79, 119, 155, 235, 463, 546, 730, 855, 874, 875, 893], "fail": [79, 92, 102, 119, 204, 235, 282, 463, 603, 619, 628, 855, 893], "detail": [79, 100, 108, 109, 119, 900], "latest": [79, 92, 102, 119, 356, 390, 537], "index": [79, 83, 86, 107, 119, 135, 142, 143, 148, 157, 172, 178, 180, 189, 201, 207, 213, 235, 242, 254, 255, 256, 257, 258, 259, 260, 267, 277, 281, 327, 412, 413, 414, 415, 416, 418, 419, 420, 423, 433, 445, 457, 472, 488, 537, 567, 568, 573, 597, 610, 619, 635, 636, 637, 638, 639, 640, 642, 643, 650, 660, 664, 717, 785, 810, 813, 825, 837, 849, 866, 893], "html": [79, 119], "throw": [79, 290, 447, 537, 672, 839, 893], "notimplementederror": 79, "from_panda": [79, 93], "from_arrow": 79, "effici": [79, 155, 235], "schemadefinit": [80, 81, 82, 235], "clone": [80, 81, 82, 83, 84, 121, 199, 200, 235, 550, 619, 677, 874, 875, 883, 893], "two": [80, 82, 84, 100, 136, 163, 164, 172, 202, 215, 216, 217, 235, 242, 306, 311, 434, 435, 472, 484, 495, 518, 523, 525, 537, 581, 582, 613, 619, 691, 697, 893], "dimension": [80, 82, 84, 235, 893], "infer_schema_length": [81, 84, 90, 91, 93, 101, 105, 235], "mani": [81, 84, 100, 131, 235, 627, 893], "scan": [81, 84, 90, 91, 98, 101, 102, 103, 104, 105, 106, 560, 569, 576, 619], "slow": [81, 84, 90, 91, 101, 304, 537, 688, 893], "NOT": [81, 108, 109, 468, 566, 619], "actual": [81, 93, 112, 113, 819, 893], "thei": [81, 108, 117, 158, 235, 346, 411, 537, 619, 798, 893], "appear": [81, 108, 479, 537, 880, 893], "typic": 81, "clearer": 81, "after": [81, 89, 90, 91, 94, 98, 101, 104, 105, 106, 131, 205, 234, 235, 405, 466, 537, 604, 619, 627, 696, 792, 858, 893], "load": [81, 92, 102, 235, 546, 569, 576, 619], "want": [81, 120, 131, 167, 235, 293, 294, 295, 352, 382, 412, 413, 414, 415, 416, 418, 419, 420, 496, 505, 537, 552, 569, 576, 619, 627, 678, 679, 680, 875, 893], "some": [81, 90, 91, 101, 127, 235, 557, 619, 759, 893], "_partial_": [81, 235], "omit": [81, 111, 112, 113, 167, 235], "similarli": 81, "ad": [81, 119, 142, 203, 211, 212, 235, 246, 349, 496, 497, 537, 567, 607, 608, 619, 740, 893], "partial": 81, "present": [81, 108, 112, 365, 537, 883, 893], "np": [82, 235, 756, 760, 761, 762, 798, 893], "ndarrai": [82, 134, 199, 235, 472, 537, 691, 810, 813, 866, 875, 893], "numpi": [82, 107, 134, 170, 199, 235, 396, 397, 472, 537, 756, 760, 761, 762, 783, 784, 798, 810, 866, 875, 883, 893], "columnar": [82, 84, 154, 181, 235], "interpret": [82, 84, 90, 91, 101, 235], "yield": [82, 84, 90, 91, 101, 129, 131, 203, 235, 627, 734, 893], "conclus": [82, 84, 235], "nan_to_non": 83, "panda": [83, 93, 107, 200, 235, 476, 537, 876, 877, 893], "datetimeindex": [83, 691, 893], "instal": [83, 90, 91, 94, 98, 100, 102, 107, 170, 199, 200, 235, 594, 619, 875, 893], "nan": [83, 108, 109, 112, 119, 132, 235, 307, 308, 350, 360, 367, 369, 370, 371, 384, 393, 396, 397, 523, 537, 561, 619, 630, 634, 692, 741, 761, 762, 783, 784, 798, 893], "convert": [83, 85, 92, 93, 102, 119, 196, 197, 198, 199, 200, 202, 235, 282, 463, 665, 855, 862, 863, 874, 875, 876, 883, 893], "pd": [83, 93, 235, 476, 537, 877, 893], "pd_df": 83, "pd_seri": 83, "dummi": [85, 198, 235, 872, 893], "subset": [85, 127, 167, 198, 204, 235, 557, 603, 619], "to_dummi": [85, 235, 893], "foo_1": [85, 198, 235], "foo_2": [85, 198, 235], "bar_3": [85, 198, 235], "bar_4": [85, 198, 235], "ham_a": [85, 198, 235], "ham_b": [85, 198, 235], "get": [86, 95, 99, 114, 123, 128, 138, 139, 142, 143, 145, 146, 150, 152, 159, 166, 180, 183, 185, 189, 193, 198, 210, 220, 229, 235, 242, 254, 255, 256, 257, 258, 266, 270, 271, 283, 299, 300, 301, 302, 303, 314, 353, 358, 362, 364, 372, 375, 377, 384, 385, 386, 389, 391, 393, 396, 397, 404, 433, 437, 448, 451, 470, 471, 478, 482, 504, 509, 513, 514, 515, 516, 524, 527, 528, 537, 553, 558, 564, 567, 568, 569, 574, 576, 590, 597, 601, 606, 614, 615, 619, 635, 636, 637, 638, 639, 640, 649, 653, 654, 666, 676, 684, 685, 686, 687, 700, 746, 749, 754, 757, 767, 772, 775, 777, 778, 780, 783, 784, 788, 789, 791, 825, 828, 840, 843, 865, 871, 872, 879, 882, 883, 893], "uint32": [86, 107, 129, 235, 256, 258, 259, 260, 271, 312, 315, 318, 320, 322, 324, 325, 328, 329, 331, 337, 338, 408, 440, 448, 451, 472, 476, 537, 638, 642, 643, 654, 672, 698, 701, 707, 709, 712, 714, 715, 718, 719, 721, 727, 728, 734, 811, 832, 877, 893], "regular": [86, 154, 180, 181, 207, 235, 346, 491, 503, 513, 516, 526, 537], "uint64": [86, 144, 235, 259, 260, 357, 407, 537, 642, 643, 748, 794, 893], "bigidx": 86, "read": [87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 131, 235, 382, 537, 560, 565, 587, 619, 627, 893], "over": [87, 90, 91, 92, 101, 102, 112, 120, 131, 141, 154, 155, 180, 181, 203, 214, 217, 235, 247, 304, 351, 360, 382, 383, 411, 412, 413, 414, 415, 416, 418, 419, 420, 486, 496, 497, 505, 512, 520, 537, 613, 627, 628, 688, 798, 799, 800, 802, 806, 893], "avail": [87, 92, 102, 111, 234, 405, 530, 531, 533, 536, 537, 538, 541, 542, 543, 546, 547, 560, 618, 619, 792, 885, 887, 889, 893, 896, 897, 898], "fetch": [87, 101, 158, 235, 550, 552, 569, 576, 604, 619], "ideal": 87, "read_csv_batch": [87, 547], "tpch": [87, 91], "tables_scale_100": [87, 91], "lineitem": [87, 91, 100], "tbl": [87, 91], "parse_d": [87, 90, 91, 101], "polarsdatatyp": [88, 90, 91, 95, 99, 110, 111, 112, 113, 116, 120, 128, 235, 247, 290, 346, 382, 537, 558, 619, 628, 672, 893], "new": [88, 116, 117, 120, 125, 127, 147, 148, 167, 168, 176, 177, 194, 206, 211, 212, 235, 243, 311, 348, 360, 383, 453, 454, 459, 460, 467, 468, 473, 537, 546, 557, 588, 602, 607, 608, 613, 619, 624, 628, 693, 697, 739, 785, 795, 845, 846, 851, 852, 859, 861, 867, 873, 884, 893], "In": [88, 92, 102, 106, 112, 113, 116, 120, 129, 131, 142, 143, 167, 235, 247, 389, 434, 435, 537, 567, 568, 619, 627, 734, 793, 893], "probabl": [88, 116, 342, 537, 733, 893], "n_row": [89, 90, 91, 94, 98, 101, 104, 105, 106, 155, 235, 560, 619], "accept": [89, 90, 91, 92, 94, 98, 190, 235], "start": [89, 90, 91, 94, 98, 101, 104, 105, 106, 141, 142, 158, 189, 207, 213, 235, 277, 289, 312, 314, 315, 317, 322, 324, 328, 329, 330, 331, 334, 335, 337, 338, 341, 346, 361, 433, 439, 443, 457, 461, 491, 496, 503, 505, 529, 537, 566, 567, 585, 597, 610, 619, 660, 671, 695, 696, 698, 700, 701, 707, 709, 712, 714, 715, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731, 825, 835, 849, 853, 893], "stop": [89, 90, 91, 94, 98, 101, 104, 105, 106, 312, 314, 315, 317, 322, 324, 328, 329, 330, 331, 334, 335, 337, 338, 341, 695, 696, 698, 700, 701, 707, 709, 712, 714, 715, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 730, 731], "textio": 90, "new_column": [90, 91, 93], "comment_char": [90, 91, 101], "quote_char": [90, 91, 101], "skip_row": [90, 91, 101], "missing_utf8_is_empty_str": [90, 91, 101], "ignore_error": [90, 91, 101], "n_thread": [90, 91], "8192": 90, "csvencod": [90, 91, 101], "low_memori": [90, 91, 98, 101, 105, 106], "storage_opt": [90, 92, 94, 98, 102, 104, 106], "skip_rows_after_head": [90, 91, 101], "row_count_nam": [90, 91, 94, 98, 101, 104, 105, 106], "row_count_offset": [90, 91, 94, 98, 101, 104, 105, 106], "sample_s": [90, 91], "eol_char": [90, 91, 101], "By": [90, 91, 93, 101, 157, 190, 235, 452, 511, 573, 619, 828, 844, 875, 882, 893], "we": [90, 91, 93, 101, 141, 157, 190, 212, 235, 264, 452, 511, 529, 573, 577, 598, 608, 619, 628, 647, 844, 893], "handler": [90, 91, 93], "g": [90, 91, 92, 93, 94, 98, 102, 104, 106, 206, 235, 346, 424, 427, 503, 537, 588, 619, 811, 814, 875, 893], "via": [90, 91, 93, 101, 104, 106, 154, 181, 212, 235, 608, 619], "builtin": [90, 91, 93], "open": [90, 91, 93, 94, 98, 104, 106], "stringio": [90, 91], "fsspec": [90, 91, 94, 98, 102, 104, 106, 107], "remot": [90, 91, 94, 98], "first": [90, 91, 93, 101, 105, 120, 140, 142, 145, 157, 159, 166, 171, 172, 193, 203, 204, 207, 220, 235, 256, 257, 258, 264, 267, 268, 304, 327, 330, 358, 364, 377, 423, 445, 447, 453, 454, 463, 488, 490, 496, 505, 509, 537, 552, 567, 569, 573, 576, 584, 603, 609, 614, 619, 637, 640, 647, 650, 651, 665, 688, 689, 717, 720, 749, 757, 772, 810, 837, 839, 845, 846, 855, 893], "dataset": [90, 91, 101, 103, 374, 537, 546, 770, 893], "autogener": [90, 91, 101], "column_x": [90, 91, 101], "enumer": [90, 91, 101, 155, 235], "everi": [90, 91, 101, 142, 194, 197, 207, 235, 259, 260, 263, 265, 267, 268, 277, 280, 299, 300, 301, 302, 303, 304, 330, 335, 348, 444, 473, 496, 497, 537, 560, 567, 602, 619, 642, 643, 646, 648, 650, 651, 660, 663, 684, 685, 686, 687, 688, 720, 725, 739, 836, 867, 893], "shorter": [90, 91], "remain": [90, 91, 101, 129, 141, 235, 247, 459, 460, 537, 566, 577, 619, 734, 851, 852, 893], "comment": [90, 91, 101], "instanc": [90, 91, 101, 112, 113, 131, 136, 235, 282, 290, 390, 412, 413, 414, 415, 416, 418, 419, 420, 496, 505, 537, 577, 610, 619, 627, 672, 893], "special": [90, 91, 101, 628, 893], "handl": [90, 91, 101, 103, 263, 305, 466, 537, 646, 690, 858, 893], "escap": [90, 91, 101], "dure": [90, 91, 101, 117, 131, 235, 627, 893], "provid": [90, 91, 92, 100, 101, 102, 112, 113, 184, 212, 235, 282, 286, 287, 441, 442, 445, 447, 507, 522, 546, 591, 595, 596, 608, 619, 668, 669, 833, 834, 837, 839, 900], "equal": [90, 91, 101, 108, 109, 115, 137, 142, 157, 164, 235, 411, 412, 413, 414, 415, 416, 418, 419, 420, 448, 449, 455, 466, 487, 537, 567, 573, 582, 619, 798, 799, 800, 801, 802, 803, 805, 806, 807, 811, 840, 841, 847, 858, 893], "would": [90, 91, 101, 256, 258, 267, 389, 405, 488, 537, 637, 640, 650, 792, 875, 893], "prefer": [90, 91, 92, 101, 102, 120, 131, 154, 181, 217, 235, 247, 411, 537, 613, 619, 627, 798, 893], "treat": [90, 91, 101, 439, 453, 454, 831, 845, 846], "check": [90, 91, 101, 108, 109, 137, 151, 153, 235, 244, 245, 262, 285, 288, 289, 361, 365, 439, 443, 461, 537, 577, 619, 625, 626, 645, 667, 670, 671, 752, 753, 755, 758, 759, 765, 766, 768, 769, 811, 831, 835, 853, 893], "might": [90, 91, 101, 389, 479, 537], "issu": [90, 91, 93, 101, 302, 303, 470, 537, 686, 687, 864, 893], "alwai": [90, 120, 217, 235, 247, 389, 537, 577, 613, 619], "physic": [90, 91, 157, 235, 291, 476, 537, 549, 572, 573, 619, 674, 877, 893], "cpu": [90, 91], "your": [90, 91, 108, 109, 154, 235, 463, 552, 569, 576, 577, 619, 855], "system": [90, 91], "done": [90, 91, 101, 103, 140, 157, 235, 246, 290, 449, 455, 537, 573, 598, 612, 619, 672, 841, 847, 893], "buffer": [90, 91, 129, 154, 235, 734, 893], "onc": [90, 91, 93, 119, 182, 235, 422, 537, 549, 619, 809, 893], "modifi": [90, 91, 101, 117, 147, 154, 209, 235, 310, 339, 696, 729, 795, 856, 857, 893], "multi": [90, 91], "lossi": [90, 91, 101], "replac": [90, 91, 101, 132, 133, 178, 203, 211, 212, 235, 311, 454, 561, 607, 608, 619, 697, 812, 813, 846, 893], "decod": [90, 91], "im": [90, 91], "usag": [90, 91, 101, 112, 113, 188, 235, 819, 893], "expens": [90, 91, 98, 101, 105, 106, 141, 154, 180, 181, 203, 204, 235, 247, 537, 566, 603, 619, 627, 893], "nativ": [90, 94, 98, 120, 154, 181, 197, 217, 235, 247, 537, 613], "parser": 90, "even": 90, "possibl": [90, 120, 154, 181, 217, 235, 247, 381, 389, 460, 480, 537, 613, 852, 893], "differ": [90, 103, 131, 142, 143, 154, 181, 197, 203, 235, 263, 305, 310, 312, 327, 328, 337, 396, 397, 463, 479, 504, 507, 513, 516, 537, 567, 568, 619, 627, 646, 690, 696, 698, 717, 718, 727, 783, 784, 811, 855, 893], "regard": [90, 523], "sens": [90, 94, 98, 104, 106, 142, 143, 164, 207, 235, 567, 568, 582, 619], "particular": [90, 94, 98, 104, 106, 129, 235, 734, 893], "storag": [90, 92, 94, 98, 102, 104, 106], "connect": [90, 94, 98, 100, 103, 104, 106, 547], "port": [90, 94, 98, 100, 104, 106], "usernam": [90, 94, 98, 100, 104, 106], "password": [90, 94, 98, 100, 104, 106], "skip": [90, 91, 93, 101, 206, 235, 628, 893], "insert": [90, 91, 94, 98, 101, 104, 105, 106, 148, 177, 203, 205, 235, 423, 438, 463, 466, 537, 604, 619, 810, 830, 855, 858, 893], "count": [90, 91, 94, 98, 101, 104, 105, 106, 124, 142, 143, 157, 167, 168, 172, 203, 207, 213, 217, 226, 235, 299, 327, 376, 395, 398, 412, 413, 414, 415, 416, 418, 419, 420, 440, 479, 481, 517, 537, 567, 568, 573, 610, 613, 619, 689, 717, 781, 786, 832, 880, 881, 893], "offset": [90, 91, 94, 98, 101, 104, 105, 106, 142, 143, 189, 207, 213, 235, 277, 327, 330, 335, 433, 457, 463, 537, 567, 568, 597, 610, 619, 660, 717, 720, 725, 825, 849, 855, 893], "row_count": [90, 91, 94, 98, 101, 104, 105, 106], "sampl": [90, 91, 217, 235, 432, 537, 613, 824, 893], "estim": [90, 91, 129, 235, 344, 345, 374, 537, 734, 736, 737, 770, 893], "alloc": [90, 91, 129, 175, 235, 734, 893], "need": [90, 91, 93, 108, 109, 142, 143, 188, 199, 235, 282, 427, 448, 537, 567, 568, 612, 619, 818, 840, 875, 893], "end": [90, 91, 98, 101, 142, 235, 277, 288, 330, 346, 361, 439, 443, 457, 461, 491, 503, 537, 567, 569, 576, 585, 619, 660, 670, 720, 835, 849, 853], "scan_csv": [90, 91, 595, 596, 612, 619], "glob": [90, 91, 101, 104, 106], "pattern": [90, 91, 101, 104, 106, 154, 235, 388, 439, 440, 445, 446, 453, 454, 812, 813, 831, 832, 837, 838, 845, 846, 893], "store": [90, 98, 131, 154, 181, 235, 627, 893], "continu": [90, 98, 432, 537, 824, 893], "benchmark": [90, 98], "50000": 91, "batchedcsvread": [91, 546], "batch": [91, 105], "upon": 91, "creation": 91, "gather": 91, "work": [91, 93, 141, 143, 177, 235, 264, 292, 293, 294, 295, 355, 451, 468, 478, 537, 566, 568, 619, 647, 675, 678, 679, 680, 745, 843, 879, 893], "next_batch": 91, "call": [91, 112, 113, 158, 234, 235, 300, 303, 537, 547, 618, 619, 628, 893], "big": 91, "interest": 91, "seen_group": 91, "big_fil": 91, "while": [91, 92, 93, 102, 112, 113, 154, 163, 203, 235, 581, 619], "df_current_batch": 91, "concat": [91, 492, 493, 676, 780, 893], "partition_df": 91, "partition_bi": [91, 155, 235], "as_dict": [91, 169, 235], "fh": 91, "write_csv": [91, 101, 235], "els": 91, "table_uri": [92, 102], "delta_table_opt": [92, 102], "lake": [92, 102, 546], "uri": [92, 100, 102], "root": [92, 102, 373, 383, 391, 402, 436, 469, 536, 537, 827, 893], "For": [92, 93, 100, 102, 131, 143, 156, 157, 190, 217, 235, 282, 290, 390, 407, 432, 496, 505, 506, 537, 568, 573, 598, 613, 619, 627, 794, 824, 875, 893], "filesystem": [92, 102], "absolut": [92, 102, 108, 109, 241, 537, 623, 893], "rel": [92, 102, 108, 109, 327, 343, 344, 345, 537, 717, 735, 736, 737, 893], "But": [92, 102], "gc": [92, 102], "azur": [92, 102], "thu": [92, 101, 102, 131, 235, 523, 627, 893], "backend": [92, 100, 102], "deltalak": [92, 102], "cloud": [92, 102, 103], "configur": [92, 102], "authent": [92, 102], "keyword": [92, 98, 102, 170, 171, 180, 235, 584, 619, 893], "partit": [92, 98, 100, 102, 103, 155, 169, 235], "sinc": [92, 102, 211, 235, 314, 348, 507, 537, 607, 619, 700, 739, 893], "table_path": [92, 102], "avoid": [92, 102], "year": [92, 102, 142, 143, 157, 207, 235, 317, 327, 328, 330, 335, 337, 412, 413, 414, 415, 416, 418, 419, 420, 499, 500, 537, 567, 568, 573, 619, 703, 717, 718, 720, 725, 727], "2021": [92, 102, 124, 140, 142, 207, 235, 463, 511, 567, 619, 703, 753, 855, 893], "aw": [92, 102], "see": [92, 93, 100, 102, 108, 109, 112, 113, 156, 170, 171, 235, 293, 294, 295, 333, 351, 360, 374, 382, 432, 520, 537, 678, 679, 680, 723, 770, 824, 893, 900], "bucket": [92, 102, 330, 335, 720, 725], "aws_access_key_id": [92, 102], "the_aws_access_key_id": [92, 102], "aws_secret_access_kei": [92, 102], "the_aws_secret_access_kei": [92, 102], "googl": [92, 102], "service_account": [92, 102], "service_account_json_absolute_path": [92, 102], "az": [92, 102], "adl": [92, 102], "abf": [92, 102], "azure_storage_account_nam": [92, 102], "azure_storage_account_kei": [92, 102], "without_fil": [92, 102], "track": [92, 102, 120, 235], "sheet_id": 93, "sheet_nam": 93, "xlsx2csv_option": 93, "read_csv_opt": 93, "excel": [93, 546], "xlsx": 93, "sheet": 93, "xlsx2csv": [93, 107], "read_csv": [93, 101], "skip_empty_lin": 93, "my": [93, 102, 103], "datasheet": 93, "excel_fil": 93, "correct": [93, 344, 345, 374, 417, 432, 537, 577, 619, 736, 737, 770, 804, 824, 893], "look": [93, 282, 285, 667], "document": [93, 100, 447, 463, 839, 855], "fix": [93, 111, 112, 339, 412, 413, 414, 415, 416, 418, 419, 420, 537, 729], "whole": [93, 434, 435, 445, 537, 837], "twice": 93, "With": 93, "1000": [93, 129, 235, 318, 319, 466, 708], "spreadsheet": [93, 172, 235], "xl": 93, "xlsm": 93, "xlsb": 93, "odf": 93, "od": [93, 462, 854], "odt": 93, "memory_map": [94, 98, 104], "v2": [94, 104], "valid": [94, 98, 113, 117, 129, 235, 304, 434, 439, 440, 445, 446, 447, 537, 688, 734, 747, 831, 832, 837, 838, 839, 845, 846, 893], "greatli": [94, 104], "repeat": [94, 104, 406, 408, 537], "o": [94, 104, 304, 444, 477, 537, 688, 836, 878, 893], "page": [94, 104, 235, 537, 546, 596, 619, 893], "give": [94, 98, 104, 105, 106, 163, 212, 235, 314, 374, 408, 537, 546, 581, 608, 619, 700, 770, 893], "read_ndjson": 96, "parallelstrategi": [98, 106], "directori": 98, "awar": [98, 154, 181, 197, 235, 336, 463, 726, 730, 855], "stabl": 98, "increas": [98, 304, 537, 688, 893], "row_group": [98, 106], "direct": [98, 100, 106, 206, 235], "read_tabl": 98, "connection_uri": 100, "partition_on": 100, "partition_rang": 100, "partition_num": 100, "databas": 100, "postgresql": 100, "redshift": 100, "mysql": 100, "mariadb": 100, "clickhous": 100, "oracl": 100, "bigqueri": 100, "server": 100, "pleas": [100, 102], "connectorx": [100, 107], "doc": 100, "github": 100, "com": [100, 343, 344, 345, 445, 537, 735, 736, 737, 837, 893], "sfu": 100, "db": 100, "connector": 100, "destin": 100, "raw": 100, "transfer": 100, "partition_col": 100, "explicitli": [100, 111, 112, 525], "with_column_nam": 101, "push": [101, 103, 104, 105, 106], "down": [101, 103, 104, 105, 106, 355, 537, 745, 893], "therebi": [101, 104, 105, 106], "potenti": [101, 104, 105, 106], "overhead": [101, 104, 105, 106], "updat": 101, "just": [101, 163, 235, 581, 619], "befor": [101, 117, 131, 142, 157, 205, 235, 302, 303, 304, 400, 411, 412, 413, 414, 415, 416, 418, 419, 420, 466, 470, 537, 567, 570, 573, 604, 619, 627, 686, 687, 688, 787, 798, 799, 800, 801, 802, 803, 805, 806, 807, 858, 864, 893], "realloc": [101, 104, 105, 131, 235, 627, 893], "my_long_fil": 101, "doesn": [101, 342, 537, 733, 883, 893], "thing": [101, 484, 504], "less": [101, 157, 235, 449, 455, 460, 466, 573, 619, 841, 847, 852, 858], "limit": [101, 133, 235, 284, 293, 294, 295, 351, 356, 537, 562, 569, 596, 619, 678, 679, 680, 742, 893], "breezah": 101, "languag": [101, 142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 717, 720, 725], "terribl": 101, "mydf": 101, "lambda": [101, 120, 136, 171, 217, 235, 247, 282, 343, 344, 345, 382, 383, 411, 498, 526, 537, 577, 584, 613, 619, 628, 665, 735, 736, 737, 893], "raw_filesystem": 102, "adjust": [102, 343, 344, 345, 432, 537, 735, 736, 737, 824, 893], "subtreefilesystem": 102, "reli": 102, "mention": 102, "ensur": [102, 112, 113, 115, 180, 235, 481, 537, 577, 619, 875, 881, 893], "gcsf": 102, "pyfilesystem": 102, "fsspechandl": 102, "gcsfilesystem": 102, "id": [102, 217, 453, 454, 479, 481, 537, 613, 880, 893], "token": 102, "pa_f": 102, "adlf": 102, "azureblobfilesystem": 102, "account_nam": 102, "account_kei": 102, "allow_pyarrow_filt": 103, "lead": [103, 235, 424, 450, 462, 466, 472, 481, 513, 516, 523, 537, 577, 613, 619, 814, 842, 854, 858, 893], "comparison": 103, "dset": 103, "folder": 103, "out": [103, 107, 143, 235, 267, 281, 286, 363, 366, 439, 441, 537, 568, 595, 596, 619, 650, 664, 668, 831, 833], "1970": 103, "stdout": 107, "14": [107, 120, 211, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 317, 360, 537, 607, 619, 720], "platform": 107, "linux": 107, "microsoft": 107, "standard": [107, 191, 235, 317, 344, 418, 432, 437, 447, 524, 537, 599, 619, 703, 736, 824, 828, 839, 893], "wsl2": 107, "x86_64": 107, "glibc2": 107, "main": 107, "jul": [107, 463, 855], "56": [107, 474, 537], "gcc": 107, "20210110": 107, "23": [107, 142, 143, 235, 311, 315, 330, 500, 567, 568, 619, 697, 701], "check_dtyp": [108, 109], "check_exact": [108, 109], "rtol": [108, 109], "1e": [108, 109], "atol": [108, 109], "nans_compare_equ": [108, 109], "check_column_ord": 108, "check_row_ord": 108, "assertionerror": [108, 109], "compar": [108, 109, 137, 235, 811, 893], "exactli": [108, 109, 112, 113, 459, 460, 819, 851, 852, 893], "toler": [108, 109, 157, 235, 573, 619], "inexact": [108, 109], "assert": [108, 109, 111, 112, 113, 143, 235, 546, 568, 619, 747, 893], "irrespect": 108, "unsort": 108, "check_nam": 109, "s1": [109, 136, 235, 884, 893], "searchstrategi": [110, 112, 113], "null_prob": [110, 112, 113], "percentag": [110, 112, 113, 400, 537, 787, 893], "chanc": [110, 112, 113], "hypothesi": [110, 111, 112, 113, 900], "sampled_from": 110, "unique_small_int": 110, "ccy": 110, "gbp": 110, "eur": [110, 124, 140, 235], "jpy": 110, "min_col": [111, 112], "max_col": [111, 112], "suitabl": [111, 423, 537, 810, 893], "standalon": [111, 112], "itself": [111, 575, 619], "explicit": [111, 487, 520], "random": [111, 112, 113, 144, 182, 235, 357, 405, 422, 428, 537, 748, 792, 809, 820, 893], "mincol": 111, "exact": [111, 112, 113, 188, 235, 463, 855], "especi": 111, "punctuat": 111, "test_special_char_colname_init": 111, "z": [111, 112, 129, 150, 152, 156, 163, 235, 261, 291, 357, 408, 463, 537, 572, 581, 597, 619, 674, 742, 855, 893], "test_unique_xyz": 111, "assert_someth": 111, "min_siz": [112, 113], "max_siz": [112, 113], "include_col": 112, "allow_infin": [112, 113], "allowed_dtyp": [112, 113], "excluded_dtyp": [112, 113], "describ": [112, 140, 235, 612, 893], "desir": 112, "ignor": [112, 113, 161, 192, 235, 263, 305, 396, 397, 537, 646, 690, 783, 784, 893], "n_chunk": [112, 113, 235, 893], "randomis": 112, "individu": [112, 143, 235, 247, 446, 537, 568, 596, 619, 676, 838, 893], "append": [112, 131, 156, 157, 235, 406, 537, 572, 573, 619, 893], "onto": 112, "independ": [112, 113], "either": [112, 143, 158, 161, 180, 192, 235, 568, 575, 619], "basi": 112, "pct": 112, "take": [112, 136, 164, 171, 194, 235, 327, 336, 473, 502, 504, 537, 582, 602, 619, 717, 726, 867, 884, 893], "preced": 112, "disallow": [112, 113], "exclud": [112, 113, 300, 303, 361, 491, 523, 537], "deploi": [112, 113], "characterist": [112, 113], "develop": [112, 113], "directli": [112, 113, 343, 344, 345, 537, 735, 736, 737, 893], "concret": [112, 113], "test_repr": [112, 113], "isinst": [112, 113, 235], "repr": [112, 113], "known": [112, 613], "colnam": [112, 128, 235, 383, 537, 558, 619], "df_strategi": 112, "15836": 112, "1755e": 112, "38": 112, "575050513": 112, "constructor": 113, "max_data_s": 113, "distinct": [113, 169, 235, 283, 405, 499, 500, 501, 537, 666, 792, 893], "54666": 113, "35": 113, "6414": 113, "63290": 113, "pool": 114, "toggl": [115, 463, 855], "scope": 117, "lifetim": 117, "initi": [117, 496, 505], "whatev": 117, "were": 117, "enter": 117, "set_verbos": 117, "do_various_th": 117, "restor": 117, "nan_as_nul": 119, "_pyarrowdatafram": 119, "effect": [119, 136, 235, 610, 619], "nullabl": 119, "extens": 119, "propag": [119, 161, 192, 235, 396, 397, 537, 783, 784, 893], "return_dtyp": [120, 235, 247, 382, 486, 512, 537, 628, 893], "inference_s": [120, 235], "256": [120, 235, 787, 893], "user": [120, 171, 217, 235, 247, 424, 486, 537, 584, 613, 619, 628, 814, 893], "udf": [120, 171, 217, 235, 247, 486, 537, 584, 613, 619, 628, 893], "logic": [120, 217, 235, 247, 476, 537, 565, 572, 587, 611, 613, 619, 877, 893], "almost": [120, 217, 235, 247, 537, 613], "_significantly_": [120, 217, 235, 247, 537, 613], "intens": [120, 217, 235, 247, 537, 613], "becaus": [120, 129, 142, 158, 206, 217, 235, 247, 264, 537, 567, 613, 619, 628, 647, 734, 893], "engin": [120, 217, 235, 247, 537, 613], "forc": [120, 157, 217, 235, 247, 537, 572, 573, 613, 619], "materi": [120, 217, 235, 247, 537, 585, 613, 619], "parallelis": [120, 217, 235, 247, 537, 613], "optimis": [120, 217, 235, 247, 537, 613, 812, 813, 893], "wherev": [120, 217, 235, 247, 537, 613], "strongli": [120, 217, 235, 247, 537, 613], "achiev": [120, 217, 235, 247, 537, 613], "best": [120, 217, 235, 247, 537, 613], "tri": [120, 235], "arbitrarili": [120, 235], "rearrang": [120, 235], "preserv": [120, 235, 429, 537, 821, 893], "syntax": [120, 167, 184, 190, 212, 235, 591, 594, 598, 608, 619, 893], "15": [120, 142, 143, 148, 211, 235, 304, 330, 335, 348, 537, 567, 568, 607, 619, 688, 720, 725, 739, 893], "better": [120, 217, 235, 247, 481, 537, 613, 812, 813, 893], "scalar": [120, 153, 235, 423, 486, 537, 769, 810, 893], "ident": [121, 122, 235, 550, 551, 619, 677, 681, 893], "cheap": [121, 122, 235, 550, 551, 619, 627, 677, 681, 893], "deepcopi": [121, 122, 235, 550, 551, 619, 677, 681, 893], "13": [121, 122, 132, 133, 139, 143, 148, 158, 166, 212, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 411, 413, 492, 528, 537, 550, 551, 561, 562, 568, 575, 608, 619, 628, 720, 725, 727, 893], "clear": [122, 235, 551, 619, 681, 893], "properti": [123, 128, 146, 183, 185, 210, 235, 546, 553, 558, 590, 606, 619], "appl": [123, 147, 156, 176, 178, 196, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 402, 410, 443, 461, 469, 537, 572, 588, 619, 835, 853], "banana": [123, 196, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 402, 410, 469, 537], "summari": [124, 235, 689, 893], "glimps": [124, 145, 235], "usd": [124, 140, 235], "2020": [124, 140, 143, 235, 310, 313, 316, 318, 319, 321, 323, 326, 332, 333, 336, 340, 568, 619, 696, 699, 702, 708, 710, 713, 716, 722, 730], "null_count": [124, 127, 235, 304, 537, 688, 689, 893], "266667": [124, 235], "666667": [124, 161, 208, 223, 235, 343, 537, 605, 619], "std": [124, 235, 411, 537, 619, 689, 805, 893], "101514": [124, 235], "707107": [124, 235, 344, 537, 736, 893], "57735": [124, 235], "median": [124, 172, 235, 414, 537, 609, 619, 801, 893], "snippet": [127, 235, 557, 619], "is_nul": [127, 235, 537, 557, 619, 893], "height": [127, 235], "sizeunit": [129, 235, 734, 893], "total": [129, 235, 734, 893], "heap": [129, 235, 734, 893], "its": [129, 205, 235, 311, 330, 335, 604, 619, 697, 720, 725, 734, 893], "bitmap": [129, 235, 734, 893], "therefor": [129, 235, 282, 734, 893], "structarrai": [129, 235, 734, 893], "constant": [129, 143, 235, 349, 537, 568, 619, 734, 740, 893], "unchang": [129, 235, 247, 476, 537, 577, 613, 619, 734, 877, 893], "visibl": [129, 235, 734, 893], "capac": [129, 188, 235, 734, 819, 893], "ffi": [129, 235, 734, 893], "kb": [129, 235, 734, 893], "mb": [129, 235, 734, 893], "gb": [129, 235, 734, 893], "tb": [129, 235, 734, 893], "scale": [129, 235, 734, 893], "1_000_000": [129, 235, 734, 893], "25888898": [129, 235], "689577102661133": [129, 235], "long": [130, 163, 206, 235, 559, 581, 619], "largelist": [130, 235], "letter": [130, 220, 229, 235, 346, 503, 537, 559, 614, 615, 619], "locat": [131, 178, 201, 205, 235, 423, 537, 604, 619, 627, 810, 813, 866, 893], "faster": [131, 206, 235, 247, 411, 451, 479, 537, 595, 596, 619, 627, 628, 798, 843, 893], "onlin": [131, 235, 627, 893], "rerun": [131, 235, 627, 893], "latter": [131, 235, 627, 893], "20": [131, 147, 148, 171, 173, 177, 178, 235, 254, 255, 256, 258, 305, 330, 335, 357, 360, 507, 511, 537, 584, 619, 725], "40": [131, 171, 235, 330, 335, 357, 537, 584, 619, 703, 725], "50": [131, 235, 293, 294, 295, 330, 335, 537, 678, 725, 893], "60": [131, 235, 331, 332, 463, 718, 721, 722, 855], "fill_valu": [132, 187, 206, 235, 350, 426, 537, 561, 593, 619, 741, 817, 893], "Not": [132, 235, 367, 369, 537, 561, 619], "To": [132, 235, 307, 308, 351, 513, 516, 526, 537, 561, 619], "fillnullstrategi": [133, 235, 351, 537, 562, 619, 742, 893], "matches_supertyp": [133, 235, 562, 619], "forward": [133, 157, 235, 351, 356, 537, 562, 573, 619, 742, 893], "consecut": [133, 235, 284, 351, 356, 438, 537, 562, 619, 742, 830, 893], "supertyp": [133, 235, 246, 537, 562, 619], "fill_nan": [133, 235, 537, 619, 893], "OR": [134, 235, 485, 563, 619], "reduct": [136, 235], "supercast": [136, 235], "similar": [136, 157, 235, 399, 537, 573, 619], "parent": [136, 235], "rule": [136, 235, 333, 723], "arithmet": [136, 235], "zip_with": [136, 235, 893], "foo11": [136, 235], "bar22": [136, 235], "null_equ": [137, 235, 811, 893], "retriev": [138, 235, 259, 260, 467, 642, 643, 859], "preview": [140, 235], "wide": [140, 163, 206, 235, 581, 619], "nice": [140, 235], "few": [140, 235], "head": [140, 159, 193, 235, 246, 377, 537, 576, 619, 772, 893], "tail": [140, 145, 215, 235, 246, 432, 537, 619, 824, 893], "maintain_ord": [141, 169, 172, 204, 207, 215, 216, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 235, 242, 247, 472, 478, 494, 537, 552, 555, 560, 566, 585, 594, 595, 596, 603, 619, 879, 893], "consist": [141, 235, 566, 619], "agg": [141, 142, 143, 235, 242, 247, 352, 354, 434, 472, 483, 494, 537, 552, 555, 560, 566, 567, 568, 585, 594, 619], "loop": [141, 235], "sub_df": [141, 235], "index_column": [142, 143, 235, 567, 568, 619], "truncat": [142, 235, 567, 585, 619], "include_boundari": [142, 235, 567, 619], "start_bi": [142, 235, 567, 619], "startbi": [142, 235, 567, 619], "dynamicgroupbi": [142, 235], "normal": [142, 235, 342, 374, 432, 537, 567, 619, 733, 770, 824, 893], "groupbi": [142, 143, 167, 235, 242, 247, 264, 304, 352, 354, 399, 434, 435, 472, 483, 486, 494, 537, 552, 555, 560, 567, 568, 585, 594, 619, 647, 688, 893], "member": [142, 235, 567, 619, 759, 893], "seen": [142, 235, 284, 356, 537, 567, 619], "roll": [142, 143, 235, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 492, 537, 567, 568, 619, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "slot": [142, 235, 263, 304, 305, 537, 567, 619, 646, 688, 690, 893], "1n": [142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 717, 720, 725], "nanosecond": [142, 143, 157, 207, 235, 327, 330, 331, 335, 412, 413, 414, 415, 416, 418, 419, 420, 501, 537, 567, 568, 573, 619, 717, 720, 721, 725], "1u": [142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 717, 720, 725], "microsecond": [142, 143, 157, 207, 235, 327, 330, 331, 335, 412, 413, 414, 415, 416, 418, 419, 420, 500, 501, 537, 567, 568, 573, 585, 619, 717, 720, 725], "1m": [142, 143, 157, 207, 235, 318, 319, 321, 326, 327, 330, 332, 335, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 708, 710, 716, 717, 720, 722, 725], "millisecond": [142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 501, 537, 567, 568, 573, 619, 717, 720, 725], "1h": [142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 701, 717, 720, 725], "1w": [142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 717, 720, 725], "week": [142, 143, 157, 207, 235, 327, 330, 335, 338, 412, 413, 414, 415, 416, 418, 419, 420, 501, 537, 567, 568, 573, 619, 717, 720, 725, 728], "month": [142, 143, 157, 207, 235, 312, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 499, 500, 537, 567, 568, 573, 619, 698, 717, 720, 725], "1y": [142, 143, 157, 207, 235, 327, 330, 335, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 717, 720, 725, 731], "1i": [142, 143, 157, 207, 235, 327, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 568, 573, 619, 717], "Or": [142, 143, 157, 207, 235, 399, 529, 537, 567, 568, 573, 619], "10i": [142, 143, 235, 567, 568, 619], "ascend": [142, 143, 235, 488, 567, 568, 619], "often": [142, 143, 235, 408, 537, 567, 568, 619], "dynam": [142, 235, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 619], "matter": [142, 143, 154, 181, 197, 235, 567, 568, 619], "neg": [142, 145, 186, 187, 189, 193, 235, 276, 277, 425, 426, 433, 457, 537, 567, 592, 593, 597, 610, 619, 659, 660, 816, 817, 825, 849, 893], "_lower_bound": [142, 235, 567, 619], "_upper_bound": [142, 235, 567, 619], "impact": [142, 235, 567, 619], "harder": [142, 235, 567, 619], "side": [142, 143, 235, 361, 412, 413, 414, 415, 416, 418, 419, 420, 423, 537, 567, 568, 619, 810, 893], "inclus": [142, 143, 235, 361, 412, 413, 414, 415, 416, 418, 419, 420, 458, 459, 537, 567, 568, 619, 850, 851], "datapoint": [142, 235, 567, 619], "mondai": [142, 235, 338, 567, 619, 728], "date_rang": [142, 207, 235, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 567, 619, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731], "30m": [142, 235, 330, 335, 567, 619, 720, 725], "time_min": [142, 235, 567, 619], "time_max": [142, 235, 567, 619], "boundari": [142, 235, 293, 294, 295, 537, 567, 619, 678, 679, 680, 893], "time_count": [142, 235, 567, 619], "_lower_boundari": [142, 235, 567, 619], "_upper_boundari": [142, 235, 567, 619], "lower_bound": [142, 235, 537, 567, 619], "upper_bound": [142, 235, 282, 537, 567, 619], "time_agg_list": [142, 235, 567, 619], "idx": [142, 155, 235, 282, 567, 619, 665, 813, 893], "arang": [142, 206, 217, 235, 567, 613, 619], "2i": [142, 235, 567, 619], "3i": [142, 235, 567, 619], "a_agg_list": [142, 235, 567, 619], "rollinggroupbi": [143, 235], "dynamic_groupbi": [143, 235, 568, 619], "groupby_dynam": [143, 235, 568, 619], "45": [143, 235, 311, 330, 335, 440, 446, 568, 619, 697, 720, 725, 832, 838], "48": [143, 235, 568, 619], "18": [143, 235, 303, 330, 335, 339, 360, 373, 537, 568, 585, 619, 729], "19": [143, 157, 235, 330, 568, 573, 619, 720, 725], "43": [143, 235, 303, 537, 568, 619], "strptime": [143, 235, 333, 568, 619, 723], "2d": [143, 199, 235, 568, 619, 698], "sum_a": [143, 235, 568, 619], "min_a": [143, 235, 568, 619], "max_a": [143, 235, 568, 619], "to_list": [143, 235, 282, 568, 619, 665, 893], "seed": [144, 182, 235, 357, 422, 428, 537, 748, 809, 820, 893], "seed_1": [144, 235, 357, 537, 748, 893], "seed_2": [144, 235, 357, 537, 748, 893], "seed_3": [144, 235, 357, 537, 748, 893], "hash": [144, 235, 537, 893], "u64": [144, 235, 357, 407, 537, 585, 619, 748, 893], "10783150408545073287": [144, 235], "1438741209321515184": [144, 235], "10047419486152048166": [144, 235], "2047317070637311557": [144, 235], "last": [145, 157, 172, 190, 193, 204, 229, 235, 256, 258, 267, 280, 304, 312, 328, 337, 460, 471, 527, 537, 573, 598, 601, 603, 615, 619, 637, 640, 650, 663, 688, 698, 718, 727, 852, 865, 893], "_except_": [145, 193, 235], "ab": [145, 193, 212, 235, 513, 516, 537, 608, 619, 893], "grown": [147, 235], "baz": [148, 149, 172, 205, 235, 458, 460, 571, 604, 619, 852], "intermedi": [149, 235, 571, 619, 751, 893], "linear": [149, 174, 227, 235, 261, 360, 386, 404, 416, 492, 493, 519, 537, 571, 586, 619, 644, 751, 791, 803, 893], "mask": [150, 152, 235, 262, 285, 286, 362, 364, 372, 439, 441, 537, 645, 667, 668, 743, 754, 757, 767, 788, 789, 812, 831, 833, 884, 893], "buffer_s": [154, 235], "500": [154, 235, 560, 619, 707, 709, 715, 721, 799, 800, 802, 893], "iter": [154, 155, 180, 181, 184, 203, 214, 235, 304, 537, 591, 619, 688, 893], "veri": [154, 203, 235, 551, 619, 681, 893], "fit": [154, 188, 206, 235, 427, 537, 818, 819, 893], "speedup": [154, 235], "signific": [154, 235], "4x": [154, 235], "disabl": [154, 235], "export": [154, 155, 181, 197, 235, 510], "materialis": [154, 155, 180, 181, 235], "10000": [155, 235, 466], "iter_row": [155, 180, 181, 235], "17_500": [155, 235], "2023": [155, 235, 311, 697], "klmnoopqrstuvwxyz": [155, 235], "__name__": [155, 235], "7500": [155, 235], "recordbatch": [155, 235], "15_000": [155, 235], "record_batch": [155, 235], "to_arrow": [155, 235, 893], "to_batch": [155, 235], "date32": [155, 235], "large_str": [155, 195, 235], "15000": [155, 235], "2500": [155, 235], "left_on": [156, 157, 235, 572, 573, 619], "right_on": [156, 157, 235, 572, 573, 619], "joinstrategi": [156, 235, 572, 619], "suffix": [156, 157, 184, 212, 215, 235, 288, 367, 369, 370, 371, 410, 443, 463, 537, 572, 573, 591, 608, 609, 619, 670, 835, 855], "_right": [156, 157, 235, 572, 573, 619], "outer": [156, 235, 572, 619], "semi": [156, 235, 572, 619], "anti": [156, 235, 572, 619, 812, 813, 893], "cross": [156, 235, 572, 619], "join_asof": [156, 235, 572, 619], "stringcach": [156, 235, 546], "other_df": [156, 235, 572, 619], "by_left": [157, 235, 573, 619], "by_right": [157, 235, 573, 619], "asofjoinstrategi": [157, 235, 573, 619], "allow_parallel": [157, 235, 572, 573, 619], "force_parallel": [157, 235, 572, 573, 619], "asof": [157, 235, 573, 619], "rather": [157, 235, 466, 573, 619, 858], "asof_join": [157, 235], "search": [157, 235, 573, 619], "greater": [157, 235, 432, 460, 537, 573, 619, 824, 852, 893], "numer": [157, 235, 293, 294, 295, 408, 427, 537, 546, 573, 619, 678, 679, 680, 765, 811, 818, 893], "distanc": [157, 235, 573, 619], "plan": [157, 158, 235, 549, 554, 555, 565, 572, 573, 587, 594, 611, 619], "gdp": [157, 235, 573, 619], "2016": [157, 235, 573, 619], "2017": [157, 235, 573, 619], "2018": [157, 235, 573, 619], "2019": [157, 235, 573, 619], "record": [157, 235, 573, 619], "jan": [157, 235, 573, 619], "1st": [157, 235, 573, 619], "4164": [157, 235, 573, 619], "4411": [157, 235, 573, 619], "4566": [157, 235, 573, 619], "4696": [157, 235, 573, 619], "popul": [157, 235, 573, 619], "12th": [157, 235, 573, 619], "82": [157, 235, 573, 619], "66": [157, 235, 573, 619, 803, 893], "83": [157, 235, 573, 619], "52": [157, 212, 235, 421, 537, 573, 608, 619], "request": [158, 235], "small": [158, 235, 330, 434, 435, 537, 560, 619], "describe_plan": [158, 235, 619], "unoptim": [158, 235, 555, 619], "describe_optimized_plan": [158, 235, 555, 619], "show_graph": [158, 235, 619], "un": [158, 235], "graphviz": [158, 235, 594, 619], "advis": [158, 235], "axi": [160, 161, 163, 165, 192, 235, 581, 619], "null_strategi": [161, 192, 235], "nullstrategi": [161, 192, 235], "spam": [161, 235], "id_var": [163, 235, 581, 619], "value_var": [163, 235, 581, 619], "variable_nam": [163, 235, 581, 619], "value_nam": [163, 235, 581, 619], "unpivot": [163, 235, 581, 619], "leav": [163, 235, 581, 619], "identifi": [163, 204, 235, 581, 603, 619], "massag": [163, 235, 581, 619], "measur": [163, 235, 581, 619], "merg": [164, 235, 582, 619], "caller": [164, 235, 282, 577, 582, 613, 619], "respons": [164, 235, 582, 619], "One": [167, 172, 235, 893], "what": [167, 235, 875, 883, 893], "struct": [167, 184, 202, 205, 212, 235, 282, 459, 460, 481, 496, 497, 498, 537, 591, 604, 608, 619, 665, 851, 852], "pack": [167, 235], "expr_unique_subset": [167, 235], "df_nuniqu": [167, 235], "df_agg_nuniqu": [167, 235], "simpl": [167, 235], "predict": [169, 172, 175, 207, 235], "k": [169, 235, 291, 374, 477, 537, 674, 770, 878, 893], "l": [169, 235], "pearson": [170, 235, 374, 432, 518, 537, 770, 824, 893], "correl": [170, 235, 518, 523], "coeffici": [170, 235, 432, 537, 824, 893], "corrcoef": [170, 235], "func": [171, 235, 584, 619, 628, 893], "offer": [171, 235, 584, 619], "recommend": [171, 235], "fulli": [171, 235, 463, 855], "advantag": [171, 235], "cast_str_to_int": [171, 235, 584, 619], "col_nam": [171, 235, 584, 619], "tdf": [171, 235, 584, 619], "aggregate_fn": [172, 235], "pivotagg": [172, 235], "sort_column": [172, 235], "well": [172, 235], "predefin": [172, 235], "transpos": [172, 235], "discoveri": [172, 235], "interpol": [174, 227, 235, 351, 386, 404, 416, 519, 537, 586, 619, 791, 803, 893], "rollinginterpolationmethod": [174, 227, 235, 404, 416, 519, 537, 586, 619, 791, 803, 893], "midpoint": [174, 227, 235, 404, 416, 519, 537, 586, 619, 791, 803, 893], "subsequ": [175, 235], "old": [176, 235, 588, 619], "new_col": [177, 235], "val": [179, 235, 291, 476, 537, 589, 619, 674], "by_pred": [180, 235], "accord": [180, 235, 703], "mutual": [180, 235], "exclus": [180, 235], "addition": [180, 235], "clariti": [180, 235], "anyth": [180, 235], "toomanyrowsreturn": [180, 235, 546], "norowsreturn": [180, 235, 546], "inherit": [180, 235], "rowsexcept": [180, 235, 546], "frac": [182, 235, 343, 344, 345, 422, 432, 477, 537, 735, 736, 737, 809, 824, 878, 893], "with_replac": [182, 235, 422, 537, 809, 893], "shuffl": [182, 217, 235, 422, 537, 613, 809, 893], "modul": [182, 235, 422, 428, 536, 537, 809, 820, 893], "whenthen": [184, 235, 591, 619], "whenthenthen": [184, 235, 591, 619], "named_expr": [184, 212, 235, 522, 591, 608, 619], "instanti": [184, 212, 235, 591, 608, 619], "integer_dtyp": [184, 235, 591, 619], "is_odd": [184, 235, 591, 619], "_is_odd": [184, 235, 591, 619], "shift_and_fil": [186, 235, 537, 619, 893], "shift": [187, 235, 263, 305, 400, 426, 492, 537, 593, 619, 646, 690, 787, 817, 893], "shrink": [188, 235, 427, 537, 818, 819, 893], "hold": [188, 235, 491], "nulls_last": [190, 235, 256, 258, 434, 537, 598, 619, 637, 640, 893], "ddof": [191, 208, 235, 437, 482, 518, 523, 524, 528, 537, 599, 605, 619, 828, 882, 893], "deviat": [191, 235, 344, 418, 437, 524, 537, 599, 619, 736, 828, 893], "degre": [191, 208, 235, 437, 482, 518, 523, 537, 828, 882, 893], "freedom": [191, 208, 235, 437, 482, 518, 523, 537, 828, 882, 893], "816497": [191, 235], "21": [192, 235, 507], "16a": [192, 235], "27b": [192, 235], "38c": [192, 235], "nth": [194, 235, 460, 473, 537, 602, 619, 852, 867, 893], "mostli": [195, 235, 352, 537], "categoricaltyp": [195, 235], "as_seri": [196, 235], "fruit": [196, 235, 402, 410, 443, 461, 469, 537, 835, 853], "car": [196, 235, 402, 410, 469, 537], "beetl": [196, 235, 402, 410, 469, 537], "audi": [196, 235, 402, 410, 469, 537], "28": [196, 235, 339, 729], "300": [196, 235, 799, 800, 802, 893], "hot": [198, 235], "re": [199, 235, 510], "ll": [199, 235, 875, 893], "numpy_arrai": [199, 235], "date_as_object": [200, 235], "sent": [200, 235, 875, 893], "datetime64": [200, 235], "pandas_df": [200, 235], "three": [202, 235, 423, 525, 537], "four": [202, 235, 525], "five": [202, 235], "num": [202, 235, 361, 364, 466, 537], "include_head": [203, 235], "header_nam": [203, 235], "column_nam": [203, 235], "perhap": [203, 235], "column_2": [203, 235], "name_gener": [203, 235, 282, 665], "base_nam": [203, 235], "my_column_": [203, 235], "my_column_0": [203, 235], "my_column_1": [203, 235], "my_column_2": [203, 235], "uniquekeepstrategi": [204, 235, 603, 619], "decompos": [205, 235, 604, 619], "t_a": [205, 235, 604, 619], "t_b": [205, 235, 604, 619], "t_c": [205, 235, 604, 619], "t_d": [205, 235, 604, 619], "womp": [205, 235, 604, 619], "t_": [205, 235, 604, 619], "t_struct": [205, 235, 604, 619], "step": [206, 235, 487], "unstackdirect": [206, 235], "much": [206, 235, 281, 304, 537, 664, 688, 893], "pivot": [206, 235], "phase": [206, 235], "subject": [206, 235], "ascii_uppercas": [206, 235], "col1": [206, 235], "col2": [206, 235], "h": [206, 235, 333, 427, 537], "col1_0": [206, 235], "col1_1": [206, 235], "col1_2": [206, 235], "col2_0": [206, 235], "col2_1": [206, 235], "col2_2": [206, 235], "time_column": [207, 235], "frequenc": [207, 235], "forward_fil": [207, 235, 300, 303, 537], "06": [207, 235, 310, 311, 317, 329, 341, 720, 728], "varianc": [208, 235, 345, 374, 420, 482, 528, 537, 605, 619, 737, 770, 807, 882, 893], "grow": [209, 235], "deprec": [211, 235, 348, 537, 607, 619, 739, 893], "favor": [211, 235, 607, 619], "17": [211, 235, 421, 507, 537, 607, 619, 682, 720, 893], "alreadi": [212, 235, 264, 304, 537, 608, 619, 647, 688, 893], "is_not": [212, 235, 537, 608, 619], "not_c": [212, 235, 608, 619], "diff": [212, 235, 313, 316, 319, 321, 323, 326, 332, 537, 608, 619, 699, 702, 708, 710, 713, 716, 722, 893], "_diff": [212, 235, 608, 619], "row_nr": [213, 235, 610, 619, 813, 893], "complet": [215, 875, 893], "idiomat": 215, "_sum": 215, "_tail_sum": 215, "bar_sum": 215, "bar_tail_sum": 215, "sub": [217, 288, 289, 443, 461, 670, 671, 835, 853], "triangl": [217, 613], "group_df": [217, 613], "nr": [220, 229, 614, 615], "maxim": [222, 254, 537, 635, 893], "833333": 223, "minim": [225, 255, 260, 427, 537, 636, 643, 778, 818, 893], "overview": [235, 537, 546, 619, 893], "public": [235, 537, 546, 619, 893], "variou": [235, 537, 619, 893], "entri": 235, "prevent": [235, 302, 303, 373, 470, 537, 686, 687, 864, 893], "behavior": [235, 247, 281, 486, 513, 516, 537, 664], "mydatafram": 235, "notic": [235, 893], "df4": 235, "df5": 235, "df6": 235, "drop_in_plac": 235, "drop_nul": [235, 307, 537, 619, 893], "estimated_s": [235, 893], "explod": [235, 354, 537, 619, 893], "find_idx_by_nam": 235, "fold": [235, 390, 490, 496, 497, 520, 526], "frame_equ": [235, 330, 335], "get_column": [235, 526], "groupby_rol": [235, 412, 413, 414, 415, 416, 418, 419, 420, 537, 567, 619], "hash_row": 235, "hstack": 235, "insert_at_idx": 235, "is_dupl": [235, 537, 893], "is_empti": [235, 893], "is_uniqu": [235, 537, 893], "iter_slic": 235, "melt": [235, 619], "merge_sort": [235, 619], "n_uniqu": [235, 537, 612, 893], "pearson_corr": 235, "pipe": [235, 619], "quantil": [235, 416, 537, 619, 803, 893], "replace_at_idx": 235, "shrink_to_fit": [235, 893], "take_everi": [235, 537, 619, 893], "to_dict": 235, "to_numpi": [235, 382, 537, 893], "to_panda": [235, 893], "to_struct": [235, 467, 468], "unnest": [235, 459, 460, 619, 851, 852], "unstack": 235, "upsampl": 235, "var": [235, 537, 619, 893], "write_avro": 235, "write_ipc": 235, "write_json": [235, 587, 619], "write_parquet": 235, "94": [242, 537], "confus": [244, 367, 369, 537], "tt": [244, 537], "tf": [244, 245, 537], "ff": [244, 245, 537], "upcast": [246, 537], "skip_nul": [247, 537, 628, 893], "pass_nam": [247, 537], "assum": [247, 537, 577, 613, 619], "a_times_2": [247, 537], "invers": [248, 249, 250, 251, 252, 253, 537, 629, 630, 631, 632, 633, 634, 893], "cosin": [248, 249, 296, 297, 382, 537, 629, 630, 682, 683, 893], "570796": [248, 250, 537, 629, 631, 893], "hyperbol": [249, 251, 253, 297, 431, 475, 537, 630, 632, 634, 683, 823, 869, 893], "sine": [250, 251, 382, 430, 431, 537, 631, 632, 822, 823, 893], "881374": [251, 537, 632, 893], "tangent": [252, 253, 474, 475, 537, 633, 634, 868, 869, 893], "785398": [252, 537, 633, 893], "arg_sort": [258, 537, 640, 893], "sublist": [259, 260, 262, 263, 266, 267, 268, 269, 270, 277, 280, 281, 642, 643, 645, 646, 649, 650, 651, 652, 653, 660, 663, 664, 665, 759, 893], "membership": [262, 645], "null_behavior": [263, 305, 537, 646, 690, 893], "nullbehavior": [263, 305, 537, 646, 690, 893], "th": [263, 305, 432, 537, 646, 690, 824, 893], "against": [264, 619, 647, 899], "blindli": [264, 647], "worth": [264, 647], "enough": [264, 432, 537, 647, 824, 893], "concat_list": [264, 502, 647], "rank": [264, 502, 523, 537, 647, 893], "taken": [277, 457, 472, 537, 660, 849], "null_on_oob": [281, 664], "anoth": [281, 304, 309, 336, 435, 537, 609, 619, 628, 664, 688, 695, 726, 811, 893], "cheaper": [281, 664], "n_field_strategi": [282, 665], "tostructstrategi": [282, 665], "first_non_nul": [282, 665], "max_width": [282, 665], "field_0": [282, 665], "field_1": [282, 665], "field_n": [282, 665], "know": [282, 451, 843, 875, 883, 893], "incorrectli": 282, "downstream": [282, 424, 537, 814, 893], "advic": 282, "col_name_": [282, 665], "col_name_0": [282, 665], "col_name_1": [282, 665], "col_name_2": [282, 665], "substr": [285, 288, 289, 439, 443, 453, 454, 458, 459, 460, 461, 667, 670, 671, 831, 835, 845, 846, 850, 851, 852, 853], "transferencod": [286, 287, 441, 442, 668, 669, 833, 834], "strict": [286, 290, 439, 441, 463, 537, 668, 672, 811, 831, 833, 855, 893], "hex": [286, 287, 441, 442, 452, 668, 669, 833, 834, 844], "base64": [286, 287, 441, 442, 668, 669, 833, 834], "prefix": [289, 461, 466, 537, 671, 853, 858], "due": [290, 537, 672, 893], "overflow": [290, 302, 303, 470, 537, 672, 686, 687, 864, 893], "categoricalord": [291, 674], "lexic": [291, 674], "min_val": [293, 295, 537, 678, 680, 893], "max_val": [293, 294, 537, 678, 679, 893], "foo_clip": [293, 294, 295, 537], "clip": [294, 295, 537, 679, 680, 893], "543081": [297, 537, 683, 893], "cumul": [299, 300, 301, 302, 303, 496, 497, 498, 537, 684, 685, 686, 687, 893], "a_revers": [299, 300, 301, 302, 303, 383, 410, 469, 537], "value_cummax": [300, 537], "value_cummax_all_fil": [300, 537], "uint16": [302, 303, 470, 537, 686, 687, 864, 893], "value_cumsum": [303, 537], "value_cumsum_all_fil": [303, 537], "min_period": [304, 343, 344, 345, 411, 412, 413, 414, 415, 416, 418, 419, 420, 537, 688, 735, 736, 737, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "slide": [304, 537, 688, 893], "realli": [304, 537, 688, 893], "complex": [304, 477, 537, 688, 878, 893], "visit": [304, 537, 688, 893], "44": [306, 537], "drop_nan": [308, 537, 893], "tu": [309, 311, 314, 334, 339, 695, 696, 697, 700, 724, 729], "lose": [309, 695], "2001": [309, 312, 314, 315, 317, 322, 324, 327, 328, 329, 330, 331, 334, 335, 337, 338, 339, 341, 463, 695, 698, 700, 701, 704, 705, 706, 707, 709, 711, 712, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 727, 728, 729, 731, 855], "tu_m": [309, 695], "tu_n": [309, 695], "tz": [310, 336, 340, 696, 726, 730], "with_time_zon": [310, 463, 696, 855], "timestamp": [310, 507, 696], "unset": [310, 696], "london_timezon": 310, "europ": [310, 336, 340, 696, 730], "london": [310, 340, 696, 730], "amsterdam": [310, 336], "london_to_amsterdam": 310, "gmt": [310, 340, 696, 730], "cet": [310, 336, 730], "bst": [310, 340, 696, 730], "cest": [310, 336, 730], "tm": [311, 697], "naiv": [311, 336, 697, 726, 730], "compon": [311, 331, 463, 499, 500, 501, 697, 721], "resolv": 311, "dtm": [311, 697], "59": [311, 322, 331, 500, 697, 712, 721], "456000": [311, 697], "101000": 311, "456": [311, 697, 873, 893], "101": [311, 452, 844], "d1": 311, "d2": 311, "d3": 311, "extract": [312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 331, 332, 337, 338, 341, 446, 447, 698, 699, 701, 702, 703, 707, 708, 709, 710, 712, 713, 714, 715, 716, 718, 719, 721, 722, 727, 728, 731, 838, 839], "weekdai": [312, 328], "day_of_month": [312, 328, 338], "ordinal_dai": [312, 338], "day_of_year": [312, 328, 338], "days_diff": 313, "epochtimeunit": [314, 700], "unix": [314, 507, 700], "epoch_n": [314, 700], "epoch_": [314, 700], "978307200000000": [314, 334, 700, 724], "978307200": [314, 700], "978393600000000": [314, 334, 700, 724], "978393600": [314, 700], "978480000000000": [314, 334, 700, 724], "978480000": [314, 700], "hours_diff": 316, "iso": [317, 337, 338, 703, 727, 728], "correspond": [317, 405, 537, 703, 792, 893], "2006": [317, 327, 717], "180": [317, 329, 341], "2002": [317, 327, 329, 341, 717, 731], "2004": [317, 327, 717], "2005": [317, 327, 717], "1001": [318, 319, 321, 326], "002": [318, 319, 321, 326, 501, 708, 710, 716], "2000": [318, 327, 717], "003": [318, 319, 321, 326], "3000": 318, "997": [318, 319, 321, 326], "997000": 318, "998": [318, 319, 321, 326], "998000": 318, "999": [318, 319, 321, 326], "999000": 318, "microseconds_diff": 319, "milliseconds_diff": 321, "minutes_diff": 323, "1440": [323, 713], "nanoseconds_diff": 326, "1000000": [326, 466, 716], "leap": [327, 717], "account": [327, 343, 344, 345, 537, 717, 735, 736, 737, 893], "minu": [327, 717], "dictat": [327, 717], "date_plus_1i": [327, 717], "1y2mo": [327, 717], "date_min": 327, "1998": [327, 717], "1999": [327, 717], "2003": [327, 507, 717], "ordin": [328, 405, 537, 718, 792, 893], "366": [328, 718], "half": [330, 343, 344, 345, 537, 720, 735, 736, 737, 893], "eg": [330, 463], "225": [330, 335], "to_fram": [330, 335, 463, 467, 468, 812, 813, 851, 852, 855, 893], "10m": [330, 335, 720, 725], "milli": [331, 721], "micro": [331, 721], "456789": 331, "654321": 331, "111110": 331, "765431": 331, "sec": 331, "11111": 331, "seconds_diff": 332, "timestamp_n": [334, 724], "timestamp_m": 334, "978307200000": 334, "978393600000": 334, "978480000000": 334, "53": [337, 727], "sundai": [338, 728], "incorrect": [339, 424, 537, 613, 729, 814, 893], "tu_u": [339, 729], "32971": [339, 729], "32974": [339, 729], "32976": [339, 729], "718281828459045": [342, 379, 537, 733, 773, 893], "formula": [342, 537, 733, 893], "pk": [342, 537, 733, 893], "459148": [342, 537], "754888": [342, 537], "span": [343, 344, 345, 537, 735, 736, 737, 893], "half_lif": [343, 344, 345, 537, 735, 736, 737, 893], "exponenti": [343, 344, 345, 347, 537, 735, 736, 737, 738, 893], "weight": [343, 344, 345, 411, 412, 413, 414, 415, 416, 418, 419, 420, 432, 537, 735, 736, 737, 798, 799, 800, 801, 802, 803, 805, 806, 807, 824, 893], "averag": [343, 405, 537, 735, 792, 893], "decai": [343, 344, 345, 537, 735, 736, 737, 893], "term": [343, 344, 345, 448, 451, 537, 735, 736, 737, 840, 843, 893], "mass": [343, 344, 345, 537, 735, 736, 737, 893], "gamma": [343, 344, 345, 537, 735, 736, 737, 893], "foral": [343, 344, 345, 537, 735, 736, 737, 893], "geq": [343, 344, 345, 537, 735, 736, 737, 893], "theta": [343, 344, 345, 537, 735, 736, 737, 893], "life": [343, 344, 345, 537, 735, 736, 737, 893], "exp": [343, 344, 345, 537, 735, 736, 737, 893], "ln": [343, 344, 345, 537, 735, 736, 737, 893], "smooth": [343, 344, 345, 537, 735, 736, 737, 893], "factor": [343, 344, 345, 476, 537, 735, 736, 737, 877, 893], "leq": [343, 344, 345, 537, 735, 736, 737, 893], "begin": [343, 344, 345, 445, 537, 735, 736, 737, 837, 893], "imbal": [343, 344, 345, 537, 735, 736, 737, 893], "ew": [343, 344, 345, 537, 735, 736, 737, 893], "w_i": [343, 344, 345, 537, 735, 736, 737, 893], "recurs": [343, 344, 345, 537, 735, 736, 737, 893], "y_0": [343, 344, 345, 537, 735, 736, 737, 893], "x_0": [343, 344, 345, 537, 735, 736, 737, 893], "y_t": [343, 344, 345, 537, 735, 736, 737, 893], "y_": [343, 344, 345, 537, 735, 736, 737, 893], "x_t": [343, 344, 345, 537, 735, 736, 737, 893], "observ": [343, 344, 345, 537, 735, 736, 737, 893], "428571": [343, 537], "bia": [344, 345, 374, 417, 432, 537, 736, 737, 770, 804, 824, 893], "unbias": [344, 345, 537, 736, 737, 893], "963624": [344, 537, 736, 893], "928571": [345, 537, 737, 893], "frozenset": [346, 491, 503, 537], "wildcard": [346, 484, 491, 496, 497, 503, 505, 520, 537], "regex": [346, 388, 439, 440, 443, 445, 446, 453, 454, 461, 491, 503, 513, 516, 526, 537, 831, 832, 835, 837, 838, 845, 846, 853], "aa": [346, 503, 537], "ba": [346, 503, 537], "cc": [346, 503, 537], "718282": [347, 537], "389056": [347, 537], "54": [347, 537], "59815": [347, 537], "expand": [348, 387, 388, 408, 537, 739, 893], "favour": [348, 537, 739, 893], "arr": [348, 502, 530, 537, 739, 875, 885, 893], "exprlistnamespac": [348, 354, 537], "exprstringnamespac": [348, 537], "group_col": [352, 483, 537], "g1": [352, 399, 483, 537], "g2": [352, 399, 483, 537], "lt": [352, 483, 537], "gte": [352, 483, 537], "9774092659964970114": [357, 537], "13614470193936745724": [357, 537], "1101441246220388612": [357, 537], "11638928888656214026": [357, 537], "13382926553367784577": [357, 537], "cumsum": [359, 537, 570, 619, 893], "interpolationmethod": [360, 537, 751, 893], "regrid": [360, 537], "grid": [360, 537], "df_original_grid": [360, 537], "grid_point": [360, 537], "df_new_grid": [360, 537], "primit": [361, 365, 537, 875, 893], "finit": [363, 523, 537, 756, 893], "optional_memb": [365, 537, 759, 893], "infinit": [366, 537, 760, 893], "_isnan": [367, 537], "b_isnan": [367, 537], "negat": [368, 537], "_is_not_nan": [369, 537], "b_is_not_nan": [369, 537], "_not_nul": [370, 537], "a_not_nul": [370, 537], "b_not_nul": [370, 537], "_isnul": [371, 537], "a_isnul": [371, 537], "b_isnul": [371, 537], "undo": [373, 392, 537], "duplicateerror": [373, 537, 546], "occurr": [373, 537], "333333": [373, 420, 537, 787, 807, 893], "fisher": [374, 432, 537, 770, 824, 893], "fourth": [374, 537, 770, 893], "central": [374, 432, 537, 770, 824, 893], "definit": [374, 537, 770, 893], "subtract": [374, 537, 770, 893], "distribut": [374, 432, 537, 770, 824, 893], "elimin": [374, 537, 770, 893], "come": [374, 537, 547, 618, 770, 893], "bias": [374, 432, 537, 770, 824, 893], "scipi": [374, 432, 537, 770, 824, 893], "stat": [374, 432, 537, 770, 824, 893], "153061": [374, 537], "logarithm": [379, 380, 537, 773, 774, 893], "584963": [379, 537], "30103": [380, 537], "60206": [380, 537], "lowest": [381, 537], "9223372036854775808": [381, 537], "agg_list": [382, 537], "elementwis": [382, 411, 412, 413, 414, 415, 416, 418, 419, 420, 484, 485, 537, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "third": [382, 537], "parti": [382, 537], "book": [382, 537], "argmax": [382, 537], "_revers": [383, 410, 469, 537], "b_revers": [383, 410, 469, 537], "computeerror": [389, 546], "keep_nam": [392, 537], "poison": [396, 397, 537, 783, 784, 893], "nanmax": [396, 397, 537, 783, 784, 893], "wherea": [396, 397, 537, 569, 576, 619, 783, 784, 893], "subgroup": [399, 537], "postgr": [399, 537], "max_by_group": [399, 537], "recent": [400, 537, 787, 893], "percent": [400, 537, 787, 893], "090909": [400, 537], "expon": [401, 537], "power": [401, 537], "reverse_": [402, 537], "reverse_a": [402, 537], "reverse_fruit": [402, 537], "reverse_b": [402, 537], "reverse_car": [402, 537], "rankmethod": [405, 537, 792, 893], "ti": [405, 537, 792, 893], "appropri": [405, 537, 792, 893], "competit": [405, 537, 792, 893], "highest": [405, 480, 523, 537, 792, 893], "immedi": [405, 525, 537, 792, 893], "64bit": [407, 537, 794, 893], "safe": [407, 537, 794, 875, 893], "coerc": [408, 537], "dim": [409, 537, 796, 893], "flat": [409, 537, 796, 893], "fruits_revers": [410, 469, 537], "cars_revers": [410, 469, 537], "window_s": [411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 537, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 893], "rolling_min": [411, 537, 798, 893], "rolling_max": [411, 537, 798, 893], "rolling_mean": [411, 537, 798, 893], "rolling_sum": [411, 537, 798, 893], "multipli": [411, 412, 413, 414, 415, 416, 418, 419, 420, 537, 798, 799, 800, 801, 802, 803, 805, 806, 807, 893], "358899": [411, 537], "041452": [411, 537], "567764": [411, 537], "travers": [412, 413, 415, 418, 419, 420, 537, 799, 800, 802, 805, 806, 807, 893], "vector": [412, 413, 415, 418, 419, 420, 537, 799, 800, 802, 805, 806, 807, 893], "5h": [412, 413, 414, 415, 416, 418, 419, 420, 537], "33": [416, 421, 491, 537, 803, 893], "skew": [417, 537, 804, 893], "527525": [418, 537, 805, 893], "digit": [421, 466, 537, 808, 832, 858, 893], "searchsortedsid": [423, 537, 810, 893], "maintain": [423, 478, 537, 595, 596, 619, 810, 879, 893], "leftmost": [423, 537, 810, 893], "rightmost": [423, 537, 810, 893], "six": [423, 537], "code": [424, 537, 575, 619, 814, 893], "care": [424, 537, 814, 893], "extrema": [427, 537, 818, 893], "112": [427, 537], "129": [427, 537], "i8": [427, 537, 797, 893], "8589934592": [427, 537], "1073741824": [427, 537], "content": [428, 481, 537, 820, 893], "175201": [431, 537, 823, 893], "about": [432, 537, 824, 893], "unimod": [432, 537, 824, 893], "skewtest": [432, 537, 824, 893], "speak": [432, 537, 824, 893], "g_1": [432, 537, 824, 893], "m_3": [432, 537, 824, 893], "m_2": [432, 537, 824, 893], "m_i": [432, 537, 824, 893], "sum_": [432, 537, 824, 893], "texttt": [432, 537, 824, 893], "k_3": [432, 537, 824, 893], "k_2": [432, 537, 824, 893], "sqrt": [432, 537, 824, 893], "343622": [432, 537], "larg": [434, 435, 537], "larger": [434, 523, 537, 595, 596, 619], "414214": [436, 537, 827, 893], "ends_with": [439, 461, 853], "crab": [439, 831], "dog": [439, 464, 465, 493, 831], "rab": [439, 831], "success": [440, 446, 832, 838], "overlap": [440, 446, 832, 838], "captur": [440, 445, 446, 832, 837, 838], "123": [440, 446, 454, 832, 838, 846, 873, 893], "bla": [440, 446, 832, 838], "asd": [440, 446, 832, 838], "678": [440, 446, 832, 838], "910t": [440, 446, 832, 838], "r": [440, 444, 445, 446, 453, 832, 836, 837, 838, 845], "count_digit": 440, "666f6f": [442, 834], "626172": [442, 834], "mango": [443, 461, 835, 853], "go": [443, 835], "has_suffix": 443, "group_index": [445, 837], "vote": [445, 837], "ballon_dor": [445, 837], "candid": [445, 837], "messi": [445, 837], "ref": [445, 837], "candidat": [445, 837], "jorginho": [445, 837], "ronaldo": [445, 837], "w": [445, 837], "extracted_nr": 446, "910": [446, 838], "json_path": [447, 839], "jsonpath": [447, 839], "regardless": [447, 839], "json_val": [447, 839], "n_char": [448, 840], "caf\u00e9": [448, 451, 840, 843], "345": [448, 451, 840, 843], "\u6771\u4eac": [448, 451, 840, 843], "nchar": [448, 451], "fillchar": [449, 455, 841, 847], "justifi": [449, 455, 841, 847], "pad": [449, 455, 466, 841, 847, 858], "cow": [449, 455, 841, 847], "monkei": [449, 455, 841, 847], "hippopotamu": [449, 455, 841, 847], "strip": [450, 456, 842, 848], "whitespac": [450, 456, 462, 842, 848, 854], "tworld": [450, 462, 842, 854], "wod": [450, 456, 842, 848], "rld": [450, 842], "text": [451, 453, 454, 843], "radix": [452, 844], "posit": [452, 844, 893], "110": [452, 844], "010": [452, 844], "fa1e": [452, 844], "ff00": [452, 844], "cafe": [452, 844], "64030": [452, 844], "65280": [452, 844], "51966": [452, 844], "replace_al": [453, 845], "123abc": [453, 845], "abc456": [453, 845], "abcabc": [454, 846], "123a123": [454, 846], "bc": [454, 526, 846], "trail": [456, 462, 848, 854], "worl": [456, 462, 848, 854], "subslic": [457, 849], "pear": [457, 849], "papaya": [457, 849], "dragonfruit": [457, 849], "s_slice": 457, "ear": [457, 849], "aya": [457, 849], "uit": [457, 849], "ya": [457, 849], "onf": [457, 849], "a_1": [459, 851, 872, 893], "d_4": [459, 851], "rename_field": [459, 460, 851, 852], "first_part": [459, 460, 851, 852], "second_part": [459, 460, 851, 852], "remaind": [460, 852], "app": [461, 853], "has_prefix": 461, "polarstemporaltyp": [463, 855], "tz_awar": [463, 855], "utc": [463, 730, 855], "strftime": [463, 855], "zulu": [463, 855], "iso8601": [463, 855], "yet": [463, 855], "anywher": [463, 855], "3f": 463, "sun": [463, 855], "34": [463, 855], "lowercas": [464, 856], "variant": [464, 465], "uppercas": [465, 857], "100000": 466, "0010": 466, "0001": 466, "00000": 466, "00001": 466, "my_struct": [467, 468, 525], "anymor": 468, "panicexcept": [468, 546], "761594": [475, 537, 869, 893], "replic": [476, 537, 877, 893], "vals_phys": [476, 537], "largest": [477, 537, 878, 893], "smallest": [477, 537, 878, 893], "bottom_k": [477, 537], "value_count": [479, 537, 893], "9223372036854775807": [480, 537], "multithread": [481, 537], "columnwis": [484, 485], "AND": 484, "bitwis": [484, 485], "returns_scalar": 486, "Be": 487, "argsort": [488, 537, 893], "hamburg": 491, "lag": 492, "mimic": 492, "a_lag_": 492, "a_rol": 492, "plai": 493, "swim": 493, "walk": 493, "full_sent": 493, "covari": 495, "acc": [496, 497, 505, 520], "intoexpr": [496, 505], "include_init": 496, "accumul": [496, 497, 505, 520], "fn": [496, 497, 505, 520], "new_valu": [496, 497, 505, 520], "simpli": [496, 505], "cumreduc": 496, "across": [498, 526], "syntact": [498, 503, 504, 508, 519, 522, 526, 827, 893], "sugar": [498, 503, 504, 508, 519, 522, 526, 827, 893], "cumfold": 498, "999999": 500, "add_week": 501, "add_dai": 501, "add_second": 501, "add_millisecond": 501, "add_hour": 501, "add_millisec": 501, "ond": 501, "eval": 502, "mathemat": 502, "a_b_doubl": 502, "fstring": 506, "placehold": 506, "hello_": 506, "_world": 506, "foo_": 506, "_bar_": 506, "foo_a_bar_1": 506, "foo_b_bar_2": 506, "foo_c_bar_3": 506, "epoch": [507, 696], "timestep": 507, "1666683077": 507, "1666683099": 507, "39": 507, "12345": [507, 675, 745, 808, 893], "12346": 507, "agg_group": [508, 537], "allow_object": 511, "unknown": 511, "valueexcept": 511, "selector": [513, 516, 526], "544705": 518, "mode": [521, 537, 893], "propagate_nan": 523, "spearman": 523, "605551": 524, "605551275463989": 524, "a_and_b": 525, "isn": 529, "thens": 529, "chain": 529, "sometim": 536, "arcco": [537, 893], "arccosh": [537, 893], "arcsin": [537, 893], "arcsinh": [537, 893], "arctan": [537, 893], "arctanh": [537, 893], "arg_max": [537, 893], "arg_min": [537, 893], "arg_uniqu": [537, 893], "backward_fil": 537, "clip_max": [537, 893], "clip_min": [537, 893], "co": [537, 893], "cosh": [537, 893], "cumcount": 537, "cummax": [537, 893], "cummin": [537, 893], "cumprod": [537, 893], "cumulative_ev": [537, 893], "entropi": [537, 893], "ewm_mean": [537, 893], "ewm_std": [537, 893], "ewm_var": [537, 893], "extend_const": [537, 893], "flatten": 537, "inspect": [537, 619], "is_between": 537, "is_finit": [537, 893], "is_first": [537, 893], "is_in": [537, 893], "is_infinit": [537, 893], "is_nan": [537, 893], "is_not_nan": [537, 893], "is_not_nul": [537, 893], "kurtosi": [537, 893], "log10": [537, 893], "map_alia": 537, "nan_max": [537, 893], "nan_min": [537, 893], "pct_chang": [537, 893], "pow": 537, "reinterpret": [537, 893], "repeat_bi": 537, "reshap": [537, 893], "rolling_appli": [537, 893], "rolling_median": [537, 893], "rolling_quantil": [537, 893], "rolling_skew": [537, 893], "rolling_std": [537, 893], "rolling_var": [537, 893], "search_sort": [537, 893], "set_sort": [537, 893], "shrink_dtyp": [537, 893], "sin": [537, 893], "sinh": [537, 893], "sort_bi": 537, "tan": [537, 893], "tanh": [537, 893], "to_phys": [537, 893], "top_k": [537, 893], "unique_count": [537, 893], "expos": 546, "registr": 546, "miscellan": 546, "arrowerror": 546, "invalidoperationerror": 546, "nodataerror": 546, "notfounderror": 546, "schemaerror": 546, "shapeerror": 546, "build_info": 546, "show_vers": 546, "sqlcontext": [546, 899], "hit": [549, 619], "node": [549, 570, 577, 585, 588, 619], "huge": [552, 619], "saver": [552, 619], "purpos": [560, 619], "help": [560, 619], "influenc": [560, 577, 619], "read_json": [565, 611, 619], "lazygroupbi": [566, 567, 568, 619], "typeerror": [566, 619], "subscript": [566, 619], "validate_output_schema": [577, 619], "past": [577, 619], "paramount": [577, 619], "hard": [577, 619], "bug": [577, 613, 619], "invari": [577, 619], "upheld": [577, 619], "prune": [577, 619], "show_plot": [585, 619], "truncate_nod": [585, 619], "figsiz": [585, 594, 619], "gantt": [585, 619], "chart": [585, 619], "matplotlib": [585, 594, 619], "plot": [585, 594, 619], "groupby_partit": [585, 619], "470": [585, 619], "475": [585, 619], "1964": [585, 619], "from_json": [587, 619], "swap": [588, 619], "output_path": [594, 619], "raw_output": [594, 619], "figur": [594, 619], "persist": [595, 596, 619], "ram": [595, 596, 619], "slightli": [595, 596, 619], "my_larger_than_ram_fil": [595, 596, 619], "data_pagesize_limit": [596, 619], "290994": [599, 619], "118034": [599, 619], "433013": [599, 619], "1875": [605, 619], "extern": [609, 619], "df_a": [609, 619], "df_other": [609, 619], "afoo": [609, 619], "cfoo": [609, 619], "train_df": [609, 619], "feature_0": [609, 619], "feature_1": [609, 619], "test_df": [609, 619], "_train": [609, 619], "feature_0_train": [609, 619], "dataframescan": [611, 619], "output_schema": [611, 619], "unique_nam": 612, "profil": 619, "sink_ipc": 619, "sink_parquet": 619, "with_context": 619, "sr": [624, 893], "new_aliased_sr": [624, 893], "append_chunk": [627, 893], "super": [627, 893], "141593": [629, 893], "292432": [630, 893], "549306": [634, 893], "listnamespac": [641, 739, 893], "catnamespac": 673, "56789": [675, 745, 808, 893], "901234": [675, 745, 808, 893], "pi": [682, 822, 868, 893], "1232e": [682, 893], "quick": [689, 893], "series_num": [689, 893], "581139": [689, 893], "series_str": [689, 893], "datetimenamespac": 694, "1583020800": 696, "1585699200": 696, "1588291200": 696, "nyc": 696, "edt": 696, "1583038800": 696, "1585717200": 696, "1588309200": 696, "500m": [707, 709, 715, 721], "500000": 707, "2m": 712, "500000000": 715, "date_minus_1y_2mon": 717, "165": [720, 725], "series_equ": [720, 725, 893], "timestamp_u": 724, "978307200000000000": 724, "978393600000000000": 724, "978480000000000000": 724, "happen": 730, "brussels_t": 730, "brussel": 730, "005": [733, 893], "06293300616044681": [733, 893], "65": [733, 893], "8568409950394724": [733, 893], "4000000": [734, 893], "814697265625": [734, 893], "stringnamespac": [739, 829, 893], "bitmask": [747, 893], "swiftli": [747, 893], "10734580197236529959": [748, 893], "3022416320763508302": [748, 893], "13756996518000038261": [748, 893], "datelik": [753, 893], "166667": [787, 893], "142857": [787, 893], "512": [787, 893], "peak": [788, 789, 893], "nanstd": [798, 893], "858612": [798, 893], "200": [799, 800, 802, 893], "400": [799, 800, 802, 893], "150": [800, 893], "250": [800, 893], "350": [800, 893], "450": [800, 893], "381802": [804, 893], "dev": [805, 893], "57": [808, 893], "frequent": [812, 813, 893], "mutat": [813, 893], "2246e": [822, 868, 893], "divisor": [828, 882, 893], "6331e16": [868, 893], "lib": [871, 893], "int64arrai": [871, 893], "a_2": [872, 893], "a_3": [872, 893], "zero_copy_onli": [875, 893], "writabl": [875, 893], "view": [875, 893], "presenc": [875, 893], "immut": [875, 893], "made": [875, 893], "ignore_nul": [883, 893], "seriesview": [883, 893], "arraylik": 893, "nan_to_nul": 893, "dtype_if_empti": 893, "position": 893, "scenario": 893, "through": 893, "arg_tru": 893, "chunk_length": 893, "get_chunk": 893, "has_valid": 893, "is_boolean": 893, "is_datelik": 893, "is_float": 893, "is_numer": 893, "is_sort": 893, "is_utf8": 893, "new_from_index": 893, "peak_max": 893, "peak_min": 893, "set_at_idx": 893, "readthedoc": 900}, "objects": {"polars": [[2, 0, 1, "", "Binary"], [3, 0, 1, "", "Boolean"], [4, 0, 1, "", "Categorical"], [30, 0, 1, "", "DataType"], [31, 0, 1, "", "Date"], [32, 0, 1, "", "Datetime"], [33, 0, 1, "", "Duration"], [34, 0, 1, "", "Float32"], [35, 0, 1, "", "Float64"], [36, 0, 1, "", "Int16"], [37, 0, 1, "", "Int32"], [38, 0, 1, "", "Int64"], [39, 0, 1, "", "Int8"], [40, 0, 1, "", "List"], [41, 0, 1, "", "Null"], [42, 0, 1, "", "Object"], [899, 0, 1, "", "SQLContext"], [46, 0, 1, "", "StringCache"], [47, 0, 1, "", "Struct"], [48, 0, 1, "", "Time"], [49, 0, 1, "", "UInt16"], [50, 0, 1, "", "UInt32"], [51, 0, 1, "", "UInt64"], [52, 0, 1, "", "UInt8"], [53, 0, 1, "", "Unknown"], [54, 0, 1, "", "Utf8"], [55, 4, 1, "", "align_frames"], [484, 4, 1, "", "all"], [485, 4, 1, "", "any"], [486, 4, 1, "", "apply"], [487, 4, 1, "", "arange"], [60, 4, 1, "", "arg_where"], [488, 4, 1, "", "argsort_by"], [489, 4, 1, "", "avg"], [61, 4, 1, "", "build_info"], [490, 4, 1, "", "coalesce"], [491, 4, 1, "", "col"], [62, 4, 1, "", "collect_all"], [63, 4, 1, "", "concat"], [492, 4, 1, "", "concat_list"], [493, 4, 1, "", "concat_str"], [494, 4, 1, "", "count"], [495, 4, 1, "", "cov"], [496, 4, 1, "", "cumfold"], [497, 4, 1, "", "cumreduce"], [498, 4, 1, "", "cumsum"], [64, 4, 1, "", "cut"], [499, 4, 1, "", "date"], [65, 4, 1, "", "date_range"], [500, 4, 1, "", "datetime"], [501, 4, 1, "", "duration"], [502, 4, 1, "", "element"], [503, 4, 1, "", "exclude"], [504, 4, 1, "", "first"], [505, 4, 1, "", "fold"], [506, 4, 1, "", "format"], [78, 4, 1, "", "from_arrow"], [79, 4, 1, "", "from_dataframe"], [80, 4, 1, "", "from_dict"], [81, 4, 1, "", "from_dicts"], [507, 4, 1, "", "from_epoch"], [82, 4, 1, "", "from_numpy"], [83, 4, 1, "", "from_pandas"], [84, 4, 1, "", "from_records"], [85, 4, 1, "", "get_dummies"], [86, 4, 1, "", "get_idx_type"], [508, 4, 1, "", "groups"], [509, 4, 1, "", "head"], [510, 4, 1, "", "list"], [511, 4, 1, "", "lit"], [512, 4, 1, "", "map"], [513, 4, 1, "", "max"], [514, 4, 1, "", "mean"], [515, 4, 1, "", "median"], [516, 4, 1, "", "min"], [517, 4, 1, "", "n_unique"], [88, 4, 1, "", "ones"], [518, 4, 1, "", "pearson_corr"], [519, 4, 1, "", "quantile"], [89, 4, 1, "", "read_avro"], [90, 4, 1, "", "read_csv"], [91, 4, 1, "", "read_csv_batched"], [92, 4, 1, "", "read_delta"], [93, 4, 1, "", "read_excel"], [94, 4, 1, "", "read_ipc"], [95, 4, 1, "", "read_ipc_schema"], [96, 4, 1, "", "read_json"], [97, 4, 1, "", "read_ndjson"], [98, 4, 1, "", "read_parquet"], [99, 4, 1, "", "read_parquet_schema"], [100, 4, 1, "", "read_sql"], [520, 4, 1, "", "reduce"], [521, 4, 1, "", "repeat"], [101, 4, 1, "", "scan_csv"], [102, 4, 1, "", "scan_delta"], [103, 4, 1, "", "scan_ds"], [104, 4, 1, "", "scan_ipc"], [105, 4, 1, "", "scan_ndjson"], [106, 4, 1, "", "scan_parquet"], [522, 4, 1, "", "select"], [107, 4, 1, "", "show_versions"], [523, 4, 1, "", "spearman_rank_corr"], [524, 4, 1, "", "std"], [525, 4, 1, "", "struct"], [526, 4, 1, "", "sum"], [527, 4, 1, "", "tail"], [114, 4, 1, "", "threadpool_size"], [115, 4, 1, "", "toggle_string_cache"], [528, 4, 1, "", "var"], [529, 4, 1, "", "when"], [116, 4, 1, "", "zeros"]], "polars.Binary": [[2, 1, 1, "", "__init__"]], "polars.Boolean": [[3, 1, 1, "", "__init__"]], "polars.Categorical": [[4, 1, 1, "", "__init__"]], "polars.Config": [[5, 1, 1, "", "load"], [6, 1, 1, "", "restore_defaults"], [7, 1, 1, "", "save"], [8, 1, 1, "", "set_ascii_tables"], [9, 1, 1, "", "set_fmt_float"], [10, 1, 1, "", "set_fmt_str_lengths"], [11, 1, 1, "", "set_tbl_cell_alignment"], [12, 1, 1, "", "set_tbl_cols"], [13, 1, 1, "", "set_tbl_column_data_type_inline"], [14, 1, 1, "", "set_tbl_dataframe_shape_below"], [15, 1, 1, "", "set_tbl_formatting"], [16, 1, 1, "", "set_tbl_hide_column_data_types"], [17, 1, 1, "", "set_tbl_hide_column_names"], [18, 1, 1, "", "set_tbl_hide_dataframe_shape"], [19, 1, 1, "", "set_tbl_hide_dtype_separator"], [20, 1, 1, "", "set_tbl_rows"], [21, 1, 1, "", "set_tbl_width_chars"], [22, 1, 1, "", "set_verbose"], [23, 1, 1, "", "state"]], "polars.DataFrame": [[119, 1, 1, "", "__dataframe__"], [120, 1, 1, "", "apply"], [121, 1, 1, "", "cleared"], [122, 1, 1, "", "clone"], [123, 2, 1, "", "columns"], [124, 1, 1, "", "describe"], [125, 1, 1, "", "drop"], [126, 1, 1, "", "drop_in_place"], [127, 1, 1, "", "drop_nulls"], [128, 2, 1, "", "dtypes"], [129, 1, 1, "", "estimated_size"], [130, 1, 1, "", "explode"], [131, 1, 1, "", "extend"], [132, 1, 1, "", "fill_nan"], [133, 1, 1, "", "fill_null"], [134, 1, 1, "", "filter"], [135, 1, 1, "", "find_idx_by_name"], [136, 1, 1, "", "fold"], [137, 1, 1, "", "frame_equal"], [138, 1, 1, "", "get_column"], [139, 1, 1, "", "get_columns"], [140, 1, 1, "", "glimpse"], [141, 1, 1, "", "groupby"], [142, 1, 1, "", "groupby_dynamic"], [143, 1, 1, "", "groupby_rolling"], [144, 1, 1, "", "hash_rows"], [145, 1, 1, "", "head"], [146, 2, 1, "", "height"], [147, 1, 1, "", "hstack"], [148, 1, 1, "", "insert_at_idx"], [149, 1, 1, "", "interpolate"], [150, 1, 1, "", "is_duplicated"], [151, 1, 1, "", "is_empty"], [152, 1, 1, "", "is_unique"], [153, 1, 1, "", "item"], [154, 1, 1, "", "iter_rows"], [155, 1, 1, "", "iter_slices"], [156, 1, 1, "", "join"], [157, 1, 1, "", "join_asof"], [158, 1, 1, "", "lazy"], [159, 1, 1, "", "limit"], [160, 1, 1, "", "max"], [161, 1, 1, "", "mean"], [162, 1, 1, "", "median"], [163, 1, 1, "", "melt"], [164, 1, 1, "", "merge_sorted"], [165, 1, 1, "", "min"], [166, 1, 1, "", "n_chunks"], [167, 1, 1, "", "n_unique"], [168, 1, 1, "", "null_count"], [169, 1, 1, "", "partition_by"], [170, 1, 1, "", "pearson_corr"], [171, 1, 1, "", "pipe"], [172, 1, 1, "", "pivot"], [173, 1, 1, "", "product"], [174, 1, 1, "", "quantile"], [175, 1, 1, "", "rechunk"], [176, 1, 1, "", "rename"], [177, 1, 1, "", "replace"], [178, 1, 1, "", "replace_at_idx"], [179, 1, 1, "", "reverse"], [180, 1, 1, "", "row"], [181, 1, 1, "", "rows"], [182, 1, 1, "", "sample"], [183, 2, 1, "", "schema"], [184, 1, 1, "", "select"], [185, 2, 1, "", "shape"], [186, 1, 1, "", "shift"], [187, 1, 1, "", "shift_and_fill"], [188, 1, 1, "", "shrink_to_fit"], [189, 1, 1, "", "slice"], [190, 1, 1, "", "sort"], [191, 1, 1, "", "std"], [192, 1, 1, "", "sum"], [193, 1, 1, "", "tail"], [194, 1, 1, "", "take_every"], [195, 1, 1, "", "to_arrow"], [196, 1, 1, "", "to_dict"], [197, 1, 1, "", "to_dicts"], [198, 1, 1, "", "to_dummies"], [199, 1, 1, "", "to_numpy"], [200, 1, 1, "", "to_pandas"], [201, 1, 1, "", "to_series"], [202, 1, 1, "", "to_struct"], [203, 1, 1, "", "transpose"], [204, 1, 1, "", "unique"], [205, 1, 1, "", "unnest"], [206, 1, 1, "", "unstack"], [207, 1, 1, "", "upsample"], [208, 1, 1, "", "var"], [209, 1, 1, "", "vstack"], [210, 2, 1, "", "width"], [211, 1, 1, "", "with_column"], [212, 1, 1, "", "with_columns"], [213, 1, 1, "", "with_row_count"], [24, 1, 1, "", "write_avro"], [25, 1, 1, "", "write_csv"], [26, 1, 1, "", "write_ipc"], [27, 1, 1, "", "write_json"], [28, 1, 1, "", "write_ndjson"], [29, 1, 1, "", "write_parquet"]], "polars.DataType": [[30, 1, 1, "", "__init__"]], "polars.Date": [[31, 1, 1, "", "__init__"]], "polars.Datetime": [[32, 1, 1, "", "__init__"]], "polars.Duration": [[33, 1, 1, "", "__init__"]], "polars.Expr": [[241, 1, 1, "", "abs"], [242, 1, 1, "", "agg_groups"], [243, 1, 1, "", "alias"], [244, 1, 1, "", "all"], [245, 1, 1, "", "any"], [246, 1, 1, "", "append"], [247, 1, 1, "", "apply"], [248, 1, 1, "", "arccos"], [249, 1, 1, "", "arccosh"], [250, 1, 1, "", "arcsin"], [251, 1, 1, "", "arcsinh"], [252, 1, 1, "", "arctan"], [253, 1, 1, "", "arctanh"], [254, 1, 1, "", "arg_max"], [255, 1, 1, "", "arg_min"], [256, 1, 1, "", "arg_sort"], [257, 1, 1, "", "arg_unique"], [258, 1, 1, "", "argsort"], [284, 1, 1, "", "backward_fill"], [290, 1, 1, "", "cast"], [292, 1, 1, "", "ceil"], [293, 1, 1, "", "clip"], [294, 1, 1, "", "clip_max"], [295, 1, 1, "", "clip_min"], [296, 1, 1, "", "cos"], [297, 1, 1, "", "cosh"], [298, 1, 1, "", "count"], [299, 1, 1, "", "cumcount"], [300, 1, 1, "", "cummax"], [301, 1, 1, "", "cummin"], [302, 1, 1, "", "cumprod"], [303, 1, 1, "", "cumsum"], [304, 1, 1, "", "cumulative_eval"], [305, 1, 1, "", "diff"], [306, 1, 1, "", "dot"], [307, 1, 1, "", "drop_nans"], [308, 1, 1, "", "drop_nulls"], [342, 1, 1, "", "entropy"], [343, 1, 1, "", "ewm_mean"], [344, 1, 1, "", "ewm_std"], [345, 1, 1, "", "ewm_var"], [346, 1, 1, "", "exclude"], [347, 1, 1, "", "exp"], [348, 1, 1, "", "explode"], [349, 1, 1, "", "extend_constant"], [350, 1, 1, "", "fill_nan"], [351, 1, 1, "", "fill_null"], [352, 1, 1, "", "filter"], [353, 1, 1, "", "first"], [354, 1, 1, "", "flatten"], [355, 1, 1, "", "floor"], [356, 1, 1, "", "forward_fill"], [357, 1, 1, "", "hash"], [358, 1, 1, "", "head"], [359, 1, 1, "", "inspect"], [360, 1, 1, "", "interpolate"], [361, 1, 1, "", "is_between"], [362, 1, 1, "", "is_duplicated"], [363, 1, 1, "", "is_finite"], [364, 1, 1, "", "is_first"], [365, 1, 1, "", "is_in"], [366, 1, 1, "", "is_infinite"], [367, 1, 1, "", "is_nan"], [368, 1, 1, "", "is_not"], [369, 1, 1, "", "is_not_nan"], [370, 1, 1, "", "is_not_null"], [371, 1, 1, "", "is_null"], [372, 1, 1, "", "is_unique"], [373, 1, 1, "", "keep_name"], [374, 1, 1, "", "kurtosis"], [375, 1, 1, "", "last"], [376, 1, 1, "", "len"], [377, 1, 1, "", "limit"], [378, 1, 1, "", "list"], [379, 1, 1, "", "log"], [380, 1, 1, "", "log10"], [381, 1, 1, "", "lower_bound"], [382, 1, 1, "", "map"], [383, 1, 1, "", "map_alias"], [384, 1, 1, "", "max"], [385, 1, 1, "", "mean"], [386, 1, 1, "", "median"], [393, 1, 1, "", "min"], [394, 1, 1, "", "mode"], [395, 1, 1, "", "n_unique"], [396, 1, 1, "", "nan_max"], [397, 1, 1, "", "nan_min"], [398, 1, 1, "", "null_count"], [399, 1, 1, "", "over"], [400, 1, 1, "", "pct_change"], [401, 1, 1, "", "pow"], [402, 1, 1, "", "prefix"], [403, 1, 1, "", "product"], [404, 1, 1, "", "quantile"], [405, 1, 1, "", "rank"], [406, 1, 1, "", "rechunk"], [407, 1, 1, "", "reinterpret"], [408, 1, 1, "", "repeat_by"], [409, 1, 1, "", "reshape"], [410, 1, 1, "", "reverse"], [411, 1, 1, "", "rolling_apply"], [412, 1, 1, "", "rolling_max"], [413, 1, 1, "", "rolling_mean"], [414, 1, 1, "", "rolling_median"], [415, 1, 1, "", "rolling_min"], [416, 1, 1, "", "rolling_quantile"], [417, 1, 1, "", "rolling_skew"], [418, 1, 1, "", "rolling_std"], [419, 1, 1, "", "rolling_sum"], [420, 1, 1, "", "rolling_var"], [421, 1, 1, "", "round"], [422, 1, 1, "", "sample"], [423, 1, 1, "", "search_sorted"], [424, 1, 1, "", "set_sorted"], [425, 1, 1, "", "shift"], [426, 1, 1, "", "shift_and_fill"], [427, 1, 1, "", "shrink_dtype"], [428, 1, 1, "", "shuffle"], [429, 1, 1, "", "sign"], [430, 1, 1, "", "sin"], [431, 1, 1, "", "sinh"], [432, 1, 1, "", "skew"], [433, 1, 1, "", "slice"], [434, 1, 1, "", "sort"], [435, 1, 1, "", "sort_by"], [436, 1, 1, "", "sqrt"], [437, 1, 1, "", "std"], [469, 1, 1, "", "suffix"], [470, 1, 1, "", "sum"], [471, 1, 1, "", "tail"], [472, 1, 1, "", "take"], [473, 1, 1, "", "take_every"], [474, 1, 1, "", "tan"], [475, 1, 1, "", "tanh"], [476, 1, 1, "", "to_physical"], [477, 1, 1, "", "top_k"], [478, 1, 1, "", "unique"], [479, 1, 1, "", "unique_counts"], [480, 1, 1, "", "upper_bound"], [481, 1, 1, "", "value_counts"], [482, 1, 1, "", "var"], [483, 1, 1, "", "where"]], "polars.Expr.arr": [[259, 1, 1, "", "arg_max"], [260, 1, 1, "", "arg_min"], [261, 1, 1, "", "concat"], [262, 1, 1, "", "contains"], [263, 1, 1, "", "diff"], [264, 1, 1, "", "eval"], [265, 1, 1, "", "explode"], [266, 1, 1, "", "first"], [267, 1, 1, "", "get"], [268, 1, 1, "", "head"], [269, 1, 1, "", "join"], [270, 1, 1, "", "last"], [271, 1, 1, "", "lengths"], [272, 1, 1, "", "max"], [273, 1, 1, "", "mean"], [274, 1, 1, "", "min"], [275, 1, 1, "", "reverse"], [276, 1, 1, "", "shift"], [277, 1, 1, "", "slice"], [278, 1, 1, "", "sort"], [279, 1, 1, "", "sum"], [280, 1, 1, "", "tail"], [281, 1, 1, "", "take"], [282, 1, 1, "", "to_struct"], [283, 1, 1, "", "unique"]], "polars.Expr.bin": [[285, 1, 1, "", "contains"], [286, 1, 1, "", "decode"], [287, 1, 1, "", "encode"], [288, 1, 1, "", "ends_with"], [289, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[291, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[309, 1, 1, "", "cast_time_unit"], [310, 1, 1, "", "cast_time_zone"], [311, 1, 1, "", "combine"], [312, 1, 1, "", "day"], [313, 1, 1, "", "days"], [314, 1, 1, "", "epoch"], [315, 1, 1, "", "hour"], [316, 1, 1, "", "hours"], [317, 1, 1, "", "iso_year"], [318, 1, 1, "", "microsecond"], [319, 1, 1, "", "microseconds"], [320, 1, 1, "", "millisecond"], [321, 1, 1, "", "milliseconds"], [322, 1, 1, "", "minute"], [323, 1, 1, "", "minutes"], [324, 1, 1, "", "month"], [325, 1, 1, "", "nanosecond"], [326, 1, 1, "", "nanoseconds"], [327, 1, 1, "", "offset_by"], [328, 1, 1, "", "ordinal_day"], [329, 1, 1, "", "quarter"], [330, 1, 1, "", "round"], [331, 1, 1, "", "second"], [332, 1, 1, "", "seconds"], [333, 1, 1, "", "strftime"], [334, 1, 1, "", "timestamp"], [335, 1, 1, "", "truncate"], [336, 1, 1, "", "tz_localize"], [337, 1, 1, "", "week"], [338, 1, 1, "", "weekday"], [339, 1, 1, "", "with_time_unit"], [340, 1, 1, "", "with_time_zone"], [341, 1, 1, "", "year"]], "polars.Expr.meta": [[387, 1, 1, "", "has_multiple_outputs"], [388, 1, 1, "", "is_regex_projection"], [389, 1, 1, "", "output_name"], [390, 1, 1, "", "pop"], [391, 1, 1, "", "root_names"], [392, 1, 1, "", "undo_aliases"]], "polars.Expr.str": [[438, 1, 1, "", "concat"], [439, 1, 1, "", "contains"], [440, 1, 1, "", "count_match"], [441, 1, 1, "", "decode"], [442, 1, 1, "", "encode"], [443, 1, 1, "", "ends_with"], [444, 1, 1, "", "explode"], [445, 1, 1, "", "extract"], [446, 1, 1, "", "extract_all"], [447, 1, 1, "", "json_path_match"], [448, 1, 1, "", "lengths"], [449, 1, 1, "", "ljust"], [450, 1, 1, "", "lstrip"], [451, 1, 1, "", "n_chars"], [452, 1, 1, "", "parse_int"], [453, 1, 1, "", "replace"], [454, 1, 1, "", "replace_all"], [455, 1, 1, "", "rjust"], [456, 1, 1, "", "rstrip"], [457, 1, 1, "", "slice"], [458, 1, 1, "", "split"], [459, 1, 1, "", "split_exact"], [460, 1, 1, "", "splitn"], [461, 1, 1, "", "starts_with"], [462, 1, 1, "", "strip"], [463, 1, 1, "", "strptime"], [464, 1, 1, "", "to_lowercase"], [465, 1, 1, "", "to_uppercase"], [466, 1, 1, "", "zfill"]], "polars.Expr.struct": [[467, 1, 1, "", "field"], [468, 1, 1, "", "rename_fields"]], "polars.Float32": [[34, 1, 1, "", "__init__"]], "polars.Float64": [[35, 1, 1, "", "__init__"]], "polars.Int16": [[36, 1, 1, "", "__init__"]], "polars.Int32": [[37, 1, 1, "", "__init__"]], "polars.Int64": [[38, 1, 1, "", "__init__"]], "polars.Int8": [[39, 1, 1, "", "__init__"]], "polars.LazyFrame": [[549, 1, 1, "", "cache"], [550, 1, 1, "", "cleared"], [551, 1, 1, "", "clone"], [552, 1, 1, "", "collect"], [553, 2, 1, "", "columns"], [554, 1, 1, "", "describe_optimized_plan"], [555, 1, 1, "", "describe_plan"], [556, 1, 1, "", "drop"], [557, 1, 1, "", "drop_nulls"], [558, 2, 1, "", "dtypes"], [559, 1, 1, "", "explode"], [560, 1, 1, "", "fetch"], [561, 1, 1, "", "fill_nan"], [562, 1, 1, "", "fill_null"], [563, 1, 1, "", "filter"], [564, 1, 1, "", "first"], [565, 1, 1, "", "from_json"], [566, 1, 1, "", "groupby"], [567, 1, 1, "", "groupby_dynamic"], [568, 1, 1, "", "groupby_rolling"], [569, 1, 1, "", "head"], [570, 1, 1, "", "inspect"], [571, 1, 1, "", "interpolate"], [572, 1, 1, "", "join"], [573, 1, 1, "", "join_asof"], [574, 1, 1, "", "last"], [575, 1, 1, "", "lazy"], [576, 1, 1, "", "limit"], [577, 1, 1, "", "map"], [578, 1, 1, "", "max"], [579, 1, 1, "", "mean"], [580, 1, 1, "", "median"], [581, 1, 1, "", "melt"], [582, 1, 1, "", "merge_sorted"], [583, 1, 1, "", "min"], [584, 1, 1, "", "pipe"], [585, 1, 1, "", "profile"], [586, 1, 1, "", "quantile"], [587, 1, 1, "", "read_json"], [588, 1, 1, "", "rename"], [589, 1, 1, "", "reverse"], [590, 2, 1, "", "schema"], [591, 1, 1, "", "select"], [592, 1, 1, "", "shift"], [593, 1, 1, "", "shift_and_fill"], [594, 1, 1, "", "show_graph"], [595, 1, 1, "", "sink_ipc"], [596, 1, 1, "", "sink_parquet"], [597, 1, 1, "", "slice"], [598, 1, 1, "", "sort"], [599, 1, 1, "", "std"], [600, 1, 1, "", "sum"], [601, 1, 1, "", "tail"], [602, 1, 1, "", "take_every"], [603, 1, 1, "", "unique"], [604, 1, 1, "", "unnest"], [605, 1, 1, "", "var"], [606, 2, 1, "", "width"], [607, 1, 1, "", "with_column"], [608, 1, 1, "", "with_columns"], [609, 1, 1, "", "with_context"], [610, 1, 1, "", "with_row_count"], [611, 1, 1, "", "write_json"]], "polars.List": [[40, 1, 1, "", "__init__"]], "polars.Null": [[41, 1, 1, "", "__init__"]], "polars.Object": [[42, 1, 1, "", "__init__"]], "polars.SQLContext": [[43, 1, 1, "", "execute"], [44, 1, 1, "", "query"], [45, 1, 1, "", "register"]], "polars.Series": [[623, 1, 1, "", "abs"], [624, 1, 1, "", "alias"], [625, 1, 1, "", "all"], [626, 1, 1, "", "any"], [627, 1, 1, "", "append"], [628, 1, 1, "", "apply"], [629, 1, 1, "", "arccos"], [630, 1, 1, "", "arccosh"], [631, 1, 1, "", "arcsin"], [632, 1, 1, "", "arcsinh"], [633, 1, 1, "", "arctan"], [634, 1, 1, "", "arctanh"], [635, 1, 1, "", "arg_max"], [636, 1, 1, "", "arg_min"], [637, 1, 1, "", "arg_sort"], [638, 1, 1, "", "arg_true"], [639, 1, 1, "", "arg_unique"], [640, 1, 1, "", "argsort"], [641, 3, 1, "", "arr"], [672, 1, 1, "", "cast"], [673, 3, 1, "", "cat"], [675, 1, 1, "", "ceil"], [676, 1, 1, "", "chunk_lengths"], [677, 1, 1, "", "cleared"], [678, 1, 1, "", "clip"], [679, 1, 1, "", "clip_max"], [680, 1, 1, "", "clip_min"], [681, 1, 1, "", "clone"], [682, 1, 1, "", "cos"], [683, 1, 1, "", "cosh"], [684, 1, 1, "", "cummax"], [685, 1, 1, "", "cummin"], [686, 1, 1, "", "cumprod"], [687, 1, 1, "", "cumsum"], [688, 1, 1, "", "cumulative_eval"], [689, 1, 1, "", "describe"], [690, 1, 1, "", "diff"], [691, 1, 1, "", "dot"], [692, 1, 1, "", "drop_nans"], [693, 1, 1, "", "drop_nulls"], [694, 3, 1, "", "dt"], [732, 3, 1, "", "dtype"], [733, 1, 1, "", "entropy"], [734, 1, 1, "", "estimated_size"], [735, 1, 1, "", "ewm_mean"], [736, 1, 1, "", "ewm_std"], [737, 1, 1, "", "ewm_var"], [738, 1, 1, "", "exp"], [739, 1, 1, "", "explode"], [740, 1, 1, "", "extend_constant"], [741, 1, 1, "", "fill_nan"], [742, 1, 1, "", "fill_null"], [743, 1, 1, "", "filter"], [744, 3, 1, "", "flags"], [745, 1, 1, "", "floor"], [746, 1, 1, "", "get_chunks"], [747, 1, 1, "", "has_validity"], [748, 1, 1, "", "hash"], [749, 1, 1, "", "head"], [750, 3, 1, "", "inner_dtype"], [751, 1, 1, "", "interpolate"], [752, 1, 1, "", "is_boolean"], [753, 1, 1, "", "is_datelike"], [754, 1, 1, "", "is_duplicated"], [755, 1, 1, "", "is_empty"], [756, 1, 1, "", "is_finite"], [757, 1, 1, "", "is_first"], [758, 1, 1, "", "is_float"], [759, 1, 1, "", "is_in"], [760, 1, 1, "", "is_infinite"], [761, 1, 1, "", "is_nan"], [762, 1, 1, "", "is_not_nan"], [763, 1, 1, "", "is_not_null"], [764, 1, 1, "", "is_null"], [765, 1, 1, "", "is_numeric"], [766, 1, 1, "", "is_sorted"], [767, 1, 1, "", "is_unique"], [768, 1, 1, "", "is_utf8"], [769, 1, 1, "", "item"], [770, 1, 1, "", "kurtosis"], [771, 1, 1, "", "len"], [772, 1, 1, "", "limit"], [773, 1, 1, "", "log"], [774, 1, 1, "", "log10"], [775, 1, 1, "", "max"], [776, 1, 1, "", "mean"], [777, 1, 1, "", "median"], [778, 1, 1, "", "min"], [779, 1, 1, "", "mode"], [780, 1, 1, "", "n_chunks"], [781, 1, 1, "", "n_unique"], [782, 3, 1, "", "name"], [783, 1, 1, "", "nan_max"], [784, 1, 1, "", "nan_min"], [785, 1, 1, "", "new_from_index"], [786, 1, 1, "", "null_count"], [787, 1, 1, "", "pct_change"], [788, 1, 1, "", "peak_max"], [789, 1, 1, "", "peak_min"], [790, 1, 1, "", "product"], [791, 1, 1, "", "quantile"], [792, 1, 1, "", "rank"], [793, 1, 1, "", "rechunk"], [794, 1, 1, "", "reinterpret"], [795, 1, 1, "", "rename"], [796, 1, 1, "", "reshape"], [797, 1, 1, "", "reverse"], [798, 1, 1, "", "rolling_apply"], [799, 1, 1, "", "rolling_max"], [800, 1, 1, "", "rolling_mean"], [801, 1, 1, "", "rolling_median"], [802, 1, 1, "", "rolling_min"], [803, 1, 1, "", "rolling_quantile"], [804, 1, 1, "", "rolling_skew"], [805, 1, 1, "", "rolling_std"], [806, 1, 1, "", "rolling_sum"], [807, 1, 1, "", "rolling_var"], [808, 1, 1, "", "round"], [809, 1, 1, "", "sample"], [810, 1, 1, "", "search_sorted"], [811, 1, 1, "", "series_equal"], [812, 1, 1, "", "set"], [813, 1, 1, "", "set_at_idx"], [814, 1, 1, "", "set_sorted"], [815, 3, 1, "", "shape"], [816, 1, 1, "", "shift"], [817, 1, 1, "", "shift_and_fill"], [818, 1, 1, "", "shrink_dtype"], [819, 1, 1, "", "shrink_to_fit"], [820, 1, 1, "", "shuffle"], [821, 1, 1, "", "sign"], [822, 1, 1, "", "sin"], [823, 1, 1, "", "sinh"], [824, 1, 1, "", "skew"], [825, 1, 1, "", "slice"], [826, 1, 1, "", "sort"], [827, 1, 1, "", "sqrt"], [828, 1, 1, "", "std"], [829, 3, 1, "", "str"], [864, 1, 1, "", "sum"], [865, 1, 1, "", "tail"], [866, 1, 1, "", "take"], [867, 1, 1, "", "take_every"], [868, 1, 1, "", "tan"], [869, 1, 1, "", "tanh"], [870, 3, 1, "", "time_unit"], [871, 1, 1, "", "to_arrow"], [872, 1, 1, "", "to_dummies"], [873, 1, 1, "", "to_frame"], [874, 1, 1, "", "to_list"], [875, 1, 1, "", "to_numpy"], [876, 1, 1, "", "to_pandas"], [877, 1, 1, "", "to_physical"], [878, 1, 1, "", "top_k"], [879, 1, 1, "", "unique"], [880, 1, 1, "", "unique_counts"], [881, 1, 1, "", "value_counts"], [882, 1, 1, "", "var"], [883, 1, 1, "", "view"], [884, 1, 1, "", "zip_with"]], "polars.Series.arr": [[642, 1, 1, "", "arg_max"], [643, 1, 1, "", "arg_min"], [644, 1, 1, "", "concat"], [645, 1, 1, "", "contains"], [646, 1, 1, "", "diff"], [647, 1, 1, "", "eval"], [648, 1, 1, "", "explode"], [649, 1, 1, "", "first"], [650, 1, 1, "", "get"], [651, 1, 1, "", "head"], [652, 1, 1, "", "join"], [653, 1, 1, "", "last"], [654, 1, 1, "", "lengths"], [655, 1, 1, "", "max"], [656, 1, 1, "", "mean"], [657, 1, 1, "", "min"], [658, 1, 1, "", "reverse"], [659, 1, 1, "", "shift"], [660, 1, 1, "", "slice"], [661, 1, 1, "", "sort"], [662, 1, 1, "", "sum"], [663, 1, 1, "", "tail"], [664, 1, 1, "", "take"], [665, 1, 1, "", "to_struct"], [666, 1, 1, "", "unique"]], "polars.Series.bin": [[667, 1, 1, "", "contains"], [668, 1, 1, "", "decode"], [669, 1, 1, "", "encode"], [670, 1, 1, "", "ends_with"], [671, 1, 1, "", "starts_with"]], "polars.Series.cat": [[674, 1, 1, "", "set_ordering"]], "polars.Series.dt": [[695, 1, 1, "", "cast_time_unit"], [696, 1, 1, "", "cast_time_zone"], [697, 1, 1, "", "combine"], [698, 1, 1, "", "day"], [699, 1, 1, "", "days"], [700, 1, 1, "", "epoch"], [701, 1, 1, "", "hour"], [702, 1, 1, "", "hours"], [703, 1, 1, "", "iso_year"], [704, 1, 1, "", "max"], [705, 1, 1, "", "mean"], [706, 1, 1, "", "median"], [707, 1, 1, "", "microsecond"], [708, 1, 1, "", "microseconds"], [709, 1, 1, "", "millisecond"], [710, 1, 1, "", "milliseconds"], [711, 1, 1, "", "min"], [712, 1, 1, "", "minute"], [713, 1, 1, "", "minutes"], [714, 1, 1, "", "month"], [715, 1, 1, "", "nanosecond"], [716, 1, 1, "", "nanoseconds"], [717, 1, 1, "", "offset_by"], [718, 1, 1, "", "ordinal_day"], [719, 1, 1, "", "quarter"], [720, 1, 1, "", "round"], [721, 1, 1, "", "second"], [722, 1, 1, "", "seconds"], [723, 1, 1, "", "strftime"], [724, 1, 1, "", "timestamp"], [725, 1, 1, "", "truncate"], [726, 1, 1, "", "tz_localize"], [727, 1, 1, "", "week"], [728, 1, 1, "", "weekday"], [729, 1, 1, "", "with_time_unit"], [730, 1, 1, "", "with_time_zone"], [731, 1, 1, "", "year"]], "polars.Series.str": [[830, 1, 1, "", "concat"], [831, 1, 1, "", "contains"], [832, 1, 1, "", "count_match"], [833, 1, 1, "", "decode"], [834, 1, 1, "", "encode"], [835, 1, 1, "", "ends_with"], [836, 1, 1, "", "explode"], [837, 1, 1, "", "extract"], [838, 1, 1, "", "extract_all"], [839, 1, 1, "", "json_path_match"], [840, 1, 1, "", "lengths"], [841, 1, 1, "", "ljust"], [842, 1, 1, "", "lstrip"], [843, 1, 1, "", "n_chars"], [844, 1, 1, "", "parse_int"], [845, 1, 1, "", "replace"], [846, 1, 1, "", "replace_all"], [847, 1, 1, "", "rjust"], [848, 1, 1, "", "rstrip"], [849, 1, 1, "", "slice"], [850, 1, 1, "", "split"], [851, 1, 1, "", "split_exact"], [852, 1, 1, "", "splitn"], [853, 1, 1, "", "starts_with"], [854, 1, 1, "", "strip"], [855, 1, 1, "", "strptime"], [856, 1, 1, "", "to_lowercase"], [857, 1, 1, "", "to_uppercase"], [858, 1, 1, "", "zfill"]], "polars.Series.struct": [[859, 1, 1, "", "field"], [860, 3, 1, "", "fields"], [861, 1, 1, "", "rename_fields"], [862, 1, 1, "", "to_frame"], [863, 1, 1, "", "unnest"]], "polars.StringCache": [[46, 1, 1, "", "__init__"]], "polars.Struct": [[47, 1, 1, "", "__init__"]], "polars.Time": [[48, 1, 1, "", "__init__"]], "polars.UInt16": [[49, 1, 1, "", "__init__"]], "polars.UInt32": [[50, 1, 1, "", "__init__"]], "polars.UInt64": [[51, 1, 1, "", "__init__"]], "polars.UInt8": [[52, 1, 1, "", "__init__"]], "polars.Unknown": [[53, 1, 1, "", "__init__"]], "polars.Utf8": [[54, 1, 1, "", "__init__"]], "polars.api": [[56, 4, 1, "", "register_dataframe_namespace"], [57, 4, 1, "", "register_expr_namespace"], [58, 4, 1, "", "register_lazyframe_namespace"], [59, 4, 1, "", "register_series_namespace"]], "polars.exceptions": [[66, 5, 1, "", "ArrowError"], [67, 5, 1, "", "ComputeError"], [68, 5, 1, "", "DuplicateError"], [69, 5, 1, "", "InvalidOperationError"], [70, 5, 1, "", "NoDataError"], [71, 5, 1, "", "NoRowsReturned"], [72, 5, 1, "", "NotFoundError"], [73, 5, 1, "", "PanicException"], [74, 5, 1, "", "RowsException"], [75, 5, 1, "", "SchemaError"], [76, 5, 1, "", "ShapeError"], [77, 5, 1, "", "TooManyRowsReturned"]], "polars.internals.batched.BatchedCsvReader": [[87, 1, 1, "", "next_batches"]], "polars.internals.dataframe.groupby.GroupBy": [[214, 1, 1, "", "__iter__"], [215, 1, 1, "", "agg"], [216, 1, 1, "", "all"], [217, 1, 1, "", "apply"], [218, 1, 1, "", "count"], [219, 1, 1, "", "first"], [220, 1, 1, "", "head"], [221, 1, 1, "", "last"], [222, 1, 1, "", "max"], [223, 1, 1, "", "mean"], [224, 1, 1, "", "median"], [225, 1, 1, "", "min"], [226, 1, 1, "", "n_unique"], [227, 1, 1, "", "quantile"], [228, 1, 1, "", "sum"], [229, 1, 1, "", "tail"]], "polars.internals.lazyframe.groupby.LazyGroupBy": [[612, 1, 1, "", "agg"], [613, 1, 1, "", "apply"], [614, 1, 1, "", "head"], [615, 1, 1, "", "tail"]], "polars.testing": [[108, 4, 1, "", "assert_frame_equal"], [109, 4, 1, "", "assert_series_equal"]], "polars.testing.parametric": [[110, 0, 1, "", "column"], [111, 4, 1, "", "columns"], [112, 4, 1, "", "dataframes"], [113, 4, 1, "", "series"]], "polars.testing.parametric.column": [[110, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"extend": [1, 131], "api": [1, 56, 57, 58, 59, 546], "provid": 1, "new": 1, "function": [1, 238, 536, 545], "avail": 1, "registr": 1, "exampl": 1, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884], "binari": [2, 531, 887], "boolean": [3, 532, 888], "categor": 4, "config": [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 117], "load": [5, 117], "restore_default": 6, "save": [7, 117], "set_ascii_t": 8, "set_fmt_float": 9, "set_fmt_str_length": 10, "set_tbl_cell_align": 11, "set_tbl_col": 12, "set_tbl_column_data_type_inlin": 13, "set_tbl_dataframe_shape_below": 14, "set_tbl_format": 15, "set_tbl_hide_column_data_typ": 16, "set_tbl_hide_column_nam": 17, "set_tbl_hide_dataframe_shap": 18, "set_tbl_hide_dtype_separ": 19, "set_tbl_row": 20, "set_tbl_width_char": 21, "set_verbos": 22, "state": [23, 117], "datafram": [24, 25, 26, 27, 28, 29, 112, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 235], "write_avro": 24, "write_csv": 25, "write_ipc": 26, "write_json": [27, 611], "write_ndjson": 28, "write_parquet": 29, "datatyp": 30, "date": [31, 238, 499], "datetim": [32, 500], "durat": [33, 501], "float32": 34, "float64": 35, "int16": 36, "int32": 37, "int64": 38, "int8": 39, "list": [40, 378, 510], "null": 41, "object": 42, "sqlcontext": [43, 44, 45], "execut": 43, "queri": 44, "regist": 45, "stringcach": [46, 545], "struct": [47, 467, 468, 525, 542, 859, 860, 861, 862, 863, 897], "time": [48, 238], "uint16": 49, "uint32": 50, "uint64": 51, "uint8": 52, "unknown": 53, "utf8": 54, "align_fram": 55, "register_dataframe_namespac": 56, "register_expr_namespac": 57, "register_lazyframe_namespac": 58, "register_series_namespac": 59, "arg_wher": 60, "build_info": 61, "collect_al": 62, "concat": [63, 261, 438, 644, 830], "cut": 64, "date_rang": 65, "except": [66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 239], "arrowerror": 66, "computeerror": 67, "duplicateerror": 68, "invalidoperationerror": 69, "nodataerror": 70, "norowsreturn": 71, "notfounderror": 72, "panicexcept": 73, "rowsexcept": 74, "schemaerror": 75, "shapeerror": 76, "toomanyrowsreturn": 77, "from_arrow": 78, "from_datafram": 79, "from_dict": [80, 81], "from_numpi": 82, "from_panda": 83, "from_record": 84, "get_dummi": 85, "get_idx_typ": 86, "intern": [87, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 612, 613, 614, 615], "batch": 87, "batchedcsvread": [87, 547], "next_batch": 87, "ones": 88, "read_avro": 89, "read_csv": 90, "read_csv_batch": 91, "read_delta": 92, "read_excel": 93, "read_ipc": 94, "read_ipc_schema": 95, "read_json": [96, 587], "read_ndjson": 97, "read_parquet": 98, "read_parquet_schema": 99, "read_sql": 100, "scan_csv": 101, "scan_delta": 102, "scan_d": 103, "scan_ipc": 104, "scan_ndjson": 105, "scan_parquet": 106, "show_vers": 107, "test": [108, 109, 110, 111, 112, 113, 900], "assert_frame_equ": 108, "assert_series_equ": 109, "parametr": [110, 111, 112, 113], "column": [110, 111, 123, 534, 553], "seri": [113, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 893], "threadpool_s": 114, "toggle_string_cach": 115, "zero": 116, "option": 117, "current": 117, "us": 117, "context": 117, "manag": 117, "aggreg": [118, 240, 548, 622], "__dataframe__": 119, "appli": [120, 217, 247, 486, 613, 628], "clear": [121, 550, 677], "clone": [122, 551, 681], "describ": [124, 689], "drop": [125, 556], "drop_in_plac": 126, "drop_nul": [127, 308, 557, 693], "dtype": [128, 558, 732], "estimated_s": [129, 734], "explod": [130, 265, 348, 444, 559, 648, 739, 836], "fill_nan": [132, 350, 561, 741], "fill_nul": [133, 351, 562, 742], "filter": [134, 352, 563, 743], "find_idx_by_nam": 135, "fold": [136, 505], "frame_equ": 137, "get_column": [138, 139], "glimps": 140, "groupbi": [141, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 566, 612, 613, 614, 615, 618], "groupby_dynam": [142, 567], "groupby_rol": [143, 568], "hash_row": 144, "head": [145, 220, 268, 358, 509, 569, 614, 651, 749], "height": 146, "hstack": 147, "insert_at_idx": 148, "interpol": [149, 360, 571, 751], "is_dupl": [150, 362, 754], "is_empti": [151, 755], "is_uniqu": [152, 372, 767], "item": [153, 769], "iter_row": 154, "iter_slic": 155, "join": [156, 269, 572, 652], "join_asof": [157, 573], "lazi": [158, 545, 575], "limit": [159, 377, 576, 772], "max": [160, 222, 272, 384, 513, 578, 655, 704, 775], "mean": [161, 223, 273, 385, 514, 579, 656, 705, 776], "median": [162, 224, 386, 515, 580, 706, 777], "melt": [163, 581], "merge_sort": [164, 582], "min": [165, 225, 274, 393, 516, 583, 657, 711, 778], "n_chunk": [166, 780], "n_uniqu": [167, 226, 395, 517, 781], "null_count": [168, 398, 786], "partition_bi": 169, "pearson_corr": [170, 518], "pipe": [171, 584], "pivot": 172, "product": [173, 403, 790], "quantil": [174, 227, 404, 519, 586, 791], "rechunk": [175, 406, 793], "renam": [176, 588, 795], "replac": [177, 453, 845], "replace_at_idx": 178, "revers": [179, 275, 410, 589, 658, 797], "row": [180, 181], "sampl": [182, 422, 809], "schema": [183, 590], "select": [184, 237, 522, 540, 591, 621, 895], "shape": [185, 815], "shift": [186, 276, 425, 592, 659, 816], "shift_and_fil": [187, 426, 593, 817], "shrink_to_fit": [188, 819], "slice": [189, 277, 433, 457, 597, 660, 825, 849], "sort": [190, 278, 434, 598, 661, 826], "std": [191, 437, 524, 599, 828], "sum": [192, 228, 279, 470, 526, 600, 662, 864], "tail": [193, 229, 280, 471, 527, 601, 615, 663, 865], "take_everi": [194, 473, 602, 867], "to_arrow": [195, 871], "to_dict": [196, 197], "to_dummi": [198, 872], "to_numpi": [199, 875], "to_panda": [200, 876], "to_seri": 201, "to_struct": [202, 282, 665], "transpos": 203, "uniqu": [204, 283, 478, 603, 666, 879], "unnest": [205, 604, 863], "unstack": 206, "upsampl": 207, "var": [208, 482, 528, 605, 882], "vstack": 209, "width": [210, 606], "with_column": [211, 212, 607, 608], "with_row_count": [213, 610], "__iter__": 214, "agg": [215, 612], "all": [216, 244, 484, 625], "count": [218, 298, 494], "first": [219, 266, 353, 504, 564, 649], "last": [221, 270, 375, 574, 653], "attribut": [230, 616, 886], "comput": [231, 535, 890], "descript": [232, 617, 891], "export": [233, 892], "miscellan": [236, 539, 545, 620, 894], "manipul": [237, 540, 621, 895], "data": 238, "type": 238, "numer": 238, "nest": 238, "other": 238, "expr": [241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483], "ab": [241, 623], "agg_group": 242, "alia": [243, 624], "ani": [245, 485, 626], "append": [246, 627], "arcco": [248, 629], "arccosh": [249, 630], "arcsin": [250, 631], "arcsinh": [251, 632], "arctan": [252, 633], "arctanh": [253, 634], "arg_max": [254, 259, 635, 642], "arg_min": [255, 260, 636, 643], "arg_sort": [256, 637], "arg_uniqu": [257, 639], "argsort": [258, 640], "arr": [259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666], "contain": [262, 285, 439, 645, 667, 831], "diff": [263, 305, 646, 690], "eval": [264, 647], "get": [267, 650], "length": [271, 448, 654, 840], "take": [281, 472, 664, 866], "backward_fil": 284, "bin": [285, 286, 287, 288, 289, 667, 668, 669, 670, 671], "decod": [286, 441, 668, 833], "encod": [287, 442, 669, 834], "ends_with": [288, 443, 670, 835], "starts_with": [289, 461, 671, 853], "cast": [290, 672], "cat": [291, 673, 674], "set_ord": [291, 674], "ceil": [292, 675], "clip": [293, 678], "clip_max": [294, 679], "clip_min": [295, 680], "co": [296, 682], "cosh": [297, 683], "cumcount": 299, "cummax": [300, 684], "cummin": [301, 685], "cumprod": [302, 686], "cumsum": [303, 498, 687], "cumulative_ev": [304, 688], "dot": [306, 691], "drop_nan": [307, 692], "dt": [309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731], "cast_time_unit": [309, 695], "cast_time_zon": [310, 696], "combin": [311, 697], "dai": [312, 313, 698, 699], "epoch": [314, 700], "hour": [315, 316, 701, 702], "iso_year": [317, 703], "microsecond": [318, 319, 707, 708], "millisecond": [320, 321, 709, 710], "minut": [322, 323, 712, 713], "month": [324, 714], "nanosecond": [325, 326, 715, 716], "offset_bi": [327, 717], "ordinal_dai": [328, 718], "quarter": [329, 719], "round": [330, 421, 720, 808], "second": [331, 332, 721, 722], "strftime": [333, 723], "timestamp": [334, 724], "truncat": [335, 725], "tz_local": [336, 726], "week": [337, 727], "weekdai": [338, 728], "with_time_unit": [339, 729], "with_time_zon": [340, 730], "year": [341, 731], "entropi": [342, 733], "ewm_mean": [343, 735], "ewm_std": [344, 736], "ewm_var": [345, 737], "exclud": [346, 503], "exp": [347, 738], "extend_const": [349, 740], "flatten": 354, "floor": [355, 745], "forward_fil": 356, "hash": [357, 748], "inspect": [359, 570], "is_between": 361, "is_finit": [363, 756], "is_first": [364, 757], "is_in": [365, 759], "is_infinit": [366, 760], "is_nan": [367, 761], "is_not": 368, "is_not_nan": [369, 762], "is_not_nul": [370, 763], "is_nul": [371, 764], "keep_nam": 373, "kurtosi": [374, 770], "len": [376, 771], "log": [379, 773], "log10": [380, 774], "lower_bound": 381, "map": [382, 512, 577], "map_alia": 383, "meta": [387, 388, 389, 390, 391, 392, 538], "has_multiple_output": 387, "is_regex_project": 388, "output_nam": 389, "pop": 390, "root_nam": 391, "undo_alias": 392, "mode": [394, 779], "nan_max": [396, 783], "nan_min": [397, 784], "over": 399, "pct_chang": [400, 787], "pow": 401, "prefix": 402, "rank": [405, 792], "reinterpret": [407, 794], "repeat_bi": 408, "reshap": [409, 796], "rolling_appli": [411, 798], "rolling_max": [412, 799], "rolling_mean": [413, 800], "rolling_median": [414, 801], "rolling_min": [415, 802], "rolling_quantil": [416, 803], "rolling_skew": [417, 804], "rolling_std": [418, 805], "rolling_sum": [419, 806], "rolling_var": [420, 807], "search_sort": [423, 810], "set_sort": [424, 814], "shrink_dtyp": [427, 818], "shuffl": [428, 820], "sign": [429, 821], "sin": [430, 822], "sinh": [431, 823], "skew": [432, 824], "sort_bi": 435, "sqrt": [436, 827], "str": [438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858], "count_match": [440, 832], "extract": [445, 837], "extract_al": [446, 838], "json_path_match": [447, 839], "ljust": [449, 841], "lstrip": [450, 842], "n_char": [451, 843], "parse_int": [452, 844], "replace_al": [454, 846], "rjust": [455, 847], "rstrip": [456, 848], "split": [458, 850], "split_exact": [459, 851], "splitn": [460, 852], "strip": [462, 854], "strptime": [463, 855], "to_lowercas": [464, 856], "to_uppercas": [465, 857], "zfill": [466, 858], "field": [467, 859, 860], "rename_field": [468, 861], "suffix": 469, "tan": [474, 868], "tanh": [475, 869], "to_phys": [476, 877], "top_k": [477, 878], "unique_count": [479, 880], "upper_bound": 480, "value_count": [481, 881], "where": 483, "arang": 487, "argsort_bi": 488, "avg": 489, "coalesc": 490, "col": 491, "concat_list": 492, "concat_str": 493, "cov": 495, "cumfold": 496, "cumreduc": 497, "element": 502, "format": 506, "from_epoch": 507, "group": 508, "lit": 511, "reduc": 520, "repeat": 521, "spearman_rank_corr": 523, "when": 529, "arrai": [530, 885], "categori": [533, 889], "name": [534, 782], "express": 537, "string": [541, 896], "tempor": [543, 898], "window": 544, "convers": 545, "eager": 545, "parallel": 545, "refer": 546, "input": 547, "output": 547, "csv": 547, "feather": 547, "ipc": 547, "parquet": 547, "sql": [547, 899], "json": 547, "avro": 547, "excel": 547, "delta": 547, "lake": 547, "dataset": 547, "lazyfram": [549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 619], "cach": 549, "collect": 552, "describe_optimized_plan": 554, "describe_plan": 555, "fetch": 560, "from_json": 565, "profil": 585, "show_graph": 594, "sink_ipc": 595, "sink_parquet": 596, "with_context": 609, "lazygroupbi": [612, 613, 614, 615], "read": 620, "write": 620, "logic": 620, "plan": 620, "arg_tru": 638, "chunk_length": 676, "flag": 744, "get_chunk": 746, "has_valid": 747, "inner_dtyp": 750, "is_boolean": 752, "is_datelik": 753, "is_float": 758, "is_numer": 765, "is_sort": 766, "is_utf8": 768, "new_from_index": 785, "peak_max": 788, "peak_min": 789, "series_equ": 811, "set": 812, "set_at_idx": 813, "to_fram": [862, 873], "time_unit": 870, "to_list": 874, "view": 883, "zip_with": 884, "method": 899, "assert": 900, "properti": 900, "base": 900, "strategi": 900, "helper": 900, "util": 901}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx": 57}, "alltitles": {"polars.toggle_string_cache": [[115, "polars-toggle-string-cache"]], "polars.read_ipc": [[94, "polars-read-ipc"]], "polars.scan_delta": [[102, "polars-scan-delta"]], "polars.scan_ds": [[103, "polars-scan-ds"]], "polars.scan_csv": [[101, "polars-scan-csv"]], "polars.scan_ipc": [[104, "polars-scan-ipc"]], "polars.testing.parametric.dataframes": [[112, "polars-testing-parametric-dataframes"]], "polars.exceptions.TooManyRowsReturned": [[77, "polars-exceptions-toomanyrowsreturned"]], "polars.DataFrame.drop_nulls": [[127, "polars-dataframe-drop-nulls"]], "polars.exceptions.NoRowsReturned": [[71, "polars-exceptions-norowsreturned"]], "polars.DataFrame.drop": [[125, "polars-dataframe-drop"]], "polars.DataFrame.columns": [[123, "polars-dataframe-columns"]], "polars.from_numpy": [[82, "polars-from-numpy"]], "polars.from_dicts": [[81, "polars-from-dicts"]], "polars.from_dataframe": [[79, "polars-from-dataframe"]], "polars.scan_ndjson": [[105, "polars-scan-ndjson"]], "polars.threadpool_size": [[114, "polars-threadpool-size"]], "polars.zeros": [[116, "polars-zeros"]], "polars.read_csv_batched": [[91, "polars-read-csv-batched"]], "polars.DataFrame.estimated_size": [[129, "polars-dataframe-estimated-size"]], "polars.testing.assert_series_equal": [[109, "polars-testing-assert-series-equal"]], "polars.exceptions.ComputeError": [[67, "polars-exceptions-computeerror"]], "polars.DataFrame.describe": [[124, "polars-dataframe-describe"]], "polars.DataFrame.explode": [[130, "polars-dataframe-explode"]], "polars.DataFrame.clone": [[122, "polars-dataframe-clone"]], "polars.DataFrame.apply": [[120, "polars-dataframe-apply"]], "polars.exceptions.DuplicateError": [[68, "polars-exceptions-duplicateerror"]], "polars.scan_parquet": [[106, "polars-scan-parquet"]], "polars.read_avro": [[89, "polars-read-avro"]], "polars.testing.assert_frame_equal": [[108, "polars-testing-assert-frame-equal"]], "polars.DataFrame.cleared": [[121, "polars-dataframe-cleared"]], "polars.show_versions": [[107, "polars-show-versions"]], "polars.from_dict": [[80, "polars-from-dict"]], "polars.from_records": [[84, "polars-from-records"]], "polars.internals.batched.BatchedCsvReader.next_batches": [[87, "polars-internals-batched-batchedcsvreader-next-batches"]], "polars.read_delta": [[92, "polars-read-delta"]], "polars.exceptions.NoDataError": [[70, "polars-exceptions-nodataerror"]], "polars.read_ipc_schema": [[95, "polars-read-ipc-schema"]], "polars.DataFrame.drop_in_place": [[126, "polars-dataframe-drop-in-place"]], "polars.exceptions.PanicException": [[73, "polars-exceptions-panicexception"]], "polars.read_ndjson": [[97, "polars-read-ndjson"]], "polars.testing.parametric.column": [[110, "polars-testing-parametric-column"]], "polars.DataFrame.__dataframe__": [[119, "polars-dataframe-dataframe"]], "polars.read_parquet": [[98, "polars-read-parquet"]], "polars.read_json": [[96, "polars-read-json"]], "Config": [[117, "config"]], "Config options": [[117, "config-options"]], "Config load, save, and current state": [[117, "config-load-save-and-current-state"]], "Use as a context manager": [[117, "use-as-a-context-manager"]], "polars.DataFrame.dtypes": [[128, "polars-dataframe-dtypes"]], "polars.ones": [[88, "polars-ones"]], "polars.DataFrame.fill_null": [[133, "polars-dataframe-fill-null"]], "polars.from_arrow": [[78, "polars-from-arrow"]], "polars.read_sql": [[100, "polars-read-sql"]], "polars.from_pandas": [[83, "polars-from-pandas"]], "polars.exceptions.RowsException": [[74, "polars-exceptions-rowsexception"]], "polars.exceptions.SchemaError": [[75, "polars-exceptions-schemaerror"]], "Aggregation": [[118, "aggregation"], [622, "aggregation"], [548, "aggregation"], [240, "aggregation"]], "polars.DataFrame.fill_nan": [[132, "polars-dataframe-fill-nan"]], "polars.get_idx_type": [[86, "polars-get-idx-type"]], "polars.read_excel": [[93, "polars-read-excel"]], "polars.exceptions.ShapeError": [[76, "polars-exceptions-shapeerror"]], "polars.DataFrame.extend": [[131, "polars-dataframe-extend"]], "polars.exceptions.InvalidOperationError": [[69, "polars-exceptions-invalidoperationerror"]], "polars.testing.parametric.series": [[113, "polars-testing-parametric-series"]], "polars.read_csv": [[90, "polars-read-csv"]], "polars.read_parquet_schema": [[99, "polars-read-parquet-schema"]], "polars.get_dummies": [[85, "polars-get-dummies"]], "polars.exceptions.NotFoundError": [[72, "polars-exceptions-notfounderror"]], "polars.testing.parametric.columns": [[111, "polars-testing-parametric-columns"]], "polars.Utf8": [[54, "polars-utf8"]], "polars.List": [[40, "polars-list"]], "polars.Config.state": [[23, "polars-config-state"]], "polars.Config.set_tbl_rows": [[20, "polars-config-set-tbl-rows"]], "polars.StringCache": [[46, "polars-stringcache"]], "polars.Config.set_tbl_formatting": [[15, "polars-config-set-tbl-formatting"]], "polars.DataFrame.write_csv": [[25, "polars-dataframe-write-csv"]], "polars.Struct": [[47, "polars-struct"]], "polars.Binary": [[2, "polars-binary"]], "polars.collect_all": [[62, "polars-collect-all"]], "polars.Float32": [[34, "polars-float32"]], "polars.align_frames": [[55, "polars-align-frames"]], "polars.Int32": [[37, "polars-int32"]], "polars.build_info": [[61, "polars-build-info"]], "polars.Config.set_fmt_str_lengths": [[10, "polars-config-set-fmt-str-lengths"]], "polars.date_range": [[65, "polars-date-range"]], "polars.Config.set_tbl_hide_dtype_separator": [[19, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Config.set_ascii_tables": [[8, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_ipc": [[26, "polars-dataframe-write-ipc"]], "polars.UInt8": [[52, "polars-uint8"]], "polars.UInt32": [[50, "polars-uint32"]], "polars.DataFrame.write_ndjson": [[28, "polars-dataframe-write-ndjson"]], "polars.SQLContext.execute": [[43, "polars-sqlcontext-execute"]], "polars.Config.set_tbl_width_chars": [[21, "polars-config-set-tbl-width-chars"]], "polars.Object": [[42, "polars-object"]], "polars.Unknown": [[53, "polars-unknown"]], "polars.Config.set_tbl_column_data_type_inline": [[13, "polars-config-set-tbl-column-data-type-inline"]], "polars.UInt16": [[49, "polars-uint16"]], "polars.Config.set_tbl_cols": [[12, "polars-config-set-tbl-cols"]], "polars.api.register_series_namespace": [[59, "polars-api-register-series-namespace"]], "polars.Config.save": [[7, "polars-config-save"]], "polars.DataFrame.write_avro": [[24, "polars-dataframe-write-avro"]], "polars.Boolean": [[3, "polars-boolean"]], "polars.Config.load": [[5, "polars-config-load"]], "polars.Time": [[48, "polars-time"]], "polars.SQLContext.register": [[45, "polars-sqlcontext-register"]], "polars.DataFrame.write_parquet": [[29, "polars-dataframe-write-parquet"]], "polars.api.register_expr_namespace": [[57, "polars-api-register-expr-namespace"]], "polars.Config.set_fmt_float": [[9, "polars-config-set-fmt-float"]], "polars.arg_where": [[60, "polars-arg-where"]], "polars.Config.restore_defaults": [[6, "polars-config-restore-defaults"]], "polars.api.register_dataframe_namespace": [[56, "polars-api-register-dataframe-namespace"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"]], "polars.concat": [[63, "polars-concat"]], "polars.DataType": [[30, "polars-datatype"]], "polars.Int8": [[39, "polars-int8"]], "polars.Categorical": [[4, "polars-categorical"]], "polars.Date": [[31, "polars-date"]], "polars.Int16": [[36, "polars-int16"]], "polars.UInt64": [[51, "polars-uint64"]], "polars.SQLContext.query": [[44, "polars-sqlcontext-query"]], "polars.Float64": [[35, "polars-float64"]], "polars.Duration": [[33, "polars-duration"]], "polars.cut": [[64, "polars-cut"]], "polars.Config.set_tbl_hide_dataframe_shape": [[18, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_column_names": [[17, "polars-config-set-tbl-hide-column-names"]], "polars.Null": [[41, "polars-null"]], "polars.Datetime": [[32, "polars-datetime"]], "polars.Config.set_tbl_cell_alignment": [[11, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_tbl_hide_column_data_types": [[16, "polars-config-set-tbl-hide-column-data-types"]], "polars.Config.set_tbl_dataframe_shape_below": [[14, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Int64": [[38, "polars-int64"]], "polars.exceptions.ArrowError": [[66, "polars-exceptions-arrowerror"]], "polars.api.register_lazyframe_namespace": [[58, "polars-api-register-lazyframe-namespace"]], "polars.DataFrame.write_json": [[27, "polars-dataframe-write-json"]], "polars.Config.set_verbose": [[22, "polars-config-set-verbose"]], "polars.Series.sign": [[821, "polars-series-sign"]], "polars.Series.sum": [[864, "polars-series-sum"]], "polars.Series.str.lengths": [[840, "polars-series-str-lengths"]], "polars.Series.rolling_skew": [[804, "polars-series-rolling-skew"]], "polars.Series.shape": [[815, "polars-series-shape"]], "polars.Series.series_equal": [[811, "polars-series-series-equal"]], "polars.Series.str.slice": [[849, "polars-series-str-slice"]], "polars.Series.str.rjust": [[847, "polars-series-str-rjust"]], "polars.Series.str.strip": [[854, "polars-series-str-strip"]], "polars.Series.shrink_to_fit": [[819, "polars-series-shrink-to-fit"]], "polars.Series.str": [[829, "polars-series-str"]], "polars.Series.str.ends_with": [[835, "polars-series-str-ends-with"]], "polars.Series.shrink_dtype": [[818, "polars-series-shrink-dtype"]], "polars.Series.str.concat": [[830, "polars-series-str-concat"]], "polars.Series.take": [[866, "polars-series-take"]], "polars.Series.str.starts_with": [[853, "polars-series-str-starts-with"]], "polars.Series.struct.rename_fields": [[861, "polars-series-struct-rename-fields"]], "polars.Series.str.zfill": [[858, "polars-series-str-zfill"]], "polars.Series.tail": [[865, "polars-series-tail"]], "polars.Series.str.split": [[850, "polars-series-str-split"]], "polars.Series.sample": [[809, "polars-series-sample"]], "polars.Series.sqrt": [[827, "polars-series-sqrt"]], "polars.Series.struct.to_frame": [[862, "polars-series-struct-to-frame"]], "polars.Series.tan": [[868, "polars-series-tan"]], "polars.Series.shuffle": [[820, "polars-series-shuffle"]], "polars.Series.sinh": [[823, "polars-series-sinh"]], "polars.Series.search_sorted": [[810, "polars-series-search-sorted"]], "polars.Series.sin": [[822, "polars-series-sin"]], "polars.Series.str.extract": [[837, "polars-series-str-extract"]], "polars.Series.rolling_sum": [[806, "polars-series-rolling-sum"]], "polars.Series.str.explode": [[836, "polars-series-str-explode"]], "polars.Series.str.replace_all": [[846, "polars-series-str-replace-all"]], "polars.Series.set_sorted": [[814, "polars-series-set-sorted"]], "polars.Series.str.n_chars": [[843, "polars-series-str-n-chars"]], "polars.Series.rolling_std": [[805, "polars-series-rolling-std"]], "polars.Series.struct.fields": [[860, "polars-series-struct-fields"]], "polars.Series.str.splitn": [[852, "polars-series-str-splitn"]], "polars.Series.struct.unnest": [[863, "polars-series-struct-unnest"]], "polars.Series.time_unit": [[870, "polars-series-time-unit"]], "polars.Series.str.split_exact": [[851, "polars-series-str-split-exact"]], "polars.Series.rolling_var": [[807, "polars-series-rolling-var"]], "polars.Series.str.encode": [[834, "polars-series-str-encode"]], "polars.Series.slice": [[825, "polars-series-slice"]], "polars.Series.str.extract_all": [[838, "polars-series-str-extract-all"]], "polars.Series.str.to_uppercase": [[857, "polars-series-str-to-uppercase"]], "polars.Series.set": [[812, "polars-series-set"]], "polars.Series.tanh": [[869, "polars-series-tanh"]], "polars.Series.str.json_path_match": [[839, "polars-series-str-json-path-match"]], "polars.Series.set_at_idx": [[813, "polars-series-set-at-idx"]], "polars.Series.take_every": [[867, "polars-series-take-every"]], "polars.Series.struct.field": [[859, "polars-series-struct-field"]], "polars.Series.str.count_match": [[832, "polars-series-str-count-match"]], "polars.Series.str.rstrip": [[848, "polars-series-str-rstrip"]], "polars.Series.str.contains": [[831, "polars-series-str-contains"]], "polars.Series.str.ljust": [[841, "polars-series-str-ljust"]], "polars.Series.str.to_lowercase": [[856, "polars-series-str-to-lowercase"]], "polars.Series.shift_and_fill": [[817, "polars-series-shift-and-fill"]], "polars.Series.str.replace": [[845, "polars-series-str-replace"]], "polars.Series.str.strptime": [[855, "polars-series-str-strptime"]], "polars.Series.std": [[828, "polars-series-std"]], "polars.Series.skew": [[824, "polars-series-skew"]], "polars.Series.round": [[808, "polars-series-round"]], "polars.Series.str.lstrip": [[842, "polars-series-str-lstrip"]], "polars.Series.shift": [[816, "polars-series-shift"]], "polars.Series.str.decode": [[833, "polars-series-str-decode"]], "polars.Series.str.parse_int": [[844, "polars-series-str-parse-int"]], "polars.Series.sort": [[826, "polars-series-sort"]], "polars.Series.ewm_var": [[737, "polars-series-ewm-var"]], "polars.Series.is_not_null": [[763, "polars-series-is-not-null"]], "polars.Series.len": [[771, "polars-series-len"]], "polars.Series.limit": [[772, "polars-series-limit"]], "polars.Series.peak_max": [[788, "polars-series-peak-max"]], "polars.Series.extend_constant": [[740, "polars-series-extend-constant"]], "polars.Series.log": [[773, "polars-series-log"]], "polars.Series.product": [[790, "polars-series-product"]], "polars.Series.n_chunks": [[780, "polars-series-n-chunks"]], "polars.Series.has_validity": [[747, "polars-series-has-validity"]], "polars.Series.floor": [[745, "polars-series-floor"]], "polars.Series.pct_change": [[787, "polars-series-pct-change"]], "polars.Series.is_utf8": [[768, "polars-series-is-utf8"]], "polars.Series.is_sorted": [[766, "polars-series-is-sorted"]], "polars.Series.reinterpret": [[794, "polars-series-reinterpret"]], "polars.Series.kurtosis": [[770, "polars-series-kurtosis"]], "polars.Series.reshape": [[796, "polars-series-reshape"]], "polars.Series.reverse": [[797, "polars-series-reverse"]], "polars.Series.rolling_median": [[801, "polars-series-rolling-median"]], "polars.Series.rolling_apply": [[798, "polars-series-rolling-apply"]], "polars.Series.name": [[782, "polars-series-name"]], "polars.Series.new_from_index": [[785, "polars-series-new-from-index"]], "polars.Series.fill_nan": [[741, "polars-series-fill-nan"]], "polars.Series.flags": [[744, "polars-series-flags"]], "polars.Series.is_datelike": [[753, "polars-series-is-datelike"]], "polars.Series.fill_null": [[742, "polars-series-fill-null"]], "polars.Series.is_nan": [[761, "polars-series-is-nan"]], "polars.Series.mean": [[776, "polars-series-mean"]], "polars.Series.get_chunks": [[746, "polars-series-get-chunks"]], "polars.Series.rechunk": [[793, "polars-series-rechunk"]], "polars.Series.item": [[769, "polars-series-item"]], "polars.Series.null_count": [[786, "polars-series-null-count"]], "polars.Series.rolling_min": [[802, "polars-series-rolling-min"]], "polars.Series.filter": [[743, "polars-series-filter"]], "polars.Series.is_empty": [[755, "polars-series-is-empty"]], "polars.Series.log10": [[774, "polars-series-log10"]], "polars.Series.rolling_quantile": [[803, "polars-series-rolling-quantile"]], "polars.Series.n_unique": [[781, "polars-series-n-unique"]], "polars.Series.max": [[775, "polars-series-max"]], "polars.Series.is_null": [[764, "polars-series-is-null"]], "polars.Series.rolling_max": [[799, "polars-series-rolling-max"]], "polars.Series.head": [[749, "polars-series-head"]], "polars.Series.is_infinite": [[760, "polars-series-is-infinite"]], "polars.Series.median": [[777, "polars-series-median"]], "polars.Series.nan_max": [[783, "polars-series-nan-max"]], "polars.Series.explode": [[739, "polars-series-explode"]], "polars.Series.is_float": [[758, "polars-series-is-float"]], "polars.Series.is_not_nan": [[762, "polars-series-is-not-nan"]], "polars.Series.nan_min": [[784, "polars-series-nan-min"]], "polars.Series.exp": [[738, "polars-series-exp"]], "polars.Series.rolling_mean": [[800, "polars-series-rolling-mean"]], "polars.Series.rank": [[792, "polars-series-rank"]], "polars.Series.peak_min": [[789, "polars-series-peak-min"]], "polars.Series.is_duplicated": [[754, "polars-series-is-duplicated"]], "polars.Series.interpolate": [[751, "polars-series-interpolate"]], "polars.Series.hash": [[748, "polars-series-hash"]], "polars.Series.is_first": [[757, "polars-series-is-first"]], "polars.Series.is_unique": [[767, "polars-series-is-unique"]], "polars.Series.is_in": [[759, "polars-series-is-in"]], "polars.Series.mode": [[779, "polars-series-mode"]], "polars.Series.quantile": [[791, "polars-series-quantile"]], "polars.Series.is_numeric": [[765, "polars-series-is-numeric"]], "polars.Series.inner_dtype": [[750, "polars-series-inner-dtype"]], "polars.Series.is_finite": [[756, "polars-series-is-finite"]], "polars.Series.rename": [[795, "polars-series-rename"]], "polars.Series.is_boolean": [[752, "polars-series-is-boolean"]], "polars.Series.min": [[778, "polars-series-min"]], "polars.Series.dt.hour": [[701, "polars-series-dt-hour"]], "polars.Series.dt.quarter": [[719, "polars-series-dt-quarter"]], "polars.Series.clip_min": [[680, "polars-series-clip-min"]], "polars.Series.bin.ends_with": [[670, "polars-series-bin-ends-with"]], "polars.Series.cumulative_eval": [[688, "polars-series-cumulative-eval"]], "polars.Series.dt.week": [[727, "polars-series-dt-week"]], "polars.Series.cumsum": [[687, "polars-series-cumsum"]], "polars.Series.dt.minutes": [[713, "polars-series-dt-minutes"]], "polars.Series.dt.cast_time_zone": [[696, "polars-series-dt-cast-time-zone"]], "polars.Series.dt.day": [[698, "polars-series-dt-day"]], "polars.Series.dt.milliseconds": [[710, "polars-series-dt-milliseconds"]], "polars.Series.dt.cast_time_unit": [[695, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.timestamp": [[724, "polars-series-dt-timestamp"]], "polars.Series.dt.tz_localize": [[726, "polars-series-dt-tz-localize"]], "polars.Series.cummax": [[684, "polars-series-cummax"]], "polars.Series.ewm_mean": [[735, "polars-series-ewm-mean"]], "polars.Series.cummin": [[685, "polars-series-cummin"]], "polars.Series.describe": [[689, "polars-series-describe"]], "polars.Series.dt.strftime": [[723, "polars-series-dt-strftime"]], "polars.Series.ceil": [[675, "polars-series-ceil"]], "polars.Series.dt.minute": [[712, "polars-series-dt-minute"]], "polars.Series.dt.ordinal_day": [[718, "polars-series-dt-ordinal-day"]], "polars.Series.dt.seconds": [[722, "polars-series-dt-seconds"]], "polars.Series.dt.round": [[720, "polars-series-dt-round"]], "polars.Series.dt.truncate": [[725, "polars-series-dt-truncate"]], "polars.Series.dt.year": [[731, "polars-series-dt-year"]], "polars.Series.dtype": [[732, "polars-series-dtype"]], "polars.Series.clip_max": [[679, "polars-series-clip-max"]], "polars.Series.dt.mean": [[705, "polars-series-dt-mean"]], "polars.Series.dt.month": [[714, "polars-series-dt-month"]], "polars.Series.dt.iso_year": [[703, "polars-series-dt-iso-year"]], "polars.Series.dt.millisecond": [[709, "polars-series-dt-millisecond"]], "polars.Series.estimated_size": [[734, "polars-series-estimated-size"]], "polars.Series.cumprod": [[686, "polars-series-cumprod"]], "polars.Series.dt.with_time_unit": [[729, "polars-series-dt-with-time-unit"]], "polars.Series.dt.with_time_zone": [[730, "polars-series-dt-with-time-zone"]], "polars.Series.dt.hours": [[702, "polars-series-dt-hours"]], "polars.Series.clip": [[678, "polars-series-clip"]], "polars.Series.drop_nans": [[692, "polars-series-drop-nans"]], "polars.Series.dt": [[694, "polars-series-dt"]], "polars.Series.dt.epoch": [[700, "polars-series-dt-epoch"]], "polars.Series.dt.nanosecond": [[715, "polars-series-dt-nanosecond"]], "polars.Series.dt.days": [[699, "polars-series-dt-days"]], "polars.Series.dt.microsecond": [[707, "polars-series-dt-microsecond"]], "polars.Series.dt.max": [[704, "polars-series-dt-max"]], "polars.Series.diff": [[690, "polars-series-diff"]], "polars.Series.entropy": [[733, "polars-series-entropy"]], "polars.Series.dot": [[691, "polars-series-dot"]], "polars.Series.cosh": [[683, "polars-series-cosh"]], "polars.Series.cleared": [[677, "polars-series-cleared"]], "polars.Series.dt.combine": [[697, "polars-series-dt-combine"]], "polars.Series.bin.starts_with": [[671, "polars-series-bin-starts-with"]], "polars.Series.cast": [[672, "polars-series-cast"]], "polars.Series.dt.min": [[711, "polars-series-dt-min"]], "polars.Series.ewm_std": [[736, "polars-series-ewm-std"]], "polars.Series.clone": [[681, "polars-series-clone"]], "polars.Series.dt.offset_by": [[717, "polars-series-dt-offset-by"]], "polars.Series.drop_nulls": [[693, "polars-series-drop-nulls"]], "polars.Series.dt.weekday": [[728, "polars-series-dt-weekday"]], "polars.Series.dt.nanoseconds": [[716, "polars-series-dt-nanoseconds"]], "polars.Series.cat": [[673, "polars-series-cat"]], "polars.Series.cat.set_ordering": [[674, "polars-series-cat-set-ordering"]], "polars.Series.dt.microseconds": [[708, "polars-series-dt-microseconds"]], "polars.Series.cos": [[682, "polars-series-cos"]], "polars.Series.dt.second": [[721, "polars-series-dt-second"]], "polars.Series.dt.median": [[706, "polars-series-dt-median"]], "polars.Series.chunk_lengths": [[676, "polars-series-chunk-lengths"]], "polars.Series.to_frame": [[873, "polars-series-to-frame"]], "polars.Series.value_counts": [[881, "polars-series-value-counts"]], "Testing": [[900, "testing"]], "Asserts": [[900, "asserts"]], "Property-based testing": [[900, "property-based-testing"]], "Strategies": [[900, "strategies"]], "Strategy helpers": [[900, "strategy-helpers"]], "polars.Series.to_list": [[874, "polars-series-to-list"]], "Descriptive": [[891, "descriptive"], [617, "descriptive"], [232, "descriptive"]], "Series": [[893, "series"]], "polars.Series.unique_counts": [[880, "polars-series-unique-counts"]], "Array": [[885, "array"], [530, "array"]], "Categories": [[889, "categories"], [533, "categories"]], "Boolean": [[888, "boolean"], [532, "boolean"]], "polars.Series.top_k": [[878, "polars-series-top-k"]], "Struct": [[897, "struct"], [542, "struct"]], "Export": [[892, "export"], [233, "export"]], "SQL": [[899, "sql"], [547, "sql"]], "Methods": [[899, "methods"]], "polars.Series.to_arrow": [[871, "polars-series-to-arrow"]], "Strings": [[896, "strings"], [541, "strings"]], "polars.Series.zip_with": [[884, "polars-series-zip-with"]], "polars.Series.to_numpy": [[875, "polars-series-to-numpy"]], "Binary": [[887, "binary"], [531, "binary"]], "Miscellaneous": [[894, "miscellaneous"], [620, "miscellaneous"], [545, "miscellaneous"], [539, "miscellaneous"], [236, "miscellaneous"]], "polars.Series.view": [[883, "polars-series-view"]], "Attributes": [[886, "attributes"], [616, "attributes"], [230, "attributes"]], "Manipulation/selection": [[895, "manipulation-selection"], [621, "manipulation-selection"], [540, "manipulation-selection"], [237, "manipulation-selection"]], "polars.Series.to_physical": [[877, "polars-series-to-physical"]], "polars.Series.var": [[882, "polars-series-var"]], "Utils": [[901, "utils"]], "Temporal": [[898, "temporal"], [543, "temporal"]], "polars.Series.to_dummies": [[872, "polars-series-to-dummies"]], "polars.Series.to_pandas": [[876, "polars-series-to-pandas"]], "Computation": [[890, "computation"], [535, "computation"], [231, "computation"]], "polars.Series.unique": [[879, "polars-series-unique"]], "polars.LazyFrame.var": [[605, "polars-lazyframe-var"]], "polars.Series.apply": [[628, "polars-series-apply"]], "polars.Series.arr.min": [[657, "polars-series-arr-min"]], "polars.internals.lazyframe.groupby.LazyGroupBy.head": [[614, "polars-internals-lazyframe-groupby-lazygroupby-head"]], "polars.Series.arr.lengths": [[654, "polars-series-arr-lengths"]], "polars.LazyFrame.width": [[606, "polars-lazyframe-width"]], "polars.Series.arcsinh": [[632, "polars-series-arcsinh"]], "polars.Series.bin.decode": [[668, "polars-series-bin-decode"]], "polars.Series.bin.encode": [[669, "polars-series-bin-encode"]], "polars.Series.argsort": [[640, "polars-series-argsort"]], "polars.Series.arg_max": [[635, "polars-series-arg-max"]], "polars.Series.arr.unique": [[666, "polars-series-arr-unique"]], "polars.Series.arr.head": [[651, "polars-series-arr-head"]], "polars.Series.arr.max": [[655, "polars-series-arr-max"]], "polars.internals.lazyframe.groupby.LazyGroupBy.agg": [[612, "polars-internals-lazyframe-groupby-lazygroupby-agg"]], "polars.Series.abs": [[623, "polars-series-abs"]], "polars.LazyFrame.write_json": [[611, "polars-lazyframe-write-json"]], "polars.Series.arr.take": [[664, "polars-series-arr-take"]], "Read/write logical plan": [[620, "read-write-logical-plan"]], "polars.Series.arr.last": [[653, "polars-series-arr-last"]], "polars.Series.arr.arg_min": [[643, "polars-series-arr-arg-min"]], "polars.Series.all": [[625, "polars-series-all"]], "polars.Series.arr.concat": [[644, "polars-series-arr-concat"]], "polars.Series.arr.sum": [[662, "polars-series-arr-sum"]], "polars.Series.arg_min": [[636, "polars-series-arg-min"]], "polars.Series.arcsin": [[631, "polars-series-arcsin"]], "polars.Series.arr.first": [[649, "polars-series-arr-first"]], "polars.Series.arr.to_struct": [[665, "polars-series-arr-to-struct"]], "polars.LazyFrame.with_columns": [[608, "polars-lazyframe-with-columns"]], "polars.Series.alias": [[624, "polars-series-alias"]], "polars.Series.arg_unique": [[639, "polars-series-arg-unique"]], "polars.LazyFrame.with_row_count": [[610, "polars-lazyframe-with-row-count"]], "polars.Series.arr.eval": [[647, "polars-series-arr-eval"]], "polars.internals.lazyframe.groupby.LazyGroupBy.apply": [[613, "polars-internals-lazyframe-groupby-lazygroupby-apply"]], "polars.Series.arr.mean": [[656, "polars-series-arr-mean"]], "polars.internals.lazyframe.groupby.LazyGroupBy.tail": [[615, "polars-internals-lazyframe-groupby-lazygroupby-tail"]], "polars.Series.arr.shift": [[659, "polars-series-arr-shift"]], "polars.Series.arr.tail": [[663, "polars-series-arr-tail"]], "polars.Series.arg_sort": [[637, "polars-series-arg-sort"]], "polars.LazyFrame.unique": [[603, "polars-lazyframe-unique"]], "polars.Series.arr.join": [[652, "polars-series-arr-join"]], "polars.Series.append": [[627, "polars-series-append"]], "polars.Series.arr.reverse": [[658, "polars-series-arr-reverse"]], "polars.Series.arr.diff": [[646, "polars-series-arr-diff"]], "polars.Series.arr.explode": [[648, "polars-series-arr-explode"]], "polars.Series.arr": [[641, "polars-series-arr"]], "polars.Series.arctanh": [[634, "polars-series-arctanh"]], "polars.Series.arr.sort": [[661, "polars-series-arr-sort"]], "polars.Series.any": [[626, "polars-series-any"]], "polars.Series.arr.get": [[650, "polars-series-arr-get"]], "GroupBy": [[618, "groupby"], [234, "groupby"]], "polars.Series.arccos": [[629, "polars-series-arccos"]], "polars.LazyFrame.with_column": [[607, "polars-lazyframe-with-column"]], "polars.Series.arctan": [[633, "polars-series-arctan"]], "polars.Series.arr.slice": [[660, "polars-series-arr-slice"]], "polars.Series.bin.contains": [[667, "polars-series-bin-contains"]], "polars.Series.arr.contains": [[645, "polars-series-arr-contains"]], "LazyFrame": [[619, "lazyframe"]], "polars.Series.arccosh": [[630, "polars-series-arccosh"]], "polars.LazyFrame.with_context": [[609, "polars-lazyframe-with-context"]], "polars.Series.arr.arg_max": [[642, "polars-series-arr-arg-max"]], "polars.Series.arg_true": [[638, "polars-series-arg-true"]], "polars.LazyFrame.unnest": [[604, "polars-lazyframe-unnest"]], "polars.apply": [[486, "polars-apply"]], "polars.quantile": [[519, "polars-quantile"]], "polars.from_epoch": [[507, "polars-from-epoch"]], "polars.median": [[515, "polars-median"]], "polars.Expr.take_every": [[473, "polars-expr-take-every"]], "polars.Expr.tail": [[471, "polars-expr-tail"]], "polars.Expr.var": [[482, "polars-expr-var"]], "polars.cov": [[495, "polars-cov"]], "polars.Expr.unique": [[478, "polars-expr-unique"]], "polars.coalesce": [[490, "polars-coalesce"]], "polars.concat_list": [[492, "polars-concat-list"]], "polars.Expr.take": [[472, "polars-expr-take"]], "polars.Expr.upper_bound": [[480, "polars-expr-upper-bound"]], "polars.Expr.where": [[483, "polars-expr-where"]], "polars.Expr.top_k": [[477, "polars-expr-top-k"]], "polars.date": [[499, "polars-date"]], "polars.Expr.to_physical": [[476, "polars-expr-to-physical"]], "polars.n_unique": [[517, "polars-n-unique"]], "polars.concat_str": [[493, "polars-concat-str"]], "polars.all": [[484, "polars-all"]], "polars.var": [[528, "polars-var"]], "polars.exclude": [[503, "polars-exclude"]], "polars.Expr.suffix": [[469, "polars-expr-suffix"]], "polars.count": [[494, "polars-count"]], "polars.Expr.tan": [[474, "polars-expr-tan"]], "polars.cumreduce": [[497, "polars-cumreduce"]], "polars.element": [[502, "polars-element"]], "polars.first": [[504, "polars-first"]], "polars.head": [[509, "polars-head"]], "polars.mean": [[514, "polars-mean"]], "polars.select": [[522, "polars-select"]], "polars.spearman_rank_corr": [[523, "polars-spearman-rank-corr"]], "polars.tail": [[527, "polars-tail"]], "polars.Expr.tanh": [[475, "polars-expr-tanh"]], "polars.fold": [[505, "polars-fold"]], "polars.std": [[524, "polars-std"]], "polars.max": [[513, "polars-max"]], "polars.arange": [[487, "polars-arange"]], "polars.col": [[491, "polars-col"]], "polars.argsort_by": [[488, "polars-argsort-by"]], "polars.map": [[512, "polars-map"]], "polars.struct": [[525, "polars-struct"]], "polars.reduce": [[520, "polars-reduce"]], "polars.Expr.sum": [[470, "polars-expr-sum"]], "Columns / names": [[534, "columns-names"]], "polars.lit": [[511, "polars-lit"]], "polars.when": [[529, "polars-when"]], "polars.cumsum": [[498, "polars-cumsum"]], "polars.min": [[516, "polars-min"]], "polars.format": [[506, "polars-format"]], "polars.cumfold": [[496, "polars-cumfold"]], "polars.avg": [[489, "polars-avg"]], "polars.repeat": [[521, "polars-repeat"]], "polars.groups": [[508, "polars-groups"]], "polars.list": [[510, "polars-list"]], "polars.pearson_corr": [[518, "polars-pearson-corr"]], "polars.Expr.value_counts": [[481, "polars-expr-value-counts"]], "polars.sum": [[526, "polars-sum"]], "polars.Expr.unique_counts": [[479, "polars-expr-unique-counts"]], "polars.any": [[485, "polars-any"]], "polars.datetime": [[500, "polars-datetime"]], "polars.duration": [[501, "polars-duration"]], "polars.Expr.str.lstrip": [[450, "polars-expr-str-lstrip"]], "polars.Expr.shift_and_fill": [[426, "polars-expr-shift-and-fill"]], "polars.Expr.str.extract": [[445, "polars-expr-str-extract"]], "polars.Expr.str.count_match": [[440, "polars-expr-str-count-match"]], "polars.Expr.sinh": [[431, "polars-expr-sinh"]], "polars.Expr.rank": [[405, "polars-expr-rank"]], "polars.Expr.sample": [[422, "polars-expr-sample"]], "polars.Expr.skew": [[432, "polars-expr-skew"]], "polars.Expr.rolling_median": [[414, "polars-expr-rolling-median"]], "polars.Expr.rolling_max": [[412, "polars-expr-rolling-max"]], "polars.Expr.rechunk": [[406, "polars-expr-rechunk"]], "polars.Expr.slice": [[433, "polars-expr-slice"]], "polars.Expr.reverse": [[410, "polars-expr-reverse"]], "polars.Expr.search_sorted": [[423, "polars-expr-search-sorted"]], "polars.Expr.str.explode": [[444, "polars-expr-str-explode"]], "polars.Expr.str.replace_all": [[454, "polars-expr-str-replace-all"]], "polars.Expr.str.strptime": [[463, "polars-expr-str-strptime"]], "polars.Expr.rolling_skew": [[417, "polars-expr-rolling-skew"]], "polars.Expr.str.strip": [[462, "polars-expr-str-strip"]], "polars.Expr.str.contains": [[439, "polars-expr-str-contains"]], "polars.Expr.str.ends_with": [[443, "polars-expr-str-ends-with"]], "polars.Expr.reshape": [[409, "polars-expr-reshape"]], "polars.Expr.rolling_apply": [[411, "polars-expr-rolling-apply"]], "polars.Expr.round": [[421, "polars-expr-round"]], "polars.Expr.str.extract_all": [[446, "polars-expr-str-extract-all"]], "polars.Expr.str.parse_int": [[452, "polars-expr-str-parse-int"]], "polars.Expr.str.split_exact": [[459, "polars-expr-str-split-exact"]], "polars.Expr.product": [[403, "polars-expr-product"]], "polars.Expr.str.encode": [[442, "polars-expr-str-encode"]], "polars.Expr.str.splitn": [[460, "polars-expr-str-splitn"]], "polars.Expr.reinterpret": [[407, "polars-expr-reinterpret"]], "polars.Expr.str.json_path_match": [[447, "polars-expr-str-json-path-match"]], "polars.Expr.str.zfill": [[466, "polars-expr-str-zfill"]], "polars.Expr.set_sorted": [[424, "polars-expr-set-sorted"]], "polars.Expr.sign": [[429, "polars-expr-sign"]], "polars.Expr.str.concat": [[438, "polars-expr-str-concat"]], "polars.Expr.str.rjust": [[455, "polars-expr-str-rjust"]], "polars.Expr.str.slice": [[457, "polars-expr-str-slice"]], "polars.Expr.struct.rename_fields": [[468, "polars-expr-struct-rename-fields"]], "polars.Expr.rolling_min": [[415, "polars-expr-rolling-min"]], "polars.Expr.rolling_var": [[420, "polars-expr-rolling-var"]], "polars.Expr.sin": [[430, "polars-expr-sin"]], "polars.Expr.shrink_dtype": [[427, "polars-expr-shrink-dtype"]], "polars.Expr.sort": [[434, "polars-expr-sort"]], "polars.Expr.sqrt": [[436, "polars-expr-sqrt"]], "polars.Expr.str.n_chars": [[451, "polars-expr-str-n-chars"]], "polars.Expr.sort_by": [[435, "polars-expr-sort-by"]], "polars.Expr.str.ljust": [[449, "polars-expr-str-ljust"]], "polars.Expr.shuffle": [[428, "polars-expr-shuffle"]], "polars.Expr.prefix": [[402, "polars-expr-prefix"]], "polars.Expr.repeat_by": [[408, "polars-expr-repeat-by"]], "polars.Expr.struct.field": [[467, "polars-expr-struct-field"]], "polars.Expr.str.decode": [[441, "polars-expr-str-decode"]], "polars.Expr.str.split": [[458, "polars-expr-str-split"]], "polars.Expr.rolling_mean": [[413, "polars-expr-rolling-mean"]], "polars.Expr.str.replace": [[453, "polars-expr-str-replace"]], "polars.Expr.str.rstrip": [[456, "polars-expr-str-rstrip"]], "polars.Expr.rolling_sum": [[419, "polars-expr-rolling-sum"]], "polars.Expr.quantile": [[404, "polars-expr-quantile"]], "polars.Expr.rolling_std": [[418, "polars-expr-rolling-std"]], "polars.Expr.shift": [[425, "polars-expr-shift"]], "polars.Expr.str.to_uppercase": [[465, "polars-expr-str-to-uppercase"]], "polars.Expr.rolling_quantile": [[416, "polars-expr-rolling-quantile"]], "polars.Expr.str.starts_with": [[461, "polars-expr-str-starts-with"]], "polars.Expr.str.lengths": [[448, "polars-expr-str-lengths"]], "polars.Expr.str.to_lowercase": [[464, "polars-expr-str-to-lowercase"]], "polars.Expr.std": [[437, "polars-expr-std"]], "polars.Expr.is_first": [[364, "polars-expr-is-first"]], "polars.Expr.map_alias": [[383, "polars-expr-map-alias"]], "polars.Expr.log": [[379, "polars-expr-log"]], "polars.Expr.dt.tz_localize": [[336, "polars-expr-dt-tz-localize"]], "polars.Expr.ewm_var": [[345, "polars-expr-ewm-var"]], "polars.Expr.nan_min": [[397, "polars-expr-nan-min"]], "polars.Expr.explode": [[348, "polars-expr-explode"]], "polars.Expr.dt.with_time_unit": [[339, "polars-expr-dt-with-time-unit"]], "polars.Expr.entropy": [[342, "polars-expr-entropy"]], "polars.Expr.first": [[353, "polars-expr-first"]], "polars.Expr.min": [[393, "polars-expr-min"]], "polars.Expr.hash": [[357, "polars-expr-hash"]], "polars.Expr.meta.root_names": [[391, "polars-expr-meta-root-names"]], "polars.Expr.dt.with_time_zone": [[340, "polars-expr-dt-with-time-zone"]], "polars.Expr.keep_name": [[373, "polars-expr-keep-name"]], "polars.Expr.dt.year": [[341, "polars-expr-dt-year"]], "polars.Expr.meta.undo_aliases": [[392, "polars-expr-meta-undo-aliases"]], "polars.Expr.max": [[384, "polars-expr-max"]], "polars.Expr.filter": [[352, "polars-expr-filter"]], "polars.Expr.nan_max": [[396, "polars-expr-nan-max"]], "polars.Expr.lower_bound": [[381, "polars-expr-lower-bound"]], "polars.Expr.is_finite": [[363, "polars-expr-is-finite"]], "polars.Expr.meta.output_name": [[389, "polars-expr-meta-output-name"]], "polars.Expr.fill_null": [[351, "polars-expr-fill-null"]], "polars.Expr.n_unique": [[395, "polars-expr-n-unique"]], "polars.Expr.is_not_null": [[370, "polars-expr-is-not-null"]], "polars.Expr.inspect": [[359, "polars-expr-inspect"]], "polars.Expr.mean": [[385, "polars-expr-mean"]], "polars.Expr.head": [[358, "polars-expr-head"]], "polars.Expr.forward_fill": [[356, "polars-expr-forward-fill"]], "polars.Expr.ewm_std": [[344, "polars-expr-ewm-std"]], "polars.Expr.interpolate": [[360, "polars-expr-interpolate"]], "polars.Expr.last": [[375, "polars-expr-last"]], "polars.Expr.meta.is_regex_projection": [[388, "polars-expr-meta-is-regex-projection"]], "polars.Expr.is_unique": [[372, "polars-expr-is-unique"]], "polars.Expr.exclude": [[346, "polars-expr-exclude"]], "polars.Expr.len": [[376, "polars-expr-len"]], "polars.Expr.is_not_nan": [[369, "polars-expr-is-not-nan"]], "polars.Expr.extend_constant": [[349, "polars-expr-extend-constant"]], "polars.Expr.meta.pop": [[390, "polars-expr-meta-pop"]], "polars.Expr.kurtosis": [[374, "polars-expr-kurtosis"]], "polars.Expr.median": [[386, "polars-expr-median"]], "polars.Expr.log10": [[380, "polars-expr-log10"]], "polars.Expr.over": [[399, "polars-expr-over"]], "polars.Expr.pow": [[401, "polars-expr-pow"]], "polars.Expr.list": [[378, "polars-expr-list"]], "polars.Expr.exp": [[347, "polars-expr-exp"]], "polars.Expr.dt.truncate": [[335, "polars-expr-dt-truncate"]], "polars.Expr.map": [[382, "polars-expr-map"]], "polars.Expr.fill_nan": [[350, "polars-expr-fill-nan"]], "polars.Expr.dt.weekday": [[338, "polars-expr-dt-weekday"]], "polars.Expr.limit": [[377, "polars-expr-limit"]], "polars.Expr.floor": [[355, "polars-expr-floor"]], "polars.Expr.is_null": [[371, "polars-expr-is-null"]], "polars.Expr.null_count": [[398, "polars-expr-null-count"]], "polars.Expr.is_nan": [[367, "polars-expr-is-nan"]], "polars.Expr.mode": [[394, "polars-expr-mode"]], "polars.Expr.is_between": [[361, "polars-expr-is-between"]], "polars.Expr.is_in": [[365, "polars-expr-is-in"]], "polars.Expr.pct_change": [[400, "polars-expr-pct-change"]], "polars.Expr.flatten": [[354, "polars-expr-flatten"]], "polars.Expr.ewm_mean": [[343, "polars-expr-ewm-mean"]], "polars.Expr.is_not": [[368, "polars-expr-is-not"]], "polars.Expr.meta.has_multiple_outputs": [[387, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.dt.week": [[337, "polars-expr-dt-week"]], "polars.Expr.is_duplicated": [[362, "polars-expr-is-duplicated"]], "polars.Expr.is_infinite": [[366, "polars-expr-is-infinite"]], "polars.LazyFrame.mean": [[579, "polars-lazyframe-mean"]], "polars.LazyFrame.tail": [[601, "polars-lazyframe-tail"]], "polars.LazyFrame.clone": [[551, "polars-lazyframe-clone"]], "polars.LazyFrame.melt": [[581, "polars-lazyframe-melt"]], "polars.LazyFrame.drop": [[556, "polars-lazyframe-drop"]], "polars.LazyFrame.rename": [[588, "polars-lazyframe-rename"]], "Functions": [[536, "functions"], [545, "functions"], [238, "functions"]], "polars.LazyFrame.fill_nan": [[561, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.shift": [[592, "polars-lazyframe-shift"]], "polars.LazyFrame.schema": [[590, "polars-lazyframe-schema"]], "polars.LazyFrame.show_graph": [[594, "polars-lazyframe-show-graph"]], "polars.LazyFrame.join": [[572, "polars-lazyframe-join"]], "polars.LazyFrame.collect": [[552, "polars-lazyframe-collect"]], "polars.LazyFrame.columns": [[553, "polars-lazyframe-columns"]], "polars.LazyFrame.fetch": [[560, "polars-lazyframe-fetch"]], "polars.LazyFrame.describe_plan": [[555, "polars-lazyframe-describe-plan"]], "polars.LazyFrame.reverse": [[589, "polars-lazyframe-reverse"]], "polars.LazyFrame.select": [[591, "polars-lazyframe-select"]], "Window": [[544, "window"]], "polars.LazyFrame.cleared": [[550, "polars-lazyframe-cleared"]], "polars.LazyFrame.slice": [[597, "polars-lazyframe-slice"]], "Conversion": [[545, "conversion"]], "Eager/Lazy functions": [[545, "eager-lazy-functions"]], "Parallelization": [[545, "parallelization"]], "StringCache": [[545, "stringcache"]], "polars.LazyFrame.sort": [[598, "polars-lazyframe-sort"]], "Input/output": [[547, "input-output"]], "CSV": [[547, "csv"]], "Feather/ IPC": [[547, "feather-ipc"]], "Parquet": [[547, "parquet"]], "JSON": [[547, "json"]], "AVRO": [[547, "avro"]], "Excel": [[547, "excel"]], "Delta Lake": [[547, "delta-lake"]], "Datasets": [[547, "datasets"]], "BatchedCsvReader": [[547, "batchedcsvreader"]], "polars.LazyFrame.median": [[580, "polars-lazyframe-median"]], "polars.LazyFrame.from_json": [[565, "polars-lazyframe-from-json"]], "polars.LazyFrame.max": [[578, "polars-lazyframe-max"]], "polars.LazyFrame.last": [[574, "polars-lazyframe-last"]], "polars.LazyFrame.groupby_rolling": [[568, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.lazy": [[575, "polars-lazyframe-lazy"]], "polars.LazyFrame.sink_parquet": [[596, "polars-lazyframe-sink-parquet"]], "polars.LazyFrame.map": [[577, "polars-lazyframe-map"]], "Meta": [[538, "meta"]], "polars.LazyFrame.join_asof": [[573, "polars-lazyframe-join-asof"]], "polars.LazyFrame.quantile": [[586, "polars-lazyframe-quantile"]], "polars.LazyFrame.inspect": [[570, "polars-lazyframe-inspect"]], "polars.LazyFrame.take_every": [[602, "polars-lazyframe-take-every"]], "API reference": [[546, "api-reference"]], "polars.LazyFrame.filter": [[563, "polars-lazyframe-filter"]], "polars.LazyFrame.dtypes": [[558, "polars-lazyframe-dtypes"]], "polars.LazyFrame.shift_and_fill": [[593, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.fill_null": [[562, "polars-lazyframe-fill-null"]], "polars.LazyFrame.min": [[583, "polars-lazyframe-min"]], "polars.LazyFrame.drop_nulls": [[557, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.head": [[569, "polars-lazyframe-head"]], "polars.LazyFrame.merge_sorted": [[582, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.explode": [[559, "polars-lazyframe-explode"]], "polars.LazyFrame.pipe": [[584, "polars-lazyframe-pipe"]], "polars.LazyFrame.limit": [[576, "polars-lazyframe-limit"]], "polars.LazyFrame.profile": [[585, "polars-lazyframe-profile"]], "polars.LazyFrame.groupby": [[566, "polars-lazyframe-groupby"]], "polars.LazyFrame.interpolate": [[571, "polars-lazyframe-interpolate"]], "polars.LazyFrame.read_json": [[587, "polars-lazyframe-read-json"]], "polars.LazyFrame.sink_ipc": [[595, "polars-lazyframe-sink-ipc"]], "polars.LazyFrame.sum": [[600, "polars-lazyframe-sum"]], "Expressions": [[537, "expressions"]], "polars.LazyFrame.first": [[564, "polars-lazyframe-first"]], "polars.LazyFrame.std": [[599, "polars-lazyframe-std"]], "polars.LazyFrame.groupby_dynamic": [[567, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.describe_optimized_plan": [[554, "polars-lazyframe-describe-optimized-plan"]], "polars.LazyFrame.cache": [[549, "polars-lazyframe-cache"]], "polars.Expr.dt.round": [[330, "polars-expr-dt-round"]], "polars.Expr.clip_max": [[294, "polars-expr-clip-max"]], "polars.Expr.dt.quarter": [[329, "polars-expr-dt-quarter"]], "polars.Expr.arr.last": [[270, "polars-expr-arr-last"]], "polars.Expr.ceil": [[292, "polars-expr-ceil"]], "polars.Expr.bin.decode": [[286, "polars-expr-bin-decode"]], "polars.Expr.dt.nanoseconds": [[326, "polars-expr-dt-nanoseconds"]], "polars.Expr.arr.min": [[274, "polars-expr-arr-min"]], "polars.Expr.dt.minute": [[322, "polars-expr-dt-minute"]], "polars.Expr.dt.strftime": [[333, "polars-expr-dt-strftime"]], "polars.Expr.cummax": [[300, "polars-expr-cummax"]], "polars.Expr.bin.starts_with": [[289, "polars-expr-bin-starts-with"]], "polars.Expr.dt.seconds": [[332, "polars-expr-dt-seconds"]], "polars.Expr.dt.millisecond": [[320, "polars-expr-dt-millisecond"]], "polars.Expr.arr.max": [[272, "polars-expr-arr-max"]], "polars.Expr.bin.contains": [[285, "polars-expr-bin-contains"]], "polars.Expr.cast": [[290, "polars-expr-cast"]], "polars.Expr.cumprod": [[302, "polars-expr-cumprod"]], "polars.Expr.arr.tail": [[280, "polars-expr-arr-tail"]], "polars.Expr.dt.cast_time_unit": [[309, "polars-expr-dt-cast-time-unit"]], "polars.Expr.arr.lengths": [[271, "polars-expr-arr-lengths"]], "polars.Expr.cumulative_eval": [[304, "polars-expr-cumulative-eval"]], "polars.Expr.dt.cast_time_zone": [[310, "polars-expr-dt-cast-time-zone"]], "polars.Expr.dt.iso_year": [[317, "polars-expr-dt-iso-year"]], "polars.Expr.dt.combine": [[311, "polars-expr-dt-combine"]], "polars.Expr.clip_min": [[295, "polars-expr-clip-min"]], "polars.Expr.bin.encode": [[287, "polars-expr-bin-encode"]], "polars.Expr.dt.hours": [[316, "polars-expr-dt-hours"]], "polars.Expr.dt.nanosecond": [[325, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.timestamp": [[334, "polars-expr-dt-timestamp"]], "polars.Expr.dt.days": [[313, "polars-expr-dt-days"]], "polars.Expr.arr.slice": [[277, "polars-expr-arr-slice"]], "polars.Expr.dt.milliseconds": [[321, "polars-expr-dt-milliseconds"]], "polars.Expr.dot": [[306, "polars-expr-dot"]], "polars.Expr.cat.set_ordering": [[291, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.ordinal_day": [[328, "polars-expr-dt-ordinal-day"]], "polars.Expr.bin.ends_with": [[288, "polars-expr-bin-ends-with"]], "polars.Expr.dt.month": [[324, "polars-expr-dt-month"]], "polars.Expr.count": [[298, "polars-expr-count"]], "polars.Expr.diff": [[305, "polars-expr-diff"]], "polars.Expr.dt.epoch": [[314, "polars-expr-dt-epoch"]], "polars.Expr.dt.hour": [[315, "polars-expr-dt-hour"]], "polars.Expr.dt.minutes": [[323, "polars-expr-dt-minutes"]], "polars.Expr.arr.sum": [[279, "polars-expr-arr-sum"]], "polars.Expr.backward_fill": [[284, "polars-expr-backward-fill"]], "polars.Expr.dt.microseconds": [[319, "polars-expr-dt-microseconds"]], "polars.Expr.arr.reverse": [[275, "polars-expr-arr-reverse"]], "polars.Expr.arr.join": [[269, "polars-expr-arr-join"]], "polars.Expr.cosh": [[297, "polars-expr-cosh"]], "polars.Expr.cumsum": [[303, "polars-expr-cumsum"]], "polars.Expr.arr.head": [[268, "polars-expr-arr-head"]], "polars.Expr.clip": [[293, "polars-expr-clip"]], "polars.Expr.cos": [[296, "polars-expr-cos"]], "polars.Expr.cummin": [[301, "polars-expr-cummin"]], "polars.Expr.dt.offset_by": [[327, "polars-expr-dt-offset-by"]], "polars.Expr.drop_nulls": [[308, "polars-expr-drop-nulls"]], "polars.Expr.dt.microsecond": [[318, "polars-expr-dt-microsecond"]], "polars.Expr.dt.second": [[331, "polars-expr-dt-second"]], "polars.Expr.arr.mean": [[273, "polars-expr-arr-mean"]], "polars.Expr.arr.to_struct": [[282, "polars-expr-arr-to-struct"]], "polars.Expr.drop_nans": [[307, "polars-expr-drop-nans"]], "polars.Expr.arr.take": [[281, "polars-expr-arr-take"]], "polars.Expr.arr.shift": [[276, "polars-expr-arr-shift"]], "polars.Expr.dt.day": [[312, "polars-expr-dt-day"]], "polars.Expr.arr.unique": [[283, "polars-expr-arr-unique"]], "polars.Expr.arr.sort": [[278, "polars-expr-arr-sort"]], "polars.Expr.cumcount": [[299, "polars-expr-cumcount"]], "polars.DataFrame.is_empty": [[151, "polars-dataframe-is-empty"]], "polars.DataFrame.min": [[165, "polars-dataframe-min"]], "polars.DataFrame.height": [[146, "polars-dataframe-height"]], "polars.DataFrame.fold": [[136, "polars-dataframe-fold"]], "polars.DataFrame.lazy": [[158, "polars-dataframe-lazy"]], "polars.DataFrame.item": [[153, "polars-dataframe-item"]], "polars.DataFrame.merge_sorted": [[164, "polars-dataframe-merge-sorted"]], "polars.DataFrame.shift": [[186, "polars-dataframe-shift"]], "polars.DataFrame.to_dicts": [[197, "polars-dataframe-to-dicts"]], "polars.DataFrame.get_column": [[138, "polars-dataframe-get-column"]], "polars.DataFrame.sum": [[192, "polars-dataframe-sum"]], "polars.DataFrame.mean": [[161, "polars-dataframe-mean"]], "polars.DataFrame.insert_at_idx": [[148, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.rename": [[176, "polars-dataframe-rename"]], "polars.DataFrame.std": [[191, "polars-dataframe-std"]], "polars.DataFrame.to_dummies": [[198, "polars-dataframe-to-dummies"]], "polars.DataFrame.shape": [[185, "polars-dataframe-shape"]], "polars.DataFrame.shift_and_fill": [[187, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.slice": [[189, "polars-dataframe-slice"]], "polars.DataFrame.hstack": [[147, "polars-dataframe-hstack"]], "polars.DataFrame.tail": [[193, "polars-dataframe-tail"]], "polars.DataFrame.sort": [[190, "polars-dataframe-sort"]], "polars.DataFrame.replace": [[177, "polars-dataframe-replace"]], "polars.DataFrame.head": [[145, "polars-dataframe-head"]], "polars.DataFrame.hash_rows": [[144, "polars-dataframe-hash-rows"]], "polars.DataFrame.pearson_corr": [[170, "polars-dataframe-pearson-corr"]], "polars.DataFrame.is_duplicated": [[150, "polars-dataframe-is-duplicated"]], "polars.DataFrame.iter_slices": [[155, "polars-dataframe-iter-slices"]], "polars.DataFrame.product": [[173, "polars-dataframe-product"]], "polars.DataFrame.join": [[156, "polars-dataframe-join"]], "polars.DataFrame.n_chunks": [[166, "polars-dataframe-n-chunks"]], "polars.DataFrame.glimpse": [[140, "polars-dataframe-glimpse"]], "polars.DataFrame.join_asof": [[157, "polars-dataframe-join-asof"]], "polars.DataFrame.find_idx_by_name": [[135, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.partition_by": [[169, "polars-dataframe-partition-by"]], "polars.DataFrame.to_arrow": [[195, "polars-dataframe-to-arrow"]], "polars.DataFrame.reverse": [[179, "polars-dataframe-reverse"]], "polars.DataFrame.max": [[160, "polars-dataframe-max"]], "polars.DataFrame.groupby_rolling": [[143, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.melt": [[163, "polars-dataframe-melt"]], "polars.DataFrame.groupby": [[141, "polars-dataframe-groupby"]], "polars.DataFrame.pipe": [[171, "polars-dataframe-pipe"]], "polars.DataFrame.pivot": [[172, "polars-dataframe-pivot"]], "polars.DataFrame.quantile": [[174, "polars-dataframe-quantile"]], "polars.DataFrame.rows": [[181, "polars-dataframe-rows"]], "polars.DataFrame.sample": [[182, "polars-dataframe-sample"]], "polars.DataFrame.schema": [[183, "polars-dataframe-schema"]], "polars.DataFrame.select": [[184, "polars-dataframe-select"]], "polars.DataFrame.take_every": [[194, "polars-dataframe-take-every"]], "polars.DataFrame.is_unique": [[152, "polars-dataframe-is-unique"]], "polars.DataFrame.shrink_to_fit": [[188, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.groupby_dynamic": [[142, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.get_columns": [[139, "polars-dataframe-get-columns"]], "polars.DataFrame.iter_rows": [[154, "polars-dataframe-iter-rows"]], "polars.DataFrame.limit": [[159, "polars-dataframe-limit"]], "polars.DataFrame.n_unique": [[167, "polars-dataframe-n-unique"]], "polars.DataFrame.row": [[180, "polars-dataframe-row"]], "polars.DataFrame.frame_equal": [[137, "polars-dataframe-frame-equal"]], "polars.DataFrame.filter": [[134, "polars-dataframe-filter"]], "polars.DataFrame.to_dict": [[196, "polars-dataframe-to-dict"]], "polars.DataFrame.null_count": [[168, "polars-dataframe-null-count"]], "polars.DataFrame.replace_at_idx": [[178, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.interpolate": [[149, "polars-dataframe-interpolate"]], "polars.DataFrame.to_numpy": [[199, "polars-dataframe-to-numpy"]], "polars.DataFrame.median": [[162, "polars-dataframe-median"]], "polars.DataFrame.to_pandas": [[200, "polars-dataframe-to-pandas"]], "polars.DataFrame.rechunk": [[175, "polars-dataframe-rechunk"]], "polars.DataFrame.width": [[210, "polars-dataframe-width"]], "polars.Expr.arcsinh": [[251, "polars-expr-arcsinh"]], "polars.DataFrame.to_series": [[201, "polars-dataframe-to-series"]], "polars.Expr.arr.get": [[267, "polars-expr-arr-get"]], "polars.internals.dataframe.groupby.GroupBy.all": [[216, "polars-internals-dataframe-groupby-groupby-all"]], "polars.Expr.arr.diff": [[263, "polars-expr-arr-diff"]], "polars.Expr.apply": [[247, "polars-expr-apply"]], "polars.Expr.arg_unique": [[257, "polars-expr-arg-unique"]], "polars.DataFrame.upsample": [[207, "polars-dataframe-upsample"]], "polars.internals.dataframe.groupby.GroupBy.n_unique": [[226, "polars-internals-dataframe-groupby-groupby-n-unique"]], "polars.internals.dataframe.groupby.GroupBy.apply": [[217, "polars-internals-dataframe-groupby-groupby-apply"]], "polars.Expr.argsort": [[258, "polars-expr-argsort"]], "polars.DataFrame.unstack": [[206, "polars-dataframe-unstack"]], "polars.internals.dataframe.groupby.GroupBy.tail": [[229, "polars-internals-dataframe-groupby-groupby-tail"]], "polars.Expr.arr.first": [[266, "polars-expr-arr-first"]], "polars.internals.dataframe.groupby.GroupBy.__iter__": [[214, "polars-internals-dataframe-groupby-groupby-iter"]], "polars.Expr.arr.eval": [[264, "polars-expr-arr-eval"]], "polars.DataFrame.vstack": [[209, "polars-dataframe-vstack"]], "polars.internals.dataframe.groupby.GroupBy.mean": [[223, "polars-internals-dataframe-groupby-groupby-mean"]], "polars.internals.dataframe.groupby.GroupBy.sum": [[228, "polars-internals-dataframe-groupby-groupby-sum"]], "polars.Expr.arcsin": [[250, "polars-expr-arcsin"]], "Data types": [[238, "data-types"]], "Numeric": [[238, "numeric"]], "Date / Time": [[238, "date-time"]], "Nested": [[238, "nested"]], "Other": [[238, "other"]], "polars.Expr.any": [[245, "polars-expr-any"]], "polars.internals.dataframe.groupby.GroupBy.max": [[222, "polars-internals-dataframe-groupby-groupby-max"]], "polars.internals.dataframe.groupby.GroupBy.min": [[225, "polars-internals-dataframe-groupby-groupby-min"]], "polars.internals.dataframe.groupby.GroupBy.agg": [[215, "polars-internals-dataframe-groupby-groupby-agg"]], "polars.Expr.arr.concat": [[261, "polars-expr-arr-concat"]], "polars.DataFrame.unnest": [[205, "polars-dataframe-unnest"]], "polars.internals.dataframe.groupby.GroupBy.median": [[224, "polars-internals-dataframe-groupby-groupby-median"]], "polars.Expr.arccos": [[248, "polars-expr-arccos"]], "polars.internals.dataframe.groupby.GroupBy.count": [[218, "polars-internals-dataframe-groupby-groupby-count"]], "polars.Expr.arccosh": [[249, "polars-expr-arccosh"]], "polars.Expr.arg_min": [[255, "polars-expr-arg-min"]], "polars.Expr.append": [[246, "polars-expr-append"]], "DataFrame": [[235, "dataframe"]], "polars.internals.dataframe.groupby.GroupBy.first": [[219, "polars-internals-dataframe-groupby-groupby-first"]], "polars.DataFrame.to_struct": [[202, "polars-dataframe-to-struct"]], "polars.Expr.arr.arg_min": [[260, "polars-expr-arr-arg-min"]], "polars.Expr.agg_groups": [[242, "polars-expr-agg-groups"]], "Exceptions": [[239, "exceptions"]], "polars.Expr.arctanh": [[253, "polars-expr-arctanh"]], "polars.internals.dataframe.groupby.GroupBy.last": [[221, "polars-internals-dataframe-groupby-groupby-last"]], "polars.Expr.all": [[244, "polars-expr-all"]], "polars.Expr.alias": [[243, "polars-expr-alias"]], "polars.internals.dataframe.groupby.GroupBy.head": [[220, "polars-internals-dataframe-groupby-groupby-head"]], "polars.Expr.abs": [[241, "polars-expr-abs"]], "polars.Expr.arg_sort": [[256, "polars-expr-arg-sort"]], "polars.Expr.arr.contains": [[262, "polars-expr-arr-contains"]], "polars.DataFrame.transpose": [[203, "polars-dataframe-transpose"]], "polars.DataFrame.with_row_count": [[213, "polars-dataframe-with-row-count"]], "polars.Expr.arctan": [[252, "polars-expr-arctan"]], "polars.internals.dataframe.groupby.GroupBy.quantile": [[227, "polars-internals-dataframe-groupby-groupby-quantile"]], "polars.Expr.arr.explode": [[265, "polars-expr-arr-explode"]], "polars.DataFrame.unique": [[204, "polars-dataframe-unique"]], "polars.Expr.arr.arg_max": [[259, "polars-expr-arr-arg-max"]], "polars.Expr.arg_max": [[254, "polars-expr-arg-max"]], "polars.DataFrame.with_columns": [[212, "polars-dataframe-with-columns"]], "polars.DataFrame.var": [[208, "polars-dataframe-var"]], "polars.DataFrame.with_column": [[211, "polars-dataframe-with-column"]]}, "indexentries": {"binary (class in polars)": [[2, "polars.Binary"]], "__init__() (polars.binary method)": [[2, "polars.Binary.__init__"]], "boolean (class in polars)": [[3, "polars.Boolean"]], "__init__() (polars.boolean method)": [[3, "polars.Boolean.__init__"]], "categorical (class in polars)": [[4, "polars.Categorical"]], "__init__() (polars.categorical method)": [[4, "polars.Categorical.__init__"]], "load() (polars.config class method)": [[5, "polars.Config.load"]], "restore_defaults() (polars.config class method)": [[6, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[7, "polars.Config.save"]], "set_ascii_tables() (polars.config class method)": [[8, "polars.Config.set_ascii_tables"]], "set_fmt_float() (polars.config class method)": [[9, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[10, "polars.Config.set_fmt_str_lengths"]], "set_tbl_cell_alignment() (polars.config class method)": [[11, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cols() (polars.config class method)": [[12, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[13, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[14, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[15, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[16, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[17, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[18, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[19, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[20, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[21, "polars.Config.set_tbl_width_chars"]], "set_verbose() (polars.config class method)": [[22, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[23, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[24, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[25, "polars.DataFrame.write_csv"]], "write_ipc() (polars.dataframe method)": [[26, "polars.DataFrame.write_ipc"]], "write_json() (polars.dataframe method)": [[27, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[28, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[29, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[30, "polars.DataType"]], "__init__() (polars.datatype method)": [[30, "polars.DataType.__init__"]], "date (class in polars)": [[31, "polars.Date"]], "__init__() (polars.date method)": [[31, "polars.Date.__init__"]], "datetime (class in polars)": [[32, "polars.Datetime"]], "__init__() (polars.datetime method)": [[32, "polars.Datetime.__init__"]], "duration (class in polars)": [[33, "polars.Duration"]], "__init__() (polars.duration method)": [[33, "polars.Duration.__init__"]], "float32 (class in polars)": [[34, "polars.Float32"]], "__init__() (polars.float32 method)": [[34, "polars.Float32.__init__"]], "float64 (class in polars)": [[35, "polars.Float64"]], "__init__() (polars.float64 method)": [[35, "polars.Float64.__init__"]], "int16 (class in polars)": [[36, "polars.Int16"]], "__init__() (polars.int16 method)": [[36, "polars.Int16.__init__"]], "int32 (class in polars)": [[37, "polars.Int32"]], "__init__() (polars.int32 method)": [[37, "polars.Int32.__init__"]], "int64 (class in polars)": [[38, "polars.Int64"]], "__init__() (polars.int64 method)": [[38, "polars.Int64.__init__"]], "int8 (class in polars)": [[39, "polars.Int8"]], "__init__() (polars.int8 method)": [[39, "polars.Int8.__init__"]], "list (class in polars)": [[40, "polars.List"]], "__init__() (polars.list method)": [[40, "polars.List.__init__"]], "null (class in polars)": [[41, "polars.Null"]], "__init__() (polars.null method)": [[41, "polars.Null.__init__"]], "object (class in polars)": [[42, "polars.Object"]], "__init__() (polars.object method)": [[42, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[43, "polars.SQLContext.execute"]], "query() (polars.sqlcontext method)": [[44, "polars.SQLContext.query"]], "register() (polars.sqlcontext method)": [[45, "polars.SQLContext.register"]], "stringcache (class in polars)": [[46, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[46, "polars.StringCache.__init__"]], "struct (class in polars)": [[47, "polars.Struct"]], "__init__() (polars.struct method)": [[47, "polars.Struct.__init__"]], "time (class in polars)": [[48, "polars.Time"]], "__init__() (polars.time method)": [[48, "polars.Time.__init__"]], "uint16 (class in polars)": [[49, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[49, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[50, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[50, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[51, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[51, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[52, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[52, "polars.UInt8.__init__"]], "unknown (class in polars)": [[53, "polars.Unknown"]], "__init__() (polars.unknown method)": [[53, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[54, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[54, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[55, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[56, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[57, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[58, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[59, "polars.api.register_series_namespace"]], "arg_where() (in module polars)": [[60, "polars.arg_where"]], "build_info() (in module polars)": [[61, "polars.build_info"]], "collect_all() (in module polars)": [[62, "polars.collect_all"]], "concat() (in module polars)": [[63, "polars.concat"]], "cut() (in module polars)": [[64, "polars.cut"]], "date_range() (in module polars)": [[65, "polars.date_range"]], "arrowerror": [[66, "polars.exceptions.ArrowError"]], "computeerror": [[67, "polars.exceptions.ComputeError"]], "duplicateerror": [[68, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[69, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[70, "polars.exceptions.NoDataError"]], "norowsreturned": [[71, "polars.exceptions.NoRowsReturned"]], "notfounderror": [[72, "polars.exceptions.NotFoundError"]], "panicexception": [[73, "polars.exceptions.PanicException"]], "rowsexception": [[74, "polars.exceptions.RowsException"]], "schemaerror": [[75, "polars.exceptions.SchemaError"]], "shapeerror": [[76, "polars.exceptions.ShapeError"]], "toomanyrowsreturned": [[77, "polars.exceptions.TooManyRowsReturned"]], "from_arrow() (in module polars)": [[78, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[79, "polars.from_dataframe"]], "from_dict() (in module polars)": [[80, "polars.from_dict"]], "from_dicts() (in module polars)": [[81, "polars.from_dicts"]], "from_numpy() (in module polars)": [[82, "polars.from_numpy"]], "from_pandas() (in module polars)": [[83, "polars.from_pandas"]], "from_records() (in module polars)": [[84, "polars.from_records"]], "get_dummies() (in module polars)": [[85, "polars.get_dummies"]], "get_idx_type() (in module polars)": [[86, "polars.get_idx_type"]], "next_batches() (polars.internals.batched.batchedcsvreader method)": [[87, "polars.internals.batched.BatchedCsvReader.next_batches"]], "ones() (in module polars)": [[88, "polars.ones"]], "read_avro() (in module polars)": [[89, "polars.read_avro"]], "read_csv() (in module polars)": [[90, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[91, "polars.read_csv_batched"]], "read_delta() (in module polars)": [[92, "polars.read_delta"]], "read_excel() (in module polars)": [[93, "polars.read_excel"]], "read_ipc() (in module polars)": [[94, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[95, "polars.read_ipc_schema"]], "read_json() (in module polars)": [[96, "polars.read_json"]], "read_ndjson() (in module polars)": [[97, "polars.read_ndjson"]], "read_parquet() (in module polars)": [[98, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[99, "polars.read_parquet_schema"]], "read_sql() (in module polars)": [[100, "polars.read_sql"]], "scan_csv() (in module polars)": [[101, "polars.scan_csv"]], "scan_delta() (in module polars)": [[102, "polars.scan_delta"]], "scan_ds() (in module polars)": [[103, "polars.scan_ds"]], "scan_ipc() (in module polars)": [[104, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[105, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[106, "polars.scan_parquet"]], "show_versions() (in module polars)": [[107, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[108, "polars.testing.assert_frame_equal"]], "assert_series_equal() (in module polars.testing)": [[109, "polars.testing.assert_series_equal"]], "__init__() (polars.testing.parametric.column method)": [[110, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[110, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[111, "polars.testing.parametric.columns"]], "dataframes() (in module polars.testing.parametric)": [[112, "polars.testing.parametric.dataframes"]], "series() (in module polars.testing.parametric)": [[113, "polars.testing.parametric.series"]], "threadpool_size() (in module polars)": [[114, "polars.threadpool_size"]], "toggle_string_cache() (in module polars)": [[115, "polars.toggle_string_cache"]], "zeros() (in module polars)": [[116, "polars.zeros"]], "__dataframe__() (polars.dataframe method)": [[119, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[120, "polars.DataFrame.apply"]], "cleared() (polars.dataframe method)": [[121, "polars.DataFrame.cleared"]], "clone() (polars.dataframe method)": [[122, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[123, "polars.DataFrame.columns"]], "describe() (polars.dataframe method)": [[124, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[125, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[126, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[127, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[128, "polars.DataFrame.dtypes"]], "estimated_size() (polars.dataframe method)": [[129, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[130, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[131, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[132, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[133, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[134, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[135, "polars.DataFrame.find_idx_by_name"]], "fold() (polars.dataframe method)": [[136, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[137, "polars.DataFrame.frame_equal"]], "get_column() (polars.dataframe method)": [[138, "polars.DataFrame.get_column"]], "get_columns() (polars.dataframe method)": [[139, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[140, "polars.DataFrame.glimpse"]], "groupby() (polars.dataframe method)": [[141, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[142, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[143, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[144, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[145, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[146, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[147, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[148, "polars.DataFrame.insert_at_idx"]], "interpolate() (polars.dataframe method)": [[149, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[150, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[151, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[152, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[153, "polars.DataFrame.item"]], "iter_rows() (polars.dataframe method)": [[154, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[155, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[156, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[157, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[158, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[159, "polars.DataFrame.limit"]], "max() (polars.dataframe method)": [[160, "polars.DataFrame.max"]], "mean() (polars.dataframe method)": [[161, "polars.DataFrame.mean"]], "median() (polars.dataframe method)": [[162, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[163, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[164, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[165, "polars.DataFrame.min"]], "n_chunks() (polars.dataframe method)": [[166, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[167, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[168, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[169, "polars.DataFrame.partition_by"]], "pearson_corr() (polars.dataframe method)": [[170, "polars.DataFrame.pearson_corr"]], "pipe() (polars.dataframe method)": [[171, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[172, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[173, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[174, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[175, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[176, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[177, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[178, "polars.DataFrame.replace_at_idx"]], "reverse() (polars.dataframe method)": [[179, "polars.DataFrame.reverse"]], "row() (polars.dataframe method)": [[180, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[181, "polars.DataFrame.rows"]], "sample() (polars.dataframe method)": [[182, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[183, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[184, "polars.DataFrame.select"]], "shape (polars.dataframe property)": [[185, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[186, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[187, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[188, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[189, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[190, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[191, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[192, "polars.DataFrame.sum"]], "tail() (polars.dataframe method)": [[193, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[194, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[195, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[196, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[197, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[198, "polars.DataFrame.to_dummies"]], "to_numpy() (polars.dataframe method)": [[199, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[200, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[201, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[202, "polars.DataFrame.to_struct"]], "transpose() (polars.dataframe method)": [[203, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[204, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[205, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[206, "polars.DataFrame.unstack"]], "upsample() (polars.dataframe method)": [[207, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[208, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[209, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[210, "polars.DataFrame.width"]], "with_column() (polars.dataframe method)": [[211, "polars.DataFrame.with_column"]], "with_columns() (polars.dataframe method)": [[212, "polars.DataFrame.with_columns"]], "with_row_count() (polars.dataframe method)": [[213, "polars.DataFrame.with_row_count"]], "__iter__() (polars.internals.dataframe.groupby.groupby method)": [[214, "polars.internals.dataframe.groupby.GroupBy.__iter__"]], "agg() (polars.internals.dataframe.groupby.groupby method)": [[215, "polars.internals.dataframe.groupby.GroupBy.agg"]], "all() (polars.internals.dataframe.groupby.groupby method)": [[216, "polars.internals.dataframe.groupby.GroupBy.all"]], "apply() (polars.internals.dataframe.groupby.groupby method)": [[217, "polars.internals.dataframe.groupby.GroupBy.apply"]], "count() (polars.internals.dataframe.groupby.groupby method)": [[218, "polars.internals.dataframe.groupby.GroupBy.count"]], "first() (polars.internals.dataframe.groupby.groupby method)": [[219, "polars.internals.dataframe.groupby.GroupBy.first"]], "head() (polars.internals.dataframe.groupby.groupby method)": [[220, "polars.internals.dataframe.groupby.GroupBy.head"]], "last() (polars.internals.dataframe.groupby.groupby method)": [[221, "polars.internals.dataframe.groupby.GroupBy.last"]], "max() (polars.internals.dataframe.groupby.groupby method)": [[222, "polars.internals.dataframe.groupby.GroupBy.max"]], "mean() (polars.internals.dataframe.groupby.groupby method)": [[223, "polars.internals.dataframe.groupby.GroupBy.mean"]], "median() (polars.internals.dataframe.groupby.groupby method)": [[224, "polars.internals.dataframe.groupby.GroupBy.median"]], "min() (polars.internals.dataframe.groupby.groupby method)": [[225, "polars.internals.dataframe.groupby.GroupBy.min"]], "n_unique() (polars.internals.dataframe.groupby.groupby method)": [[226, "polars.internals.dataframe.groupby.GroupBy.n_unique"]], "quantile() (polars.internals.dataframe.groupby.groupby method)": [[227, "polars.internals.dataframe.groupby.GroupBy.quantile"]], "sum() (polars.internals.dataframe.groupby.groupby method)": [[228, "polars.internals.dataframe.groupby.GroupBy.sum"]], "tail() (polars.internals.dataframe.groupby.groupby method)": [[229, "polars.internals.dataframe.groupby.GroupBy.tail"]], "abs() (polars.expr method)": [[241, "polars.Expr.abs"]], "agg_groups() (polars.expr method)": [[242, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[243, "polars.Expr.alias"]], "all() (polars.expr method)": [[244, "polars.Expr.all"]], "any() (polars.expr method)": [[245, "polars.Expr.any"]], "append() (polars.expr method)": [[246, "polars.Expr.append"]], "apply() (polars.expr method)": [[247, "polars.Expr.apply"]], "arccos() (polars.expr method)": [[248, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[249, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[250, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[251, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[252, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[253, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[254, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[255, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[256, "polars.Expr.arg_sort"]], "arg_unique() (polars.expr method)": [[257, "polars.Expr.arg_unique"]], "argsort() (polars.expr method)": [[258, "polars.Expr.argsort"]], "arg_max() (polars.expr.arr method)": [[259, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[260, "polars.Expr.arr.arg_min"]], "concat() (polars.expr.arr method)": [[261, "polars.Expr.arr.concat"]], "contains() (polars.expr.arr method)": [[262, "polars.Expr.arr.contains"]], "diff() (polars.expr.arr method)": [[263, "polars.Expr.arr.diff"]], "eval() (polars.expr.arr method)": [[264, "polars.Expr.arr.eval"]], "explode() (polars.expr.arr method)": [[265, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[266, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[267, "polars.Expr.arr.get"]], "head() (polars.expr.arr method)": [[268, "polars.Expr.arr.head"]], "join() (polars.expr.arr method)": [[269, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[270, "polars.Expr.arr.last"]], "lengths() (polars.expr.arr method)": [[271, "polars.Expr.arr.lengths"]], "max() (polars.expr.arr method)": [[272, "polars.Expr.arr.max"]], "mean() (polars.expr.arr method)": [[273, "polars.Expr.arr.mean"]], "min() (polars.expr.arr method)": [[274, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[275, "polars.Expr.arr.reverse"]], "shift() (polars.expr.arr method)": [[276, "polars.Expr.arr.shift"]], "slice() (polars.expr.arr method)": [[277, "polars.Expr.arr.slice"]], "sort() (polars.expr.arr method)": [[278, "polars.Expr.arr.sort"]], "sum() (polars.expr.arr method)": [[279, "polars.Expr.arr.sum"]], "tail() (polars.expr.arr method)": [[280, "polars.Expr.arr.tail"]], "take() (polars.expr.arr method)": [[281, "polars.Expr.arr.take"]], "to_struct() (polars.expr.arr method)": [[282, "polars.Expr.arr.to_struct"]], "unique() (polars.expr.arr method)": [[283, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[284, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[285, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[286, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[287, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[288, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[289, "polars.Expr.bin.starts_with"]], "cast() (polars.expr method)": [[290, "polars.Expr.cast"]], "set_ordering() (polars.expr.cat method)": [[291, "polars.Expr.cat.set_ordering"]], "ceil() (polars.expr method)": [[292, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[293, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[294, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[295, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[296, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[297, "polars.Expr.cosh"]], "count() (polars.expr method)": [[298, "polars.Expr.count"]], "cumcount() (polars.expr method)": [[299, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[300, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[301, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[302, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[303, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[304, "polars.Expr.cumulative_eval"]], "diff() (polars.expr method)": [[305, "polars.Expr.diff"]], "dot() (polars.expr method)": [[306, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[307, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[308, "polars.Expr.drop_nulls"]], "cast_time_unit() (polars.expr.dt method)": [[309, "polars.Expr.dt.cast_time_unit"]], "cast_time_zone() (polars.expr.dt method)": [[310, "polars.Expr.dt.cast_time_zone"]], "combine() (polars.expr.dt method)": [[311, "polars.Expr.dt.combine"]], "day() (polars.expr.dt method)": [[312, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[313, "polars.Expr.dt.days"]], "epoch() (polars.expr.dt method)": [[314, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[315, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[316, "polars.Expr.dt.hours"]], "iso_year() (polars.expr.dt method)": [[317, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[318, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[319, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[320, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[321, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[322, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[323, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[324, "polars.Expr.dt.month"]], "nanosecond() (polars.expr.dt method)": [[325, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[326, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[327, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[328, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[329, "polars.Expr.dt.quarter"]], "round() (polars.expr.dt method)": [[330, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[331, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[332, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[333, "polars.Expr.dt.strftime"]], "timestamp() (polars.expr.dt method)": [[334, "polars.Expr.dt.timestamp"]], "truncate() (polars.expr.dt method)": [[335, "polars.Expr.dt.truncate"]], "tz_localize() (polars.expr.dt method)": [[336, "polars.Expr.dt.tz_localize"]], "week() (polars.expr.dt method)": [[337, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[338, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[339, "polars.Expr.dt.with_time_unit"]], "with_time_zone() (polars.expr.dt method)": [[340, "polars.Expr.dt.with_time_zone"]], "year() (polars.expr.dt method)": [[341, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[342, "polars.Expr.entropy"]], "ewm_mean() (polars.expr method)": [[343, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[344, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[345, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[346, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[347, "polars.Expr.exp"]], "explode() (polars.expr method)": [[348, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[349, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[350, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[351, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[352, "polars.Expr.filter"]], "first() (polars.expr method)": [[353, "polars.Expr.first"]], "flatten() (polars.expr method)": [[354, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[355, "polars.Expr.floor"]], "forward_fill() (polars.expr method)": [[356, "polars.Expr.forward_fill"]], "hash() (polars.expr method)": [[357, "polars.Expr.hash"]], "head() (polars.expr method)": [[358, "polars.Expr.head"]], "inspect() (polars.expr method)": [[359, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[360, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[361, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[362, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[363, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[364, "polars.Expr.is_first"]], "is_in() (polars.expr method)": [[365, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[366, "polars.Expr.is_infinite"]], "is_nan() (polars.expr method)": [[367, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[368, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[369, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[370, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[371, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[372, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[373, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[374, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[375, "polars.Expr.last"]], "len() (polars.expr method)": [[376, "polars.Expr.len"]], "limit() (polars.expr method)": [[377, "polars.Expr.limit"]], "list() (polars.expr method)": [[378, "polars.Expr.list"]], "log() (polars.expr method)": [[379, "polars.Expr.log"]], "log10() (polars.expr method)": [[380, "polars.Expr.log10"]], "lower_bound() (polars.expr method)": [[381, "polars.Expr.lower_bound"]], "map() (polars.expr method)": [[382, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[383, "polars.Expr.map_alias"]], "max() (polars.expr method)": [[384, "polars.Expr.max"]], "mean() (polars.expr method)": [[385, "polars.Expr.mean"]], "median() (polars.expr method)": [[386, "polars.Expr.median"]], "has_multiple_outputs() (polars.expr.meta method)": [[387, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[388, "polars.Expr.meta.is_regex_projection"]], "output_name() (polars.expr.meta method)": [[389, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[390, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[391, "polars.Expr.meta.root_names"]], "undo_aliases() (polars.expr.meta method)": [[392, "polars.Expr.meta.undo_aliases"]], "min() (polars.expr method)": [[393, "polars.Expr.min"]], "mode() (polars.expr method)": [[394, "polars.Expr.mode"]], "n_unique() (polars.expr method)": [[395, "polars.Expr.n_unique"]], "nan_max() (polars.expr method)": [[396, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[397, "polars.Expr.nan_min"]], "null_count() (polars.expr method)": [[398, "polars.Expr.null_count"]], "over() (polars.expr method)": [[399, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[400, "polars.Expr.pct_change"]], "pow() (polars.expr method)": [[401, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[402, "polars.Expr.prefix"]], "product() (polars.expr method)": [[403, "polars.Expr.product"]], "quantile() (polars.expr method)": [[404, "polars.Expr.quantile"]], "rank() (polars.expr method)": [[405, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[406, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[407, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[408, "polars.Expr.repeat_by"]], "reshape() (polars.expr method)": [[409, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[410, "polars.Expr.reverse"]], "rolling_apply() (polars.expr method)": [[411, "polars.Expr.rolling_apply"]], "rolling_max() (polars.expr method)": [[412, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[413, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[414, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[415, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[416, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[417, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[418, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[419, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[420, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[421, "polars.Expr.round"]], "sample() (polars.expr method)": [[422, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[423, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[424, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[425, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[426, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[427, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[428, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[429, "polars.Expr.sign"]], "sin() (polars.expr method)": [[430, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[431, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[432, "polars.Expr.skew"]], "slice() (polars.expr method)": [[433, "polars.Expr.slice"]], "sort() (polars.expr method)": [[434, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[435, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[436, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[437, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[438, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[439, "polars.Expr.str.contains"]], "count_match() (polars.expr.str method)": [[440, "polars.Expr.str.count_match"]], "decode() (polars.expr.str method)": [[441, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[442, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[443, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[444, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[445, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[446, "polars.Expr.str.extract_all"]], "json_path_match() (polars.expr.str method)": [[447, "polars.Expr.str.json_path_match"]], "lengths() (polars.expr.str method)": [[448, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[449, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[450, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[451, "polars.Expr.str.n_chars"]], "parse_int() (polars.expr.str method)": [[452, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[453, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[454, "polars.Expr.str.replace_all"]], "rjust() (polars.expr.str method)": [[455, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[456, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[457, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[458, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[459, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[460, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[461, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[462, "polars.Expr.str.strip"]], "strptime() (polars.expr.str method)": [[463, "polars.Expr.str.strptime"]], "to_lowercase() (polars.expr.str method)": [[464, "polars.Expr.str.to_lowercase"]], "to_uppercase() (polars.expr.str method)": [[465, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[466, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[467, "polars.Expr.struct.field"]], "rename_fields() (polars.expr.struct method)": [[468, "polars.Expr.struct.rename_fields"]], "suffix() (polars.expr method)": [[469, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[470, "polars.Expr.sum"]], "tail() (polars.expr method)": [[471, "polars.Expr.tail"]], "take() (polars.expr method)": [[472, "polars.Expr.take"]], "take_every() (polars.expr method)": [[473, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[474, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[475, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[476, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[477, "polars.Expr.top_k"]], "unique() (polars.expr method)": [[478, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[479, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[480, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[481, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[482, "polars.Expr.var"]], "where() (polars.expr method)": [[483, "polars.Expr.where"]], "all() (in module polars)": [[484, "polars.all"]], "any() (in module polars)": [[485, "polars.any"]], "apply() (in module polars)": [[486, "polars.apply"]], "arange() (in module polars)": [[487, "polars.arange"]], "argsort_by() (in module polars)": [[488, "polars.argsort_by"]], "avg() (in module polars)": [[489, "polars.avg"]], "coalesce() (in module polars)": [[490, "polars.coalesce"]], "col() (in module polars)": [[491, "polars.col"]], "concat_list() (in module polars)": [[492, "polars.concat_list"]], "concat_str() (in module polars)": [[493, "polars.concat_str"]], "count() (in module polars)": [[494, "polars.count"]], "cov() (in module polars)": [[495, "polars.cov"]], "cumfold() (in module polars)": [[496, "polars.cumfold"]], "cumreduce() (in module polars)": [[497, "polars.cumreduce"]], "cumsum() (in module polars)": [[498, "polars.cumsum"]], "date() (in module polars)": [[499, "polars.date"]], "datetime() (in module polars)": [[500, "polars.datetime"]], "duration() (in module polars)": [[501, "polars.duration"]], "element() (in module polars)": [[502, "polars.element"]], "exclude() (in module polars)": [[503, "polars.exclude"]], "first() (in module polars)": [[504, "polars.first"]], "fold() (in module polars)": [[505, "polars.fold"]], "format() (in module polars)": [[506, "polars.format"]], "from_epoch() (in module polars)": [[507, "polars.from_epoch"]], "groups() (in module polars)": [[508, "polars.groups"]], "head() (in module polars)": [[509, "polars.head"]], "list() (in module polars)": [[510, "polars.list"]], "lit() (in module polars)": [[511, "polars.lit"]], "map() (in module polars)": [[512, "polars.map"]], "max() (in module polars)": [[513, "polars.max"]], "mean() (in module polars)": [[514, "polars.mean"]], "median() (in module polars)": [[515, "polars.median"]], "min() (in module polars)": [[516, "polars.min"]], "n_unique() (in module polars)": [[517, "polars.n_unique"]], "pearson_corr() (in module polars)": [[518, "polars.pearson_corr"]], "quantile() (in module polars)": [[519, "polars.quantile"]], "reduce() (in module polars)": [[520, "polars.reduce"]], "repeat() (in module polars)": [[521, "polars.repeat"]], "select() (in module polars)": [[522, "polars.select"]], "spearman_rank_corr() (in module polars)": [[523, "polars.spearman_rank_corr"]], "std() (in module polars)": [[524, "polars.std"]], "struct() (in module polars)": [[525, "polars.struct"]], "sum() (in module polars)": [[526, "polars.sum"]], "tail() (in module polars)": [[527, "polars.tail"]], "var() (in module polars)": [[528, "polars.var"]], "when() (in module polars)": [[529, "polars.when"]], "cache() (polars.lazyframe method)": [[549, "polars.LazyFrame.cache"]], "cleared() (polars.lazyframe method)": [[550, "polars.LazyFrame.cleared"]], "clone() (polars.lazyframe method)": [[551, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[552, "polars.LazyFrame.collect"]], "columns (polars.lazyframe property)": [[553, "polars.LazyFrame.columns"]], "describe_optimized_plan() (polars.lazyframe method)": [[554, "polars.LazyFrame.describe_optimized_plan"]], "describe_plan() (polars.lazyframe method)": [[555, "polars.LazyFrame.describe_plan"]], "drop() (polars.lazyframe method)": [[556, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[557, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[558, "polars.LazyFrame.dtypes"]], "explode() (polars.lazyframe method)": [[559, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[560, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[561, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[562, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[563, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[564, "polars.LazyFrame.first"]], "from_json() (polars.lazyframe class method)": [[565, "polars.LazyFrame.from_json"]], "groupby() (polars.lazyframe method)": [[566, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[567, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[568, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[569, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[570, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[571, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[572, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[573, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[574, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[575, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[576, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[577, "polars.LazyFrame.map"]], "max() (polars.lazyframe method)": [[578, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[579, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[580, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[581, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[582, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[583, "polars.LazyFrame.min"]], "pipe() (polars.lazyframe method)": [[584, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[585, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[586, "polars.LazyFrame.quantile"]], "read_json() (polars.lazyframe class method)": [[587, "polars.LazyFrame.read_json"]], "rename() (polars.lazyframe method)": [[588, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[589, "polars.LazyFrame.reverse"]], "schema (polars.lazyframe property)": [[590, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[591, "polars.LazyFrame.select"]], "shift() (polars.lazyframe method)": [[592, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[593, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[594, "polars.LazyFrame.show_graph"]], "sink_ipc() (polars.lazyframe method)": [[595, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[596, "polars.LazyFrame.sink_parquet"]], "slice() (polars.lazyframe method)": [[597, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[598, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[599, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[600, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[601, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[602, "polars.LazyFrame.take_every"]], "unique() (polars.lazyframe method)": [[603, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[604, "polars.LazyFrame.unnest"]], "var() (polars.lazyframe method)": [[605, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[606, "polars.LazyFrame.width"]], "with_column() (polars.lazyframe method)": [[607, "polars.LazyFrame.with_column"]], "with_columns() (polars.lazyframe method)": [[608, "polars.LazyFrame.with_columns"]], "with_context() (polars.lazyframe method)": [[609, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[610, "polars.LazyFrame.with_row_count"]], "write_json() (polars.lazyframe method)": [[611, "polars.LazyFrame.write_json"]], "agg() (polars.internals.lazyframe.groupby.lazygroupby method)": [[612, "polars.internals.lazyframe.groupby.LazyGroupBy.agg"]], "apply() (polars.internals.lazyframe.groupby.lazygroupby method)": [[613, "polars.internals.lazyframe.groupby.LazyGroupBy.apply"]], "head() (polars.internals.lazyframe.groupby.lazygroupby method)": [[614, "polars.internals.lazyframe.groupby.LazyGroupBy.head"]], "tail() (polars.internals.lazyframe.groupby.lazygroupby method)": [[615, "polars.internals.lazyframe.groupby.LazyGroupBy.tail"]], "abs() (polars.series method)": [[623, "polars.Series.abs"]], "alias() (polars.series method)": [[624, "polars.Series.alias"]], "all() (polars.series method)": [[625, "polars.Series.all"]], "any() (polars.series method)": [[626, "polars.Series.any"]], "append() (polars.series method)": [[627, "polars.Series.append"]], "apply() (polars.series method)": [[628, "polars.Series.apply"]], "arccos() (polars.series method)": [[629, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[630, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[631, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[632, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[633, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[634, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[635, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[636, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[637, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[638, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[639, "polars.Series.arg_unique"]], "argsort() (polars.series method)": [[640, "polars.Series.argsort"]], "arr (polars.series attribute)": [[641, "polars.Series.arr"]], "arg_max() (polars.series.arr method)": [[642, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[643, "polars.Series.arr.arg_min"]], "concat() (polars.series.arr method)": [[644, "polars.Series.arr.concat"]], "contains() (polars.series.arr method)": [[645, "polars.Series.arr.contains"]], "diff() (polars.series.arr method)": [[646, "polars.Series.arr.diff"]], "eval() (polars.series.arr method)": [[647, "polars.Series.arr.eval"]], "explode() (polars.series.arr method)": [[648, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[649, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[650, "polars.Series.arr.get"]], "head() (polars.series.arr method)": [[651, "polars.Series.arr.head"]], "join() (polars.series.arr method)": [[652, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[653, "polars.Series.arr.last"]], "lengths() (polars.series.arr method)": [[654, "polars.Series.arr.lengths"]], "max() (polars.series.arr method)": [[655, "polars.Series.arr.max"]], "mean() (polars.series.arr method)": [[656, "polars.Series.arr.mean"]], "min() (polars.series.arr method)": [[657, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[658, "polars.Series.arr.reverse"]], "shift() (polars.series.arr method)": [[659, "polars.Series.arr.shift"]], "slice() (polars.series.arr method)": [[660, "polars.Series.arr.slice"]], "sort() (polars.series.arr method)": [[661, "polars.Series.arr.sort"]], "sum() (polars.series.arr method)": [[662, "polars.Series.arr.sum"]], "tail() (polars.series.arr method)": [[663, "polars.Series.arr.tail"]], "take() (polars.series.arr method)": [[664, "polars.Series.arr.take"]], "to_struct() (polars.series.arr method)": [[665, "polars.Series.arr.to_struct"]], "unique() (polars.series.arr method)": [[666, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[667, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[668, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[669, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[670, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[671, "polars.Series.bin.starts_with"]], "cast() (polars.series method)": [[672, "polars.Series.cast"]], "cat (polars.series attribute)": [[673, "polars.Series.cat"]], "set_ordering() (polars.series.cat method)": [[674, "polars.Series.cat.set_ordering"]], "ceil() (polars.series method)": [[675, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[676, "polars.Series.chunk_lengths"]], "cleared() (polars.series method)": [[677, "polars.Series.cleared"]], "clip() (polars.series method)": [[678, "polars.Series.clip"]], "clip_max() (polars.series method)": [[679, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[680, "polars.Series.clip_min"]], "clone() (polars.series method)": [[681, "polars.Series.clone"]], "cos() (polars.series method)": [[682, "polars.Series.cos"]], "cosh() (polars.series method)": [[683, "polars.Series.cosh"]], "cummax() (polars.series method)": [[684, "polars.Series.cummax"]], "cummin() (polars.series method)": [[685, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[686, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[687, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[688, "polars.Series.cumulative_eval"]], "describe() (polars.series method)": [[689, "polars.Series.describe"]], "diff() (polars.series method)": [[690, "polars.Series.diff"]], "dot() (polars.series method)": [[691, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[692, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[693, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[694, "polars.Series.dt"]], "cast_time_unit() (polars.series.dt method)": [[695, "polars.Series.dt.cast_time_unit"]], "cast_time_zone() (polars.series.dt method)": [[696, "polars.Series.dt.cast_time_zone"]], "combine() (polars.series.dt method)": [[697, "polars.Series.dt.combine"]], "day() (polars.series.dt method)": [[698, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[699, "polars.Series.dt.days"]], "epoch() (polars.series.dt method)": [[700, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[701, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[702, "polars.Series.dt.hours"]], "iso_year() (polars.series.dt method)": [[703, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[704, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[705, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[706, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[707, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[708, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[709, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[710, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[711, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[712, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[713, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[714, "polars.Series.dt.month"]], "nanosecond() (polars.series.dt method)": [[715, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[716, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[717, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[718, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[719, "polars.Series.dt.quarter"]], "round() (polars.series.dt method)": [[720, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[721, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[722, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[723, "polars.Series.dt.strftime"]], "timestamp() (polars.series.dt method)": [[724, "polars.Series.dt.timestamp"]], "truncate() (polars.series.dt method)": [[725, "polars.Series.dt.truncate"]], "tz_localize() (polars.series.dt method)": [[726, "polars.Series.dt.tz_localize"]], "week() (polars.series.dt method)": [[727, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[728, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[729, "polars.Series.dt.with_time_unit"]], "with_time_zone() (polars.series.dt method)": [[730, "polars.Series.dt.with_time_zone"]], "year() (polars.series.dt method)": [[731, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[732, "polars.Series.dtype"]], "entropy() (polars.series method)": [[733, "polars.Series.entropy"]], "estimated_size() (polars.series method)": [[734, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[735, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[736, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[737, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[738, "polars.Series.exp"]], "explode() (polars.series method)": [[739, "polars.Series.explode"]], "extend_constant() (polars.series method)": [[740, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[741, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[742, "polars.Series.fill_null"]], "filter() (polars.series method)": [[743, "polars.Series.filter"]], "flags (polars.series attribute)": [[744, "polars.Series.flags"]], "floor() (polars.series method)": [[745, "polars.Series.floor"]], "get_chunks() (polars.series method)": [[746, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[747, "polars.Series.has_validity"]], "hash() (polars.series method)": [[748, "polars.Series.hash"]], "head() (polars.series method)": [[749, "polars.Series.head"]], "inner_dtype (polars.series attribute)": [[750, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[751, "polars.Series.interpolate"]], "is_boolean() (polars.series method)": [[752, "polars.Series.is_boolean"]], "is_datelike() (polars.series method)": [[753, "polars.Series.is_datelike"]], "is_duplicated() (polars.series method)": [[754, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[755, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[756, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[757, "polars.Series.is_first"]], "is_float() (polars.series method)": [[758, "polars.Series.is_float"]], "is_in() (polars.series method)": [[759, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[760, "polars.Series.is_infinite"]], "is_nan() (polars.series method)": [[761, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[762, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[763, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[764, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[765, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[766, "polars.Series.is_sorted"]], "is_unique() (polars.series method)": [[767, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[768, "polars.Series.is_utf8"]], "item() (polars.series method)": [[769, "polars.Series.item"]], "kurtosis() (polars.series method)": [[770, "polars.Series.kurtosis"]], "len() (polars.series method)": [[771, "polars.Series.len"]], "limit() (polars.series method)": [[772, "polars.Series.limit"]], "log() (polars.series method)": [[773, "polars.Series.log"]], "log10() (polars.series method)": [[774, "polars.Series.log10"]], "max() (polars.series method)": [[775, "polars.Series.max"]], "mean() (polars.series method)": [[776, "polars.Series.mean"]], "median() (polars.series method)": [[777, "polars.Series.median"]], "min() (polars.series method)": [[778, "polars.Series.min"]], "mode() (polars.series method)": [[779, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[780, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[781, "polars.Series.n_unique"]], "name (polars.series attribute)": [[782, "polars.Series.name"]], "nan_max() (polars.series method)": [[783, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[784, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[785, "polars.Series.new_from_index"]], "null_count() (polars.series method)": [[786, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[787, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[788, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[789, "polars.Series.peak_min"]], "product() (polars.series method)": [[790, "polars.Series.product"]], "quantile() (polars.series method)": [[791, "polars.Series.quantile"]], "rank() (polars.series method)": [[792, "polars.Series.rank"]], "rechunk() (polars.series method)": [[793, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[794, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[795, "polars.Series.rename"]], "reshape() (polars.series method)": [[796, "polars.Series.reshape"]], "reverse() (polars.series method)": [[797, "polars.Series.reverse"]], "rolling_apply() (polars.series method)": [[798, "polars.Series.rolling_apply"]], "rolling_max() (polars.series method)": [[799, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[800, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[801, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[802, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[803, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[804, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[805, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[806, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[807, "polars.Series.rolling_var"]], "round() (polars.series method)": [[808, "polars.Series.round"]], "sample() (polars.series method)": [[809, "polars.Series.sample"]], "search_sorted() (polars.series method)": [[810, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[811, "polars.Series.series_equal"]], "set() (polars.series method)": [[812, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[813, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[814, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[815, "polars.Series.shape"]], "shift() (polars.series method)": [[816, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[817, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[818, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[819, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[820, "polars.Series.shuffle"]], "sign() (polars.series method)": [[821, "polars.Series.sign"]], "sin() (polars.series method)": [[822, "polars.Series.sin"]], "sinh() (polars.series method)": [[823, "polars.Series.sinh"]], "skew() (polars.series method)": [[824, "polars.Series.skew"]], "slice() (polars.series method)": [[825, "polars.Series.slice"]], "sort() (polars.series method)": [[826, "polars.Series.sort"]], "sqrt() (polars.series method)": [[827, "polars.Series.sqrt"]], "std() (polars.series method)": [[828, "polars.Series.std"]], "str (polars.series attribute)": [[829, "polars.Series.str"]], "concat() (polars.series.str method)": [[830, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[831, "polars.Series.str.contains"]], "count_match() (polars.series.str method)": [[832, "polars.Series.str.count_match"]], "decode() (polars.series.str method)": [[833, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[834, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[835, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[836, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[837, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[838, "polars.Series.str.extract_all"]], "json_path_match() (polars.series.str method)": [[839, "polars.Series.str.json_path_match"]], "lengths() (polars.series.str method)": [[840, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[841, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[842, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[843, "polars.Series.str.n_chars"]], "parse_int() (polars.series.str method)": [[844, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[845, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[846, "polars.Series.str.replace_all"]], "rjust() (polars.series.str method)": [[847, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[848, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[849, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[850, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[851, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[852, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[853, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[854, "polars.Series.str.strip"]], "strptime() (polars.series.str method)": [[855, "polars.Series.str.strptime"]], "to_lowercase() (polars.series.str method)": [[856, "polars.Series.str.to_lowercase"]], "to_uppercase() (polars.series.str method)": [[857, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[858, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[859, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[860, "polars.Series.struct.fields"]], "rename_fields() (polars.series.struct method)": [[861, "polars.Series.struct.rename_fields"]], "to_frame() (polars.series.struct method)": [[862, "polars.Series.struct.to_frame"]], "unnest() (polars.series.struct method)": [[863, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[864, "polars.Series.sum"]], "tail() (polars.series method)": [[865, "polars.Series.tail"]], "take() (polars.series method)": [[866, "polars.Series.take"]], "take_every() (polars.series method)": [[867, "polars.Series.take_every"]], "tan() (polars.series method)": [[868, "polars.Series.tan"]], "tanh() (polars.series method)": [[869, "polars.Series.tanh"]], "time_unit (polars.series attribute)": [[870, "polars.Series.time_unit"]], "to_arrow() (polars.series method)": [[871, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[872, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[873, "polars.Series.to_frame"]], "to_list() (polars.series method)": [[874, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[875, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[876, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[877, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[878, "polars.Series.top_k"]], "unique() (polars.series method)": [[879, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[880, "polars.Series.unique_counts"]], "value_counts() (polars.series method)": [[881, "polars.Series.value_counts"]], "var() (polars.series method)": [[882, "polars.Series.var"]], "view() (polars.series method)": [[883, "polars.Series.view"]], "zip_with() (polars.series method)": [[884, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[899, "polars.SQLContext"]]}})